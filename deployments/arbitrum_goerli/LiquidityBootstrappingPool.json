{
  "address": "0x1f17D3154E3327f48eDBcfE025e47A04078Ee42d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "normalizedWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pauseWindowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swapEnabledOnStart",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "startWeights",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "name": "GradualWeightUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PausedStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "RecoveryModeStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "SwapEnabledSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "SwapFeePercentageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRecoveryMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRecoveryMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "getActionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizer",
      "outputs": [
        {
          "internalType": "contract IAuthorizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGradualWeightUpdateParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNormalizedWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPausedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pauseWindowEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferPeriodEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeesCollector",
      "outputs": [
        {
          "internalType": "contract IProtocolFeesCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScalingFactors",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inRecoveryMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "onExitPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "dueProtocolFees",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "onJoinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "dueProtocolFees",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPoolSwapStructs.SwapRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "indexIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexOut",
          "type": "uint256"
        }
      ],
      "name": "onSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IVault.SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "lastChangeBlock",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPoolSwapStructs.SwapRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "balanceTokenIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceTokenOut",
          "type": "uint256"
        }
      ],
      "name": "onSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "queryExit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "queryJoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "setSwapEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "endWeights",
          "type": "uint256[]"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0x1f17D3154E3327f48eDBcfE025e47A04078Ee42d",
    "transactionIndex": 1,
    "gasUsed": "24780408",
    "logsBloom": "0x00000000000000000000002000000000000000000000001800000000000020000000000000000004000000010000000000000000000000000000000000000000000000004000004000000020000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000200000000000000000000000000200000000000000000000420000000000000000000000000000002000100001000000000000004000000000000001000000200000000000800000000000000000000000000000000000000000000000000000040000000000000000000000004000000000020000001000000000000000010000",
    "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048",
    "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9291765,
        "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
        "address": "0x2D9e85088eCbb03FBA4f880274aD808663217092",
        "topics": [
          "0x3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e",
          "0x1f17d3154e3327f48edbcfe025e47a04078ee42d000200000000000000000001",
          "0x0000000000000000000000001f17d3154e3327f48edbcfe025e47a04078ee42d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 0,
        "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9291765,
        "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
        "address": "0x2D9e85088eCbb03FBA4f880274aD808663217092",
        "topics": [
          "0xf5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4",
          "0x1f17d3154e3327f48edbcfe025e47a04078ee42d000200000000000000000001"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000031da039c8cf6edc95fafecb7b3e70a308128b7e0000000000000000000000000d428690148436da9c7422698eee15f51c8cec871000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9291765,
        "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
        "address": "0x1f17D3154E3327f48eDBcfE025e47A04078Ee42d",
        "topics": [
          "0x0f3631f9dab08169d1db21c6dc5f32536fb2b0a6b9bb5330d71c52132f968be0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000063fc80b40000000000000000000000000000000000000000000000000000000063fc80b4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 2,
        "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9291765,
        "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
        "address": "0x1f17D3154E3327f48eDBcfE025e47A04078Ee42d",
        "topics": [
          "0xa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 3,
        "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 9291765,
        "transactionHash": "0x1f95d1701eeba67495fc60a437a19b18d7297ee68dba9ade6a2a22b21faa98eb",
        "address": "0x1f17D3154E3327f48eDBcfE025e47A04078Ee42d",
        "topics": [
          "0x5a9e84f78f7957cb4ed7478eb0fcad35ee4ecbe2e0f298420b28a3955392573f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xaf394a073781669fd5d8431227756aa19e6493b818a6aea54cdceaaf6e5ae048"
      }
    ],
    "blockNumber": 9291765,
    "cumulativeGasUsed": "24780408",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D9e85088eCbb03FBA4f880274aD808663217092",
    "Tapioca LBP",
    "tLBP",
    [
      "0x31dA039c8Cf6eDC95fAFECb7B3E70a308128b7E0",
      "0xd428690148436dA9c7422698eEe15F51C8cec871"
    ],
    [
      "200000000000000000",
      "800000000000000000"
    ],
    "100000000000000",
    0,
    0,
    "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "96cde06c0c95f8bf13bcb2a8cc6b6151",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"normalizedWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swapEnabledOnStart\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startWeights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"name\":\"GradualWeightUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGradualWeightUpdateParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScalingFactors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onExitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dueProtocolFees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onJoinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dueProtocolFees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IPoolSwapStructs.SwapRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IPoolSwapStructs.SwapRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"balanceTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceTokenOut\",\"type\":\"uint256\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"endWeights\",\"type\":\"uint256[]\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Weighted Pool with mutable weights, designed to support V2 Liquidity Bootstrapping.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval. This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this contract inherits.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Override to allow decreasing allowance by more than the current amount (setting it to zero)\"},\"disableRecoveryMode()\":{\"details\":\"Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly necessary.\"},\"enableRecoveryMode()\":{\"details\":\"Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may perform certain operations in a \\\"safer\\\" manner that is less likely to fail, in an attempt to keep the pool running, even in a pathological state. Unlike the Pause operation, which is only available during a short window after factory deployment, Recovery Mode can always be enabled.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getGradualWeightUpdateParams()\":{\"details\":\"Return start time, end time, and endWeights as an array. Current weights should be retrieved via `getNormalizedWeights()`.\"},\"getPausedState()\":{\"details\":\"Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period.\"},\"getProtocolFeesCollector()\":{\"details\":\"This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)\"},\"getScalingFactors()\":{\"details\":\"Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically not relevant for outside parties, but which might be useful for some types of Pools.\"},\"getSwapFeePercentage()\":{\"details\":\"This is stored separately, as there is no more room in `_poolState`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"This function can only be called from the Vault, from `exitPool`.\"},\"onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"This function can only be called from the Vault, from `joinPool`.\"},\"pause()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment (see `TemporarilyPausable`).\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the Vault with the same arguments, along with the number of tokens `recipient` would receive. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction.\"},\"queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"details\":\"Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the Vault with the same arguments, along with the number of tokens `sender` would have to supply. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction.\"},\"setSwapFeePercentage(uint256)\":{\"details\":\"This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}. The total supply should only be read using this function Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other storage values).\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\"},\"unpause()\":{\"details\":\"This is a permissioned function that will only work on a paused pool within the Buffer Period set during pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause after the Buffer Period expires.\"},\"updateWeightsGradually(uint256,uint256,uint256[])\":{\"details\":\"Weights will change from the current weights to the given endWeights, over startTime to endTime.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableRecoveryMode()\":{\"notice\":\"Disable recovery mode, which disables the special safe exit path for LPs.\"},\"enableRecoveryMode()\":{\"notice\":\"Enable recovery mode, which enables a special safe exit path for LPs.\"},\"getNormalizedWeights()\":{\"notice\":\"Return the current token weights.\"},\"getPoolId()\":{\"notice\":\"Return the pool id.\"},\"getProtocolFeesCollector()\":{\"notice\":\"Return the ProtocolFeesCollector contract.\"},\"getSwapEnabled()\":{\"notice\":\"Return whether swaps are enabled or not for the given pool.\"},\"getSwapFeePercentage()\":{\"notice\":\"Return the current value of the swap fee percentage.\"},\"inRecoveryMode()\":{\"notice\":\"Returns whether the pool is in Recovery Mode.\"},\"onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"notice\":\"Vault hook for removing liquidity from a pool.\"},\"onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"notice\":\"Vault hook for adding liquidity to a pool (including the first time, \\\"initializing\\\" the pool).\"},\"pause()\":{\"notice\":\"Pause the pool: an emergency action which disables all pool functions.\"},\"queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"notice\":\"\\\"Dry run\\\" `onExitPool`.\"},\"queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)\":{\"notice\":\"\\\"Dry run\\\" `onJoinPool`.\"},\"setSwapEnabled(bool)\":{\"notice\":\"Pause/unpause trading.\"},\"setSwapFeePercentage(uint256)\":{\"notice\":\"Set the swap fee percentage.\"},\"unpause()\":{\"notice\":\"Reverse a `pause` operation, and restore a pool to normal functionality.\"},\"updateWeightsGradually(uint256,uint256,uint256[])\":{\"notice\":\"Schedule a gradual weight change.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lbp/LiquidityBootstrappingPool.sol\":\"LiquidityBootstrappingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary BasePoolUserData {\\n    // Special ExitKind for all pools, used in Recovery Mode. Use the max 8-bit value to prevent conflicts\\n    // with future additions to the ExitKind enums (or any front-end code that maps to existing values)\\n    uint8 public constant RECOVERY_MODE_EXIT_KIND = 255;\\n\\n    // Return true if this is the special exit kind.\\n    function isRecoveryModeExitKind(bytes memory self) internal pure returns (bool) {\\n        // Check for the \\\"no data\\\" case, or abi.decode would revert\\n        return self.length > 0 && abi.decode(self, (uint8)) == RECOVERY_MODE_EXIT_KIND;\\n    }\\n\\n    // Parse the bptAmountIn out of the userData\\n    function recoveryModeExit(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (uint8, uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x083d26059c8546c0d98861c67d170f090c997d1835e9727e6de89cae826984ba\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the RecoveryMode module.\\n */\\ninterface IRecoveryMode {\\n    /**\\n     * @dev Emitted when the Recovery Mode status changes.\\n     */\\n    event RecoveryModeStateChanged(bool enabled);\\n\\n    /**\\n     * @notice Enables Recovery Mode in the Pool, disabling protocol fee collection and allowing for safe proportional\\n     * exits with low computational complexity and no dependencies.\\n     */\\n    function enableRecoveryMode() external;\\n\\n    /**\\n     * @notice Disables Recovery Mode in the Pool, restoring protocol fee collection and disallowing proportional exits.\\n     */\\n    function disableRecoveryMode() external;\\n\\n    /**\\n     * @notice Returns true if the Pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfef2b3f091386582ebe75f99bb481ffcf14575bb349971cfaf348c0499a6c1d7\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nlibrary WeightedPoolUserData {\\n    // In order to preserve backwards compatibility, make sure new join and exit kinds are added at the end of the enum.\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    function joinKind(bytes memory self) internal pure returns (JoinKind) {\\n        return abi.decode(self, (JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (ExitKind) {\\n        return abi.decode(self, (ExitKind));\\n    }\\n\\n    // Joins\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (JoinKind, uint256, uint256));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (ExitKind, uint256[], uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x28f09f096b04591e0103703f59ce1a0bdd7b625d374af64ce0885bf44ba68caf\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\",\"keccak256\":\"0xf8eeb6c6ad4a8a5a0b72eec1fcae67df37b4682be1fa87ab41dc9ce09f02a7f8\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xeb8a588cfca3dddd2da141ec6adc1672646186f6dbd1e707ec9b1def45e59c25\",\"license\":\"MIT\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\\n     */\\n    function getPoolId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a\\n     * 10% swap fee.\\n     */\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically\\n     * not relevant for outside parties, but which might be useful for some types of Pools.\\n     */\\n    function getScalingFactors() external view returns (uint256[] memory);\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\",\"keccak256\":\"0x4673e08f6b8e76ffa89155d704a0682a6a98e3c60ca5f28e0c4b964f26b65dbe\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x3a06a4dfb3a6f98bd72353171748045cd8a20595a2808683dbeaeec6f743664a\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x491b4b9f91903f4033870d26100e2a7584422c474f1bfe90649a6265c61983eb\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xbe4815478a942261e6e2416632342b0e55ff2b0f75c2551ffd79ad9b2326be38\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n * - Assigns infinite allowance for all token holders to the Vault\\n */\\ncontract BalancerPoolToken is ERC20Permit {\\n    IVault private immutable _vault;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IVault vault\\n    ) ERC20(tokenName, tokenSymbol) ERC20Permit(tokenName) {\\n        _vault = vault;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.\\n     *\\n     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this\\n     * contract inherits.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        if (spender == address(getVault())) {\\n            return uint256(-1);\\n        } else {\\n            return super.allowance(owner, spender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5ea2a299ca82624b363275fdd8e946c2cd549e948f8e33332db85dfa15866551\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for Pools.\\n *\\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\\n *\\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    address private immutable _owner;\\n\\n    address internal constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\\n\\n    constructor(address owner) {\\n        _owner = owner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\\n            // Only the owner can perform \\\"owner only\\\" actions, unless the owner is delegated.\\n            return msg.sender == getOwner();\\n        } else {\\n            // Non-owner actions are always processed via the Authorizer, as \\\"owner only\\\" ones are when delegated.\\n            return _getAuthorizer().canPerform(actionId, account, address(this));\\n        }\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32) internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\",\"keccak256\":\"0x713dcf03ea533f663e6591f0cfdd13594bb5a1f256b01f3850a6dd9264d1f1c2\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/NewBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\\\";\\n\\nimport \\\"./BalancerPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"./RecoveryMode.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\n/**\\n * @notice Reference implementation for the base layer of a Pool contract.\\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional\\n * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\\n *\\n * This Pool pays protocol fees by minting BPT directly to the ProtocolFeeCollector instead of using the\\n * `dueProtocolFees` return value. This results in the underlying tokens continuing to provide liquidity\\n * for traders, while still keeping gas usage to a minimum since only a single token (the BPT) is transferred.\\n *\\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\\n * `whenNotPaused` modifier.\\n *\\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\\n * and implement the swap callbacks themselves.\\n */\\nabstract contract NewBasePool is\\n    IBasePool,\\n    IGeneralPool,\\n    IMinimalSwapInfoPool,\\n    BasePoolAuthorization,\\n    BalancerPoolToken,\\n    TemporarilyPausable,\\n    RecoveryMode\\n{\\n    using BasePoolUserData for bytes;\\n\\n    uint256 private constant _DEFAULT_MINIMUM_BPT = 1e6;\\n\\n    bytes32 private immutable _poolId;\\n\\n    // Note that this value is immutable in the Vault, so we can make it immutable here and save gas\\n    IProtocolFeesCollector private immutable _protocolFeesCollector;\\n\\n    constructor(\\n        IVault vault,\\n        bytes32 poolId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner\\n    )\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\n        // if the selectors match, preventing accidental errors.\\n        Authentication(bytes32(uint256(msg.sender)))\\n        BalancerPoolToken(name, symbol, vault)\\n        BasePoolAuthorization(owner)\\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\\n        RecoveryMode(vault)\\n    {\\n        // Set immutable state variables - these cannot be read from during construction\\n        _poolId = poolId;\\n        _protocolFeesCollector = vault.getProtocolFeesCollector();\\n    }\\n\\n    // Getters\\n\\n    /**\\n     * @notice Return the pool id.\\n     */\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\n        // If the owner is delegated, then *all* permissioned functions, including `updateSwapFeeGradually`, will be\\n        // under Governance control.\\n        return getVault().getAuthorizer();\\n    }\\n\\n    /**\\n     * @dev Returns the minimum BPT supply. This amount is minted to the zero address during initialization, effectively\\n     * locking it.\\n     *\\n     * This is useful to make sure Pool initialization happens only once, but derived Pools can change this value (even\\n     * to zero) by overriding this function.\\n     */\\n    function _getMinimumBpt() internal pure virtual returns (uint256) {\\n        return _DEFAULT_MINIMUM_BPT;\\n    }\\n\\n    // Protocol Fees\\n\\n    /**\\n     * @notice Return the ProtocolFeesCollector contract.\\n     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)\\n     */\\n    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {\\n        return _protocolFeesCollector;\\n    }\\n\\n    /**\\n     * @dev Pays protocol fees by minting `bptAmount` to the Protocol Fee Collector.\\n     */\\n    function _payProtocolFees(uint256 bptAmount) internal {\\n        if (bptAmount > 0) {\\n            _mintPoolTokens(address(getProtocolFeesCollector()), bptAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pause the pool: an emergency action which disables all pool functions.\\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\\n     * deployment (see `TemporarilyPausable`).\\n     */\\n    function pause() external authenticate {\\n        _setPaused(true);\\n    }\\n\\n    /**\\n     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.\\n     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during\\n     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause\\n     * after the Buffer Period expires.\\n     */\\n    function unpause() external authenticate {\\n        _setPaused(false);\\n    }\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n\\n    // Swap / Join / Exit Hooks\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) external override onlyVault(request.poolId) returns (uint256) {\\n        _ensureNotPaused();\\n\\n        return _onSwapMinimal(request, balanceTokenIn, balanceTokenOut);\\n    }\\n\\n    function _onSwapMinimal(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) internal virtual returns (uint256);\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external override onlyVault(request.poolId) returns (uint256) {\\n        _ensureNotPaused();\\n\\n        return _onSwapGeneral(request, balances, indexIn, indexOut);\\n    }\\n\\n    function _onSwapGeneral(\\n        SwapRequest memory request,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Vault hook for adding liquidity to a pool (including the first time, \\\"initializing\\\" the pool).\\n     * @dev This function can only be called from the Vault, from `joinPool`.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFees) {\\n        uint256 bptAmountOut;\\n\\n        _ensureNotPaused();\\n        if (totalSupply() == 0) {\\n            (bptAmountOut, amountsIn) = _onInitializePool(sender, recipient, userData);\\n\\n            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a\\n            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\\n            // Pool from ever being fully drained.\\n            // Some pool types do not require this mechanism, and the minimum BPT might be zero.\\n            _require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);\\n            _mintPoolTokens(address(0), _getMinimumBpt());\\n\\n            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());\\n        } else {\\n            (bptAmountOut, amountsIn) = _onJoinPool(sender, balances, userData);\\n\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n        }\\n\\n        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n        dueProtocolFees = new uint256[](amountsIn.length);\\n    }\\n\\n    /**\\n     * @notice Vault hook for removing liquidity from a pool.\\n     * @dev This function can only be called from the Vault, from `exitPool`.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFees) {\\n        uint256 bptAmountIn;\\n\\n        // When a user calls `exitPool`, this is the first point of entry from the Vault.\\n        // We first check whether this is a Recovery Mode exit - if so, we proceed using this special lightweight exit\\n        // mechanism which avoids computing any complex values, interacting with external contracts, etc., and generally\\n        // should always work, even if the Pool's mathematics or a dependency break down.\\n        if (userData.isRecoveryModeExitKind()) {\\n            // This exit kind is only available in Recovery Mode.\\n            _ensureInRecoveryMode();\\n\\n            // Note that we don't upscale balances nor downscale amountsOut - we don't care about scaling factors during\\n            // a recovery mode exit.\\n            (bptAmountIn, amountsOut) = _doRecoveryModeExit(balances, totalSupply(), userData);\\n        } else {\\n            // Note that we only call this if we're not in a recovery mode exit.\\n            _ensureNotPaused();\\n\\n            (bptAmountIn, amountsOut) = _onExitPool(sender, balances, userData);\\n        }\\n\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n        dueProtocolFees = new uint256[](amountsOut.length);\\n    }\\n\\n    // Query functions\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onJoinPool`.\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryJoin(\\n        bytes32,\\n        address sender,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256,\\n        bytes memory userData\\n    ) external override returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        _queryAction(sender, balances, userData, _onJoinPool);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptOut, amountsIn);\\n    }\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onExitPool`.\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryExit(\\n        bytes32,\\n        address sender,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256,\\n        bytes memory userData\\n    ) external override returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        _queryAction(sender, balances, userData, _onExitPool);\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptIn, amountsOut);\\n    }\\n\\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\\n    // upscaled.\\n\\n    /**\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\n     *\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\n     *\\n     * Minted BPT will be sent to `recipient`, except for _getMinimumBpt(), which will be deducted from this amount and\\n     * sent to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP\\n     * from ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire\\n     * Pool's lifetime.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onInitializePool(\\n        address sender,\\n        address recipient,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        address sender,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        address sender,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountIn, uint256[] memory amountsOut);\\n\\n    function _queryAction(\\n        address sender,\\n        uint256[] memory balances,\\n        bytes memory userData,\\n        function(address, uint256[] memory, bytes memory) internal returns (uint256, uint256[] memory) _action\\n    ) private {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                    case 0 {\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                        // stored there as we take full control of the execution and then immediately return.\\n\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                        // there was another revert reason and we should forward it.\\n                        returndatacopy(0, 0, 0x04)\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                            returndatacopy(0, 0, returndatasize())\\n                            revert(0, returndatasize())\\n                        }\\n\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                        // representation of these.\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                        // returndata.\\n                        //\\n                        // In returndata:\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                        //\\n                        // We now need to return (ABI-encoded values):\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                        // Note that we skip the first 4 bytes for the error signature\\n                        returndatacopy(0, 0x04, 32)\\n\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                        // the initial 64 bytes.\\n                        mstore(0x20, 64)\\n\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                        // error signature.\\n                        return(0, add(returndatasize(), 28))\\n                    }\\n                    default {\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\n                        invalid()\\n                    }\\n            }\\n        } else {\\n            (uint256 bptAmount, uint256[] memory tokenAmounts) = _action(sender, balances, userData);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99ae78a995b23364e27066506c5003c24e34c96dbbb13592a7c57b931f9e7bf4\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\n\\nimport \\\"./BasePoolAuthorization.sol\\\";\\n\\n/**\\n * @notice Handle storage and state changes for pools that support \\\"Recovery Mode\\\".\\n *\\n * @dev This is intended to provide a safe way to exit any pool during some kind of emergency, to avoid locking funds\\n * in the event the pool enters a non-functional state (i.e., some code that normally runs during exits is causing\\n * them to revert).\\n *\\n * Recovery Mode is *not* the same as pausing the pool. The pause function is only available during a short window\\n * after factory deployment. Pausing can only be intentionally reversed during a buffer period, and the contract\\n * will permanently unpause itself thereafter. Paused pools are completely disabled, in a kind of suspended animation,\\n * until they are voluntarily or involuntarily unpaused.\\n *\\n * By contrast, a privileged account - typically a governance multisig - can place a pool in Recovery Mode at any\\n * time, and it is always reversible. The pool is *not* disabled while in this mode: though of course whatever\\n * condition prompted the transition to Recovery Mode has likely effectively disabled some functions. Rather,\\n * a special \\\"clean\\\" exit is enabled, which runs the absolute minimum code necessary to exit proportionally.\\n * In particular, stable pools do not attempt to compute the invariant (which is a complex, iterative calculation\\n * that can fail in extreme circumstances), and no protocol fees are collected.\\n *\\n * It is critical to ensure that turning on Recovery Mode would do no harm, if activated maliciously or in error.\\n */\\nabstract contract RecoveryMode is IRecoveryMode, BasePoolAuthorization {\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n\\n    IVault private immutable _vault;\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    modifier whenNotInRecoveryMode() {\\n        _ensureNotInRecoveryMode();\\n        _;\\n    }\\n\\n    constructor(IVault vault) {\\n        _vault = vault;\\n    }\\n\\n    /**\\n     * @notice Enable recovery mode, which enables a special safe exit path for LPs.\\n     * @dev Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may\\n     * perform certain operations in a \\\"safer\\\" manner that is less likely to fail, in an attempt to keep the pool\\n     * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window\\n     * after factory deployment, Recovery Mode can always be enabled.\\n     */\\n    function enableRecoveryMode() external override authenticate {\\n        // Unlike when recovery mode is disabled, derived contracts should *not* do anything when it is enabled.\\n        // We do not want to make any calls that could fail and prevent the pool from entering recovery mode.\\n        // Accordingly, this should have no effect, but for consistency with `disableRecoveryMode`, revert if\\n        // recovery mode was already enabled.\\n        _ensureNotInRecoveryMode();\\n\\n        _setRecoveryMode(true);\\n\\n        emit RecoveryModeStateChanged(true);\\n    }\\n\\n    /**\\n     * @notice Disable recovery mode, which disables the special safe exit path for LPs.\\n     * @dev Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly\\n     * necessary.\\n     */\\n    function disableRecoveryMode() external override authenticate {\\n        // Some derived contracts respond to disabling recovery mode with state changes (e.g., related to protocol fees,\\n        // or otherwise ensuring that enabling and disabling recovery mode has no ill effects on LPs). When called\\n        // outside of recovery mode, these state changes might lead to unexpected behavior.\\n        _ensureInRecoveryMode();\\n\\n        _setRecoveryMode(false);\\n\\n        emit RecoveryModeStateChanged(false);\\n    }\\n\\n    // Defer implementation for functions that require storage\\n\\n    /**\\n     * @notice Override to check storage and return whether the pool is in Recovery Mode\\n     */\\n    function inRecoveryMode() public view virtual override returns (bool);\\n\\n    /**\\n     * @dev Override to update storage and emit the event\\n     *\\n     * No complex code or external calls that could fail should be placed in the implementations,\\n     * which could jeopardize the ability to enable and disable Recovery Mode.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Reverts if the contract is not in Recovery Mode.\\n     */\\n    function _ensureInRecoveryMode() internal view {\\n        _require(inRecoveryMode(), Errors.NOT_IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    function _ensureNotInRecoveryMode() internal view {\\n        _require(!inRecoveryMode(), Errors.IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev A minimal proportional exit, suitable as is for most pools: though not for pools with preminted BPT\\n     * or other special considerations. Designed to be overridden if a pool needs to do extra processing,\\n     * such as scaling a stored invariant, or caching the new total supply.\\n     *\\n     * No complex code or external calls should be made in derived contracts that override this!\\n     */\\n    function _doRecoveryModeExit(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal virtual returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Keep a reference to the Vault, for use in reentrancy protection function calls that require it.\\n     */\\n    function _getVault() internal view returns (IVault) {\\n        return _vault;\\n    }\\n}\\n\",\"keccak256\":\"0x614be1c287eeee041691cccf080f232469b74999d31b84e1d1b43dcf823c9c9d\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\n\\nlibrary BasePoolMath {\\n    using FixedPoint for uint256;\\n\\n    function computeProportionalAmountsIn(\\n        uint256[] memory balances,\\n        uint256 bptTotalSupply,\\n        uint256 bptAmountOut\\n    ) internal pure returns (uint256[] memory amountsIn) {\\n        /************************************************************************************\\n        // computeProportionalAmountsIn                                                    //\\n        // (per token)                                                                     //\\n        // aI = amountIn                   /      bptOut      \\\\                            //\\n        // b = balance           aI = b * | ----------------- |                            //\\n        // bptOut = bptAmountOut           \\\\  bptTotalSupply  /                            //\\n        // bpt = bptTotalSupply                                                            //\\n        ************************************************************************************/\\n\\n        // Since we're computing amounts in, we round up overall. This means rounding up on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountOut.divUp(bptTotalSupply);\\n\\n        amountsIn = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsIn[i] = balances[i].mulUp(bptRatio);\\n        }\\n    }\\n\\n    function computeProportionalAmountsOut(\\n        uint256[] memory balances,\\n        uint256 bptTotalSupply,\\n        uint256 bptAmountIn\\n    ) internal pure returns (uint256[] memory amountsOut) {\\n        /**********************************************************************************************\\n        // computeProportionalAmountsOut                                                             //\\n        // (per token)                                                                               //\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\     bptTotalSupply    /                                 //\\n        // bpt = bptTotalSupply                                                                      //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(bptTotalSupply);\\n\\n        amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebc0d51433fadbef4eb148845c5a65b5a852fcfd157247c37d89588cec781a24\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/lib/PoolRegistrationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\n\\nlibrary PoolRegistrationLib {\\n    function registerPool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens\\n    ) internal returns (bytes32) {\\n        return registerPoolWithAssetManagers(vault, specialization, tokens, new address[](tokens.length));\\n    }\\n\\n    function registerPoolWithAssetManagers(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) internal returns (bytes32) {\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        //\\n        // Note that for Pools which can register and deregister tokens after deployment, this property may not hold\\n        // as tokens which are added to the Pool after deployment are always added to the end of the array.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        return _registerPool(vault, specialization, tokens, assetManagers);\\n    }\\n\\n    function registerComposablePool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) internal returns (bytes32) {\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        //\\n        // Note that for Pools which can register and deregister tokens after deployment, this property may not hold\\n        // as tokens which are added to the Pool after deployment are always added to the end of the array.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        IERC20[] memory composableTokens = new IERC20[](tokens.length + 1);\\n        // We insert the Pool's BPT address into the first position.\\n        // This allows us to know the position of the BPT token in the tokens array without explicitly tracking it.\\n        // When deregistering a token, the token at the end of the array is moved into the index of the deregistered\\n        // token, changing its index. By placing BPT at the beginning of the tokens array we can be sure that its index\\n        // will never change unless it is deregistered itself (something which composable pools must prevent anyway).\\n        composableTokens[0] = IERC20(address(this));\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            composableTokens[i + 1] = tokens[i];\\n        }\\n\\n        address[] memory composableAssetManagers = new address[](assetManagers.length + 1);\\n        // We do not allow an asset manager for the Pool's BPT.\\n        composableAssetManagers[0] = address(0);\\n        for (uint256 i = 0; i < assetManagers.length; i++) {\\n            composableAssetManagers[i + 1] = assetManagers[i];\\n        }\\n        return _registerPool(vault, specialization, composableTokens, composableAssetManagers);\\n    }\\n\\n    function _registerPool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) private returns (bytes32) {\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        // We don't need to check that tokens and assetManagers have the same length, since the Vault already performs\\n        // that check.\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n\\n        return poolId;\\n    }\\n\\n    function registerToken(\\n        IVault vault,\\n        bytes32 poolId,\\n        IERC20 token,\\n        address assetManager\\n    ) internal {\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = token;\\n\\n        address[] memory assetManagers = new address[](1);\\n        assetManagers[0] = assetManager;\\n\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n    }\\n\\n    function deregisterToken(\\n        IVault vault,\\n        bytes32 poolId,\\n        IERC20 token\\n    ) internal {\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = token;\\n\\n        vault.deregisterTokens(poolId, tokens);\\n    }\\n}\\n\",\"keccak256\":\"0xe727a596ce3c7bcea11ec17632fb432322f11abe5f8ec6d16596095768439bc0\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x1462b53900d425f1c7dcd53d928b6aa5d327cba8fa2bec27720603bb40d9be70\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\\\";\\n\\nimport \\\"../openzeppelin/EIP712.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\\n    // Replay attack prevention for each account.\\n    mapping(address => uint256) internal _nextNonce;\\n\\n    function getDomainSeparator() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function getNextNonce(address account) public view override returns (uint256) {\\n        return _nextNonce[account];\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 errorCode\\n    ) internal {\\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline,\\n        uint256 errorCode\\n    ) internal {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _require(_isValidSignature(account, digest, signature), errorCode);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\\n        // the observable state to still have the current nonce as the next valid one.\\n        _nextNonce[account] += 1;\\n    }\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual returns (bool) {\\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\\n        return (recoveredAddress != address(0) && recoveredAddress == account);\\n    }\\n\\n    function _toArraySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory signature = new bytes(65);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore8(add(signature, 96), v)\\n        }\\n\\n        return signature;\\n    }\\n}\\n\",\"keccak256\":\"0x01bbfbec787d72db3b84969a1e629d922bcab2116c84e27d596979457e778c74\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9f711fe78be500e514d52ab9d39319ab05019a82a70be8ca071d0c8a7e2cb4c\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\nimport \\\"../math/Math.sol\\\";\\nimport \\\"../openzeppelin/ERC20.sol\\\";\\nimport \\\"./InputHelpers.sol\\\";\\n\\n// solhint-disable\\n\\n// To simplify Pool logic, all token balances and amounts are normalized to behave as if the token had 18 decimals.\\n// e.g. When comparing DAI (18 decimals) and USDC (6 decimals), 1 USDC and 1 DAI would both be represented as 1e18,\\n// whereas without scaling 1 USDC would be represented as 1e6.\\n// This allows us to not consider differences in token decimals in the internal Pool maths, simplifying it greatly.\\n\\n// Single Value\\n\\n/**\\n * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n * scaling or not.\\n */\\nfunction _upscale(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\\n    // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\\n    // the same direction for all amounts, as the impact of this rounding is expected to be minimal.\\n    return FixedPoint.mulDown(amount, scalingFactor);\\n}\\n\\n/**\\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n * whether it needed scaling or not. The result is rounded down.\\n */\\nfunction _downscaleDown(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    return FixedPoint.divDown(amount, scalingFactor);\\n}\\n\\n/**\\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n * whether it needed scaling or not. The result is rounded up.\\n */\\nfunction _downscaleUp(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    return FixedPoint.divUp(amount, scalingFactor);\\n}\\n\\n// Array\\n\\n/**\\n * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\\n * the `amounts` array.\\n */\\nfunction _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\n/**\\n * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\\n * *mutates* the `amounts` array.\\n */\\nfunction _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\n/**\\n * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\\n * *mutates* the `amounts` array.\\n */\\nfunction _downscaleUpArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.divUp(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\nfunction _computeScalingFactor(IERC20 token) view returns (uint256) {\\n    // Tokens that don't implement the `decimals` method are not supported.\\n    uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n    // Tokens with more than 18 decimals are not supported.\\n    uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n    return FixedPoint.ONE * 10**decimalsDifference;\\n}\\n\",\"keccak256\":\"0x8fc4fd4afe5e736aaceb593e63440c196487af3b30d41a36494163d032c2f532\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\n\\n/**\\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\\n * used as an emergency switch in case a security vulnerability or threat is identified.\\n *\\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\\n * analysis later determines there was a false alarm.\\n *\\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\\n *\\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\\n * irreversible.\\n */\\nabstract contract TemporarilyPausable is ITemporarilyPausable {\\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\\n    // solhint-disable not-rely-on-time\\n\\n    uint256 private immutable _pauseWindowEndTime;\\n    uint256 private immutable _bufferPeriodEndTime;\\n\\n    bool private _paused;\\n\\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\n        _require(pauseWindowDuration <= PausableConstants.MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\\n        _require(\\n            bufferPeriodDuration <= PausableConstants.MAX_BUFFER_PERIOD_DURATION,\\n            Errors.MAX_BUFFER_PERIOD_DURATION\\n        );\\n\\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\\n\\n        _pauseWindowEndTime = pauseWindowEndTime;\\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    modifier whenNotPaused() {\\n        _ensureNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\\n     * Period.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        override\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        )\\n    {\\n        paused = !_isNotPaused();\\n        pauseWindowEndTime = _getPauseWindowEndTime();\\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\\n    }\\n\\n    /**\\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\\n     * unpaused until the end of the Buffer Period.\\n     *\\n     * Once the Buffer Period expires, this function reverts unconditionally.\\n     */\\n    function _setPaused(bool paused) internal {\\n        if (paused) {\\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\\n        } else {\\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\\n        }\\n\\n        _paused = paused;\\n        emit PausedStateChanged(paused);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    function _ensureNotPaused() internal view {\\n        _require(_isNotPaused(), Errors.PAUSED);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not paused.\\n     */\\n    function _ensurePaused() internal view {\\n        _require(!_isNotPaused(), Errors.NOT_PAUSED);\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is unpaused.\\n     *\\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\\n     * longer accessed.\\n     */\\n    function _isNotPaused() internal view returns (bool) {\\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\\n    }\\n\\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\\n\\n    function _getPauseWindowEndTime() private view returns (uint256) {\\n        return _pauseWindowEndTime;\\n    }\\n\\n    function _getBufferPeriodEndTime() private view returns (uint256) {\\n        return _bufferPeriodEndTime;\\n    }\\n}\\n\\n/**\\n * @dev Keep the maximum durations in a single place.\\n */\\nlibrary PausableConstants {\\n    uint256 public constant MAX_PAUSE_WINDOW_DURATION = 270 days;\\n    uint256 public constant MAX_BUFFER_PERIOD_DURATION = 90 days;\\n}\\n\",\"keccak256\":\"0x5931cd930a053c327257b9d246c583fe195b2ac5adffe3485e1be354b3ec298b\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n *\\n * We could use Solidity structs to pack values together in a single storage slot instead of relying on a custom and\\n * error-prone library, but unfortunately Solidity only allows for structs to live in either storage, calldata or\\n * memory. Because a memory struct uses not just memory but also a slot in the stack (to store its memory location),\\n * using memory for word-sized values (i.e. of 256 bits or less) is strictly less gas performant, and doesn't even\\n * prevent stack-too-deep issues. This is compounded by the fact that Balancer contracts typically are memory-intensive,\\n * and the cost of accesing memory increases quadratically with the number of allocated words. Manual packing and\\n * unpacking is therefore the preferred approach.\\n */\\nlibrary WordCodec {\\n    // solhint-disable no-inline-assembly\\n\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts an unsigned integer of bitLength, shifted by an offset, into a 256 bit word,\\n     * replacing the old value. Returns the new word.\\n     */\\n    function insertUint(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32 result) {\\n        _validateEncodingParams(value, offset, bitLength);\\n        // Equivalent to:\\n        // uint256 mask = (1 << bitLength) - 1;\\n        // bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        // result = clearedWord | bytes32(value << offset);\\n        assembly {\\n            let mask := sub(shl(bitLength, 1), 1)\\n            let clearedWord := and(word, not(shl(offset, mask)))\\n            result := or(clearedWord, shl(offset, value))\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts a signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using `bitLength` bits.\\n     */\\n    function insertInt(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Encoding\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. Ensures value fits within\\n     * `bitLength` bits.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        return bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a signed integer shifted by an offset.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns an unsigned integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeUint(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = uint256(word >> offset) & ((1 << bitLength) - 1);\\n        assembly {\\n            result := and(shr(offset, word), sub(shl(bitLength, 1), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a signed integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeInt(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (int256 result) {\\n        int256 maxInt = int256((1 << (bitLength - 1)) - 1);\\n        uint256 mask = (1 << bitLength) - 1;\\n\\n        int256 value = int256(uint256(word >> offset) & mask);\\n        // In case the decoded value is greater than the max positive integer that can be represented with bitLength\\n        // bits, we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        //\\n        // Equivalent to:\\n        // result = value > maxInt ? (value | int256(~mask)) : value;\\n        assembly {\\n            result := or(mul(gt(value, maxInt), not(mask)), value)\\n        }\\n    }\\n\\n    // Special cases\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool result) {\\n        // Equivalent to:\\n        // result = (uint256(word >> offset) & 1) == 1;\\n        assembly {\\n            result := and(shr(offset, word), 1)\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts a 192 bit value shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32 result) {\\n        // Equivalent to:\\n        // bytes32 clearedWord = bytes32(uint256(word) & ~(1 << offset));\\n        // bytes32 referenceInsertBool = clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n        assembly {\\n            let clearedWord := and(word, not(shl(offset, 1)))\\n            result := or(clearedWord, shl(offset, value))\\n        }\\n    }\\n\\n    // Helpers\\n\\n    function _validateEncodingParams(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing unsigned values for size is straightforward: their upper bits must be cleared.\\n        _require(value >> bitLength == 0, Errors.CODEC_OVERFLOW);\\n    }\\n\\n    function _validateEncodingParams(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing signed values for size is a bit more involved.\\n        if (value >= 0) {\\n            // For positive values, we can simply check that the upper bits are clear. Notice we remove one bit from the\\n            // length for the sign bit.\\n            _require(value >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        } else {\\n            // Negative values can receive the same treatment by making them positive, with the caveat that the range\\n            // for negative values in two's complement supports one more value than for the positive case.\\n            _require(Math.abs(value + 1) >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x815cb69dc384b4ee082f87c06efd93c4ac702a5f704152770e2b30010f3527f5\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    // solhint-disable no-inline-assembly\\n\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant TWO = 2 * ONE;\\n    uint256 internal constant FOUR = 4 * ONE;\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, if x == 0 then the result is zero\\n        //\\n        // Equivalent to:\\n        // result = product == 0 ? 0 : ((product - 1) / FixedPoint.ONE) + 1;\\n        assembly {\\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), ONE), 1))\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        uint256 aInflated = a * ONE;\\n        _require(a == 0 || aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n        return aInflated / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        uint256 aInflated = a * ONE;\\n        _require(a == 0 || aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, if x == 0 then the result is zero\\n        //\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : (a * FixedPoint.ONE - 1) / b + 1;\\n        assembly {\\n            result := mul(iszero(iszero(aInflated)), add(div(sub(aInflated, 1), b), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulDown(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulDown(x, x);\\n            return mulDown(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            if (raw < maxError) {\\n                return 0;\\n            } else {\\n                return sub(raw, maxError);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulUp(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulUp(x, x);\\n            return mulUp(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            return add(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (x < ONE) ? (ONE - x) : 0;\\n        assembly {\\n            result := mul(lt(x, ONE), sub(ONE, x))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596f4c9f0ac07a447dca74c20bffb5827dc2dc200b99181fc64d7ff6c89070a6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x >> 255 == 0, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x1ef044eb991d5278b9edfe159e3cd4824733d5ed8e6a9de3f4f57d6bf65be94d\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = a > 0 ? uint256(a) : uint256(-a)\\n        assembly {\\n            let s := sar(255, a)\\n            result := sub(xor(a, s), s)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (a < b) ? b : a;\\n        assembly {\\n            result := sub(a, mul(sub(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to `result = (a < b) ? a : b`\\n        assembly {\\n            result := sub(a, mul(sub(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : 1 + (a - 1) / b;\\n        assembly {\\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa4216e1e8089d1141ed73af197c4a390b6b4722c91821ad12dacd3cf81739f5\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    // solc-ignore-next-line func-mutability\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c02dcb47f57575355bd9dcbc5f7cb11d9a241b10592f8b3a1d67bb813bc07e1\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function\\n     *\\n     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Sets a new value for the total supply. It should only be set using this function.\\n     *\\n     * * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function _setTotalSupply(uint256 value) internal virtual {\\n        _totalSupply = value;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _setTotalSupply(totalSupply().add(amount));\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_BALANCE);\\n        _setTotalSupply(totalSupply().sub(amount));\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\",\"keccak256\":\"0x4c243366b8586a81a439c52e400fd74ef22ee55dc6569ee49beefc0651417163\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\\\";\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../helpers/EOASignaturesValidator.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EOASignaturesValidator {\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        bytes32 structHash = keccak256(\\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, getNextNonce(owner), deadline)\\n        );\\n\\n        _ensureValidSignature(owner, structHash, _toArraySignature(v, r, s), deadline, Errors.INVALID_SIGNATURE);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return getNextNonce(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return getDomainSeparator();\\n    }\\n}\\n\",\"keccak256\":\"0xbd474d9fb6f51b241ac85b659eabed4bac9a029f8565c64bc285edf04ef591cc\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x59848b5045422c5cf58841baea490766b848f84ec1bb5066e2ae9365e2a6d750\",\"license\":\"MIT\"},\"contracts/WeightedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\\n// should be fixed.\\n// solhint-disable private-vars-leading-underscore\\n\\nlibrary WeightedMath {\\n    using FixedPoint for uint256;\\n    // A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\\n    // implementation of the power function, as these ratios are often exponents.\\n    uint256 internal constant _MIN_WEIGHT = 0.01e18;\\n    // Having a minimum normalized weight imposes a limit on the maximum number of tokens;\\n    // i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\\n    uint256 internal constant _MAX_WEIGHTED_TOKENS = 100;\\n\\n    // Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\\n    // ratio).\\n\\n    // Swap limits: amounts swapped may not be larger than this percentage of total balance.\\n    uint256 internal constant _MAX_IN_RATIO = 0.3e18;\\n    uint256 internal constant _MAX_OUT_RATIO = 0.3e18;\\n\\n    // Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\\n    uint256 internal constant _MAX_INVARIANT_RATIO = 3e18;\\n    // Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\\n    uint256 internal constant _MIN_INVARIANT_RATIO = 0.7e18;\\n\\n    // About swap fees on joins and exits:\\n    // Any join or exit that is not perfectly balanced (e.g. all single token joins or exits) is mathematically\\n    // equivalent to a perfectly balanced join or exit followed by a series of swaps. Since these swaps would charge\\n    // swap fees, it follows that (some) joins and exits should as well.\\n    // On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\\n    // is the one to which swap fees are applied.\\n\\n    // Invariant is used to collect protocol swap fees by comparing its value between two times.\\n    // So we can round always to the same direction. It is also used to initiate the BPT amount\\n    // and, because there is a minimum BPT, we round down the invariant.\\n    function _calculateInvariant(uint256[] memory normalizedWeights, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256 invariant)\\n    {\\n        /**********************************************************************************************\\n        // invariant               _____                                                             //\\n        // wi = weight index i      | |      wi                                                      //\\n        // bi = balance index i     | |  bi ^   = i                                                  //\\n        // i = invariant                                                                             //\\n        **********************************************************************************************/\\n\\n        invariant = FixedPoint.ONE;\\n        for (uint256 i = 0; i < normalizedWeights.length; i++) {\\n            invariant = invariant.mulDown(balances[i].powDown(normalizedWeights[i]));\\n        }\\n\\n        _require(invariant > 0, Errors.ZERO_INVARIANT);\\n    }\\n\\n    // Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\\n    // current balances and weights.\\n    function _calcOutGivenIn(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountIn\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // outGivenIn                                                                                //\\n        // aO = amountOut                                                                            //\\n        // bO = balanceOut                                                                           //\\n        // bI = balanceIn              /      /            bI             \\\\    (wI / wO) \\\\           //\\n        // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\\n        // wI = weightIn               \\\\      \\\\       ( bI + aI )         /              /           //\\n        // wO = weightOut                                                                            //\\n        **********************************************************************************************/\\n\\n        // Amount out, so we round down overall.\\n\\n        // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\\n        // Because bI / (bI + aI) <= 1, the exponent rounds down.\\n\\n        // Cannot exceed maximum in ratio\\n        _require(amountIn <= balanceIn.mulDown(_MAX_IN_RATIO), Errors.MAX_IN_RATIO);\\n\\n        uint256 denominator = balanceIn.add(amountIn);\\n        uint256 base = balanceIn.divUp(denominator);\\n        uint256 exponent = weightIn.divDown(weightOut);\\n        uint256 power = base.powUp(exponent);\\n\\n        return balanceOut.mulDown(power.complement());\\n    }\\n\\n    // Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\\n    // current balances and weights.\\n    function _calcInGivenOut(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountOut\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // inGivenOut                                                                                //\\n        // aO = amountOut                                                                            //\\n        // bO = balanceOut                                                                           //\\n        // bI = balanceIn              /  /            bO             \\\\    (wO / wI)      \\\\          //\\n        // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\\n        // wI = weightIn               \\\\  \\\\       ( bO - aO )         /                   /          //\\n        // wO = weightOut                                                                            //\\n        **********************************************************************************************/\\n\\n        // Amount in, so we round up overall.\\n\\n        // The multiplication rounds up, and the power rounds up (so the base rounds up too).\\n        // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\\n\\n        // Cannot exceed maximum out ratio\\n        _require(amountOut <= balanceOut.mulDown(_MAX_OUT_RATIO), Errors.MAX_OUT_RATIO);\\n\\n        uint256 base = balanceOut.divUp(balanceOut.sub(amountOut));\\n        uint256 exponent = weightOut.divUp(weightIn);\\n        uint256 power = base.powUp(exponent);\\n\\n        // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\\n        // the following subtraction should never revert.\\n        uint256 ratio = power.sub(FixedPoint.ONE);\\n\\n        return balanceIn.mulUp(ratio);\\n    }\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT out, so we round down overall.\\n\\n        uint256[] memory balanceRatiosWithFee = new uint256[](amountsIn.length);\\n\\n        uint256 invariantRatioWithFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            balanceRatiosWithFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\n            invariantRatioWithFees = invariantRatioWithFees.add(balanceRatiosWithFee[i].mulDown(normalizedWeights[i]));\\n        }\\n\\n        uint256 invariantRatio = _computeJoinExactTokensInInvariantRatio(\\n            balances,\\n            normalizedWeights,\\n            amountsIn,\\n            balanceRatiosWithFee,\\n            invariantRatioWithFees,\\n            swapFeePercentage\\n        );\\n\\n        uint256 bptOut = (invariantRatio > FixedPoint.ONE)\\n            ? bptTotalSupply.mulDown(invariantRatio - FixedPoint.ONE)\\n            : 0;\\n        return bptOut;\\n    }\\n\\n    function _calcBptOutGivenExactTokenIn(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 amountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT out, so we round down overall.\\n\\n        uint256 amountInWithoutFee;\\n        {\\n            uint256 balanceRatioWithFee = balance.add(amountIn).divDown(balance);\\n\\n            // The use of `normalizedWeight.complement()` assumes that the sum of all weights equals FixedPoint.ONE.\\n            // This may not be the case when weights are stored in a denormalized format or during a gradual weight\\n            // change due rounding errors during normalization or interpolation. This will result in a small difference\\n            // between the output of this function and the equivalent `_calcBptOutGivenExactTokensIn` call.\\n            uint256 invariantRatioWithFees = balanceRatioWithFee.mulDown(normalizedWeight).add(\\n                normalizedWeight.complement()\\n            );\\n\\n            if (balanceRatioWithFee > invariantRatioWithFees) {\\n                uint256 nonTaxableAmount = invariantRatioWithFees > FixedPoint.ONE\\n                    ? balance.mulDown(invariantRatioWithFees - FixedPoint.ONE)\\n                    : 0;\\n                uint256 taxableAmount = amountIn.sub(nonTaxableAmount);\\n                uint256 swapFee = taxableAmount.mulUp(swapFeePercentage);\\n\\n                amountInWithoutFee = nonTaxableAmount.add(taxableAmount.sub(swapFee));\\n            } else {\\n                amountInWithoutFee = amountIn;\\n                // If a token's amount in is not being charged a swap fee then it might be zero.\\n                // In this case, it's clear that the sender should receive no BPT.\\n                if (amountInWithoutFee == 0) {\\n                    return 0;\\n                }\\n            }\\n        }\\n\\n        uint256 balanceRatio = balance.add(amountInWithoutFee).divDown(balance);\\n\\n        uint256 invariantRatio = balanceRatio.powDown(normalizedWeight);\\n\\n        uint256 bptOut = (invariantRatio > FixedPoint.ONE)\\n            ? bptTotalSupply.mulDown(invariantRatio - FixedPoint.ONE)\\n            : 0;\\n        return bptOut;\\n    }\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep errors.\\n     */\\n    function _computeJoinExactTokensInInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256[] memory balanceRatiosWithFee,\\n        uint256 invariantRatioWithFees,\\n        uint256 swapFeePercentage\\n    ) private pure returns (uint256 invariantRatio) {\\n        // Swap fees are charged on all tokens that are being added in a larger proportion than the overall invariant\\n        // increase.\\n        invariantRatio = FixedPoint.ONE;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 amountInWithoutFee;\\n\\n            if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\\n                // invariantRatioWithFees might be less than FixedPoint.ONE in edge scenarios due to rounding error,\\n                // particularly if the weights don't exactly add up to 100%.\\n                uint256 nonTaxableAmount = invariantRatioWithFees > FixedPoint.ONE\\n                    ? balances[i].mulDown(invariantRatioWithFees - FixedPoint.ONE)\\n                    : 0;\\n                uint256 swapFee = amountsIn[i].sub(nonTaxableAmount).mulUp(swapFeePercentage);\\n                amountInWithoutFee = amountsIn[i].sub(swapFee);\\n            } else {\\n                amountInWithoutFee = amountsIn[i];\\n\\n                // If a token's amount in is not being charged a swap fee then it might be zero (e.g. when joining a\\n                // Pool with only a subset of tokens). In this case, `balanceRatio` will equal `FixedPoint.ONE`, and\\n                // the `invariantRatio` will not change at all. We therefore skip to the next iteration, avoiding\\n                // the costly `powDown` call.\\n                if (amountInWithoutFee == 0) {\\n                    continue;\\n                }\\n            }\\n\\n            uint256 balanceRatio = balances[i].add(amountInWithoutFee).divDown(balances[i]);\\n\\n            invariantRatio = invariantRatio.mulDown(balanceRatio.powDown(normalizedWeights[i]));\\n        }\\n    }\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        /******************************************************************************************\\n        // tokenInForExactBPTOut                                                                 //\\n        // a = amountIn                                                                          //\\n        // b = balance                      /  /    totalBPT + bptOut      \\\\    (1 / w)       \\\\  //\\n        // bptOut = bptAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\\n        // bpt = totalBPT                   \\\\  \\\\       totalBPT            /                  /  //\\n        // w = weight                                                                            //\\n        ******************************************************************************************/\\n\\n        // Token in, so we round up overall.\\n\\n        // Calculate the factor by which the invariant will increase after minting BPTAmountOut\\n        uint256 invariantRatio = bptTotalSupply.add(bptAmountOut).divUp(bptTotalSupply);\\n        _require(invariantRatio <= _MAX_INVARIANT_RATIO, Errors.MAX_OUT_BPT_FOR_TOKEN_IN);\\n\\n        // Calculate by how much the token balance has to increase to match the invariantRatio\\n        uint256 balanceRatio = invariantRatio.powUp(FixedPoint.ONE.divUp(normalizedWeight));\\n\\n        uint256 amountInWithoutFee = balance.mulUp(balanceRatio.sub(FixedPoint.ONE));\\n\\n        // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\\n        // accordingly.\\n        uint256 taxableAmount = amountInWithoutFee.mulUp(normalizedWeight.complement());\\n        uint256 nonTaxableAmount = amountInWithoutFee.sub(taxableAmount);\\n\\n        uint256 taxableAmountPlusFees = taxableAmount.divUp(swapFeePercentage.complement());\\n\\n        return nonTaxableAmount.add(taxableAmountPlusFees);\\n    }\\n\\n    function _calcBptInGivenExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT in, so we round up overall.\\n\\n        uint256[] memory balanceRatiosWithoutFee = new uint256[](amountsOut.length);\\n        uint256 invariantRatioWithoutFees = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            balanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);\\n            invariantRatioWithoutFees = invariantRatioWithoutFees.add(\\n                balanceRatiosWithoutFee[i].mulUp(normalizedWeights[i])\\n            );\\n        }\\n\\n        uint256 invariantRatio = _computeExitExactTokensOutInvariantRatio(\\n            balances,\\n            normalizedWeights,\\n            amountsOut,\\n            balanceRatiosWithoutFee,\\n            invariantRatioWithoutFees,\\n            swapFeePercentage\\n        );\\n\\n        return bptTotalSupply.mulUp(invariantRatio.complement());\\n    }\\n\\n    function _calcBptInGivenExactTokenOut(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 amountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        // BPT in, so we round up overall.\\n\\n        uint256 balanceRatioWithoutFee = balance.sub(amountOut).divUp(balance);\\n\\n        uint256 invariantRatioWithoutFees = balanceRatioWithoutFee.mulUp(normalizedWeight).add(\\n            normalizedWeight.complement()\\n        );\\n\\n        uint256 amountOutWithFee;\\n        if (invariantRatioWithoutFees > balanceRatioWithoutFee) {\\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\\n            // 'token out'. This results in slightly larger price impact.\\n\\n            uint256 nonTaxableAmount = balance.mulDown(invariantRatioWithoutFees.complement());\\n            uint256 taxableAmount = amountOut.sub(nonTaxableAmount);\\n            uint256 taxableAmountPlusFees = taxableAmount.divUp(swapFeePercentage.complement());\\n\\n            amountOutWithFee = nonTaxableAmount.add(taxableAmountPlusFees);\\n        } else {\\n            amountOutWithFee = amountOut;\\n            // If a token's amount out is not being charged a swap fee then it might be zero.\\n            // In this case, it's clear that the sender should not send any BPT.\\n            if (amountOutWithFee == 0) {\\n                return 0;\\n            }\\n        }\\n\\n        uint256 balanceRatio = balance.sub(amountOutWithFee).divDown(balance);\\n\\n        uint256 invariantRatio = balanceRatio.powDown(normalizedWeight);\\n\\n        return bptTotalSupply.mulUp(invariantRatio.complement());\\n    }\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep errors.\\n     */\\n    function _computeExitExactTokensOutInvariantRatio(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256[] memory balanceRatiosWithoutFee,\\n        uint256 invariantRatioWithoutFees,\\n        uint256 swapFeePercentage\\n    ) private pure returns (uint256 invariantRatio) {\\n        invariantRatio = FixedPoint.ONE;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\\n            // 'token out'. This results in slightly larger price impact.\\n\\n            uint256 amountOutWithFee;\\n            if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {\\n                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithoutFees.complement());\\n                uint256 taxableAmount = amountsOut[i].sub(nonTaxableAmount);\\n                uint256 taxableAmountPlusFees = taxableAmount.divUp(swapFeePercentage.complement());\\n\\n                amountOutWithFee = nonTaxableAmount.add(taxableAmountPlusFees);\\n            } else {\\n                amountOutWithFee = amountsOut[i];\\n                // If a token's amount out is not being charged a swap fee then it might be zero (e.g. when exiting a\\n                // Pool with only a subset of tokens). In this case, `balanceRatio` will equal `FixedPoint.ONE`, and\\n                // the `invariantRatio` will not change at all. We therefore skip to the next iteration, avoiding\\n                // the costly `powDown` call.\\n                if (amountOutWithFee == 0) {\\n                    continue;\\n                }\\n            }\\n\\n            uint256 balanceRatio = balances[i].sub(amountOutWithFee).divDown(balances[i]);\\n\\n            invariantRatio = invariantRatio.mulDown(balanceRatio.powDown(normalizedWeights[i]));\\n        }\\n    }\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        /*****************************************************************************************\\n        // exactBPTInForTokenOut                                                                //\\n        // a = amountOut                                                                        //\\n        // b = balance                     /      /    totalBPT - bptIn       \\\\    (1 / w)  \\\\   //\\n        // bptIn = bptAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\\n        // bpt = totalBPT                  \\\\      \\\\       totalBPT            /             /   //\\n        // w = weight                                                                           //\\n        *****************************************************************************************/\\n\\n        // Token out, so we round down overall. The multiplication rounds down, but the power rounds up (so the base\\n        // rounds up). Because (totalBPT - bptIn) / totalBPT <= 1, the exponent rounds down.\\n\\n        // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\\n        uint256 invariantRatio = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply);\\n        _require(invariantRatio >= _MIN_INVARIANT_RATIO, Errors.MIN_BPT_IN_FOR_TOKEN_OUT);\\n\\n        // Calculate by how much the token balance has to decrease to match invariantRatio\\n        uint256 balanceRatio = invariantRatio.powUp(FixedPoint.ONE.divDown(normalizedWeight));\\n\\n        // Because of rounding up, balanceRatio can be greater than one. Using complement prevents reverts.\\n        uint256 amountOutWithoutFee = balance.mulDown(balanceRatio.complement());\\n\\n        // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\\n        // in swap fees.\\n\\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\\n        // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\\n        uint256 taxableAmount = amountOutWithoutFee.mulUp(normalizedWeight.complement());\\n        uint256 nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\\n        uint256 taxableAmountMinusFees = taxableAmount.mulUp(swapFeePercentage.complement());\\n\\n        return nonTaxableAmount.add(taxableAmountMinusFees);\\n    }\\n\\n    /**\\n     * @dev Calculate the amount of BPT which should be minted when adding a new token to the Pool.\\n     *\\n     * Note that normalizedWeight is set that it corresponds to the desired weight of this token *after* adding it.\\n     * i.e. For a two token 50:50 pool which we want to turn into a 33:33:33 pool, we use a normalized weight of 33%\\n     * @param totalSupply - the total supply of the Pool's BPT.\\n     * @param normalizedWeight - the normalized weight of the token to be added (normalized relative to final weights)\\n     */\\n    function _calcBptOutAddToken(uint256 totalSupply, uint256 normalizedWeight) internal pure returns (uint256) {\\n        // The amount of BPT which is equivalent to the token being added may be calculated by the growth in the\\n        // sum of the token weights, i.e. if we add a token which will make up 50% of the pool then we should receive\\n        // 50% of the new supply of BPT.\\n        //\\n        // The growth in the total weight of the pool can be easily calculated by:\\n        //\\n        // weightSumRatio = totalWeight / (totalWeight - newTokenWeight)\\n        //\\n        // As we're working with normalized weights `totalWeight` is equal to 1.\\n\\n        uint256 weightSumRatio = FixedPoint.ONE.divDown(FixedPoint.ONE.sub(normalizedWeight));\\n\\n        // The amount of BPT to mint is then simply:\\n        //\\n        // toMint = totalSupply * (weightSumRatio - 1)\\n\\n        return totalSupply.mulDown(weightSumRatio.sub(FixedPoint.ONE));\\n    }\\n}\\n\",\"keccak256\":\"0x48b9c87627ec5ec5e5d337e4826b6a8ef83961c576ab991c8fef1a9675d78f7e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lbp/LiquidityBootstrappingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport '@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol';\\n\\nimport '@balancer-labs/v2-solidity-utils/contracts/math/Math.sol';\\nimport '@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol';\\n\\nimport '@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol';\\nimport '@balancer-labs/v2-pool-utils/contracts/lib/PoolRegistrationLib.sol';\\n\\nimport '../WeightedMath.sol';\\nimport '../lib/WeightedExitsLib.sol';\\nimport '../lib/WeightedJoinsLib.sol';\\n\\nimport './LiquidityBootstrappingPoolSettings.sol';\\nimport './LiquidityBootstrappingPoolStorageLib.sol';\\n\\n/**\\n * @dev Weighted Pool with mutable weights, designed to support V2 Liquidity Bootstrapping.\\n */\\ncontract LiquidityBootstrappingPool is LiquidityBootstrappingPoolSettings {\\n    // LiquidityBootstrappingPool change their weights over time: these periods are expected to be long enough (e.g.\\n    // days) that any timestamp manipulation would achieve very little.\\n    // solhint-disable not-rely-on-time\\n\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n    using WeightedPoolUserData for bytes;\\n\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory normalizedWeights,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner,\\n        bool swapEnabledOnStart\\n    )\\n        LiquidityBootstrappingPoolSettings(\\n            vault,\\n            PoolRegistrationLib.registerPool(\\n                vault,\\n                tokens.length == 2\\n                    ? IVault.PoolSpecialization.TWO_TOKEN\\n                    : IVault.PoolSpecialization.MINIMAL_SWAP_INFO,\\n                tokens\\n            ),\\n            name,\\n            symbol,\\n            tokens,\\n            normalizedWeights,\\n            swapFeePercentage,\\n            pauseWindowDuration,\\n            bufferPeriodDuration,\\n            owner,\\n            swapEnabledOnStart\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Swap Hooks\\n\\n    function _onSwapGeneral(\\n        SwapRequest memory,\\n        uint256[] memory,\\n        uint256,\\n        uint256\\n    ) internal virtual override returns (uint256) {\\n        _revert(Errors.UNIMPLEMENTED);\\n    }\\n\\n    function _onSwapMinimal(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) internal virtual override returns (uint256) {\\n        uint256 weightTokenIn;\\n        uint256 weightTokenOut;\\n        {\\n            bytes32 poolState = _getPoolState();\\n            _require(\\n                LiquidityBootstrappingPoolStorageLib.getSwapEnabled(poolState),\\n                Errors.SWAPS_DISABLED\\n            );\\n\\n            uint256 pctProgress = LiquidityBootstrappingPoolStorageLib\\n                .getWeightChangeProgress(poolState);\\n\\n            weightTokenIn = LiquidityBootstrappingPoolStorageLib\\n                .getNormalizedWeightByIndex(\\n                    poolState,\\n                    _getTokenIndex(request.tokenIn),\\n                    pctProgress\\n                );\\n            weightTokenOut = LiquidityBootstrappingPoolStorageLib\\n                .getNormalizedWeightByIndex(\\n                    poolState,\\n                    _getTokenIndex(request.tokenOut),\\n                    pctProgress\\n                );\\n        }\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(request.tokenIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(request.tokenOut);\\n\\n        balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n        balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\n            // This returns amount - fee amount, so we round up (favoring a higher fee amount).\\n            request.amount = request.amount.mulDown(getSwapFeePercentage());\\n\\n            // All token amounts are upscaled.\\n            request.amount = _upscale(request.amount, scalingFactorTokenIn);\\n\\n            uint256 amountOut = WeightedMath._calcOutGivenIn(\\n                balanceTokenIn,\\n                weightTokenIn,\\n                balanceTokenOut,\\n                weightTokenOut,\\n                request.amount\\n            );\\n\\n            // amountOut tokens are exiting the Pool, so we round down.\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            // All token amounts are upscaled.\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n\\n            uint256 amountIn = WeightedMath._calcInGivenOut(\\n                balanceTokenIn,\\n                weightTokenIn,\\n                balanceTokenOut,\\n                weightTokenOut,\\n                request.amount\\n            );\\n\\n            // amountIn tokens are entering the Pool, so we round up.\\n            amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\\n\\n            // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\n            // This returns amount + fee amount, so we round up (favoring a higher fee amount).\\n            return amountIn.divUp(getSwapFeePercentage().complement());\\n        }\\n    }\\n\\n    // Initialize hook\\n\\n    function _onInitializePool(\\n        address sender,\\n        address,\\n        bytes memory userData\\n    ) internal view override returns (uint256, uint256[] memory) {\\n        // Only the owner can initialize the pool\\n        _require(sender == getOwner(), Errors.CALLER_IS_NOT_LBP_OWNER);\\n\\n        WeightedPoolUserData.JoinKind kind = userData.joinKind();\\n        _require(\\n            kind == WeightedPoolUserData.JoinKind.INIT,\\n            Errors.UNINITIALIZED\\n        );\\n\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\n        uint256[] memory scalingFactors = getScalingFactors();\\n\\n        InputHelpers.ensureInputLengthMatch(\\n            amountsIn.length,\\n            scalingFactors.length\\n        );\\n        _upscaleArray(amountsIn, scalingFactors);\\n\\n        uint256[] memory normalizedWeights = _getNormalizedWeights();\\n        uint256 invariantAfterJoin = WeightedMath._calculateInvariant(\\n            normalizedWeights,\\n            amountsIn\\n        );\\n\\n        // Set the initial BPT to the value of the invariant times the number of tokens. This makes the BPT supply\\n        // more consistent in Pools with similar token composition, but a different number of tokens.\\n        uint256 bptAmountOut = Math.mul(invariantAfterJoin, amountsIn.length);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Join hook\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        address sender,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal view override returns (uint256, uint256[] memory) {\\n        // Only the owner can add liquidity; block public LPs\\n        _require(sender == getOwner(), Errors.CALLER_IS_NOT_LBP_OWNER);\\n\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(\\n            sender,\\n            balances,\\n            _getNormalizedWeights(),\\n            getScalingFactors(),\\n            totalSupply(),\\n            userData\\n        );\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    /**\\n     * @dev Dispatch code which decodes the provided userdata to perform the specified join type.\\n     * Inheriting contracts may override this function to add additional join types or extra conditions to allow\\n     * or disallow joins under certain circumstances.\\n     */\\n    function _doJoin(\\n        address,\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal view returns (uint256, uint256[] memory) {\\n        WeightedPoolUserData.JoinKind kind = userData.joinKind();\\n\\n        if (kind == WeightedPoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return\\n                WeightedJoinsLib.joinExactTokensInForBPTOut(\\n                    balances,\\n                    normalizedWeights,\\n                    scalingFactors,\\n                    totalSupply,\\n                    getSwapFeePercentage(),\\n                    userData\\n                );\\n        } else if (\\n            kind == WeightedPoolUserData.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT\\n        ) {\\n            return\\n                WeightedJoinsLib.joinTokenInForExactBPTOut(\\n                    balances,\\n                    normalizedWeights,\\n                    totalSupply,\\n                    getSwapFeePercentage(),\\n                    userData\\n                );\\n        } else if (\\n            kind ==\\n            WeightedPoolUserData.JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n        ) {\\n            return\\n                WeightedJoinsLib.joinAllTokensInForExactBPTOut(\\n                    balances,\\n                    totalSupply,\\n                    userData\\n                );\\n        } else {\\n            _revert(Errors.UNHANDLED_JOIN_KIND);\\n        }\\n    }\\n\\n    // Exit hook\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        address sender,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal view override returns (uint256, uint256[] memory) {\\n        return\\n            _doExit(\\n                sender,\\n                balances,\\n                _getNormalizedWeights(),\\n                getScalingFactors(),\\n                totalSupply(),\\n                userData\\n            );\\n    }\\n\\n    /**\\n     * @dev Dispatch code which decodes the provided userdata to perform the specified exit type.\\n     * Inheriting contracts may override this function to add additional exit types or extra conditions to allow\\n     * or disallow exit under certain circumstances.\\n     */\\n    function _doExit(\\n        address,\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal view returns (uint256, uint256[] memory) {\\n        WeightedPoolUserData.ExitKind kind = userData.exitKind();\\n\\n        if (\\n            kind == WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT\\n        ) {\\n            return\\n                WeightedExitsLib.exitExactBPTInForTokenOut(\\n                    balances,\\n                    normalizedWeights,\\n                    totalSupply,\\n                    getSwapFeePercentage(),\\n                    userData\\n                );\\n        } else if (\\n            kind == WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT\\n        ) {\\n            return\\n                WeightedExitsLib.exitExactBPTInForTokensOut(\\n                    balances,\\n                    totalSupply,\\n                    userData\\n                );\\n        } else if (\\n            kind == WeightedPoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT\\n        ) {\\n            return\\n                WeightedExitsLib.exitBPTInForExactTokensOut(\\n                    balances,\\n                    normalizedWeights,\\n                    scalingFactors,\\n                    totalSupply,\\n                    getSwapFeePercentage(),\\n                    userData\\n                );\\n        } else {\\n            _revert(Errors.UNHANDLED_EXIT_KIND);\\n        }\\n    }\\n\\n    // Recovery Mode\\n\\n    function _doRecoveryModeExit(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    )\\n        internal\\n        pure\\n        override\\n        returns (uint256 bptAmountIn, uint256[] memory amountsOut)\\n    {\\n        bptAmountIn = userData.recoveryModeExit();\\n        amountsOut = BasePoolMath.computeProportionalAmountsOut(\\n            balances,\\n            totalSupply,\\n            bptAmountIn\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4016b75507b7c2b319dac9b107c58b189f74d0f780c225316aabc18b2a195f82\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lbp/LiquidityBootstrappingPoolSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/NewBasePool.sol\\\";\\n\\nimport \\\"../lib/GradualValueChange.sol\\\";\\nimport \\\"../WeightedMath.sol\\\";\\n\\nimport \\\"./LiquidityBootstrappingPoolStorageLib.sol\\\";\\n\\n/**\\n * @dev Weighted Pool with mutable weights, designed to support V2 Liquidity Bootstrapping.\\n */\\nabstract contract LiquidityBootstrappingPoolSettings is IMinimalSwapInfoPool, NewBasePool {\\n    // LiquidityBootstrappingPools change their weights over time: these periods are expected to be long enough (e.g.\\n    // days) that any timestamp manipulation would achieve very little.\\n    // solhint-disable not-rely-on-time\\n\\n    using FixedPoint for uint256;\\n\\n    // LBPs often involve only two tokens - we support up to four since we're able to pack the entire config in a single\\n    // storage slot.\\n    uint256 private constant _MIN_TOKENS = 2;\\n    uint256 private constant _MAX_LBP_TOKENS = 4;\\n\\n    // 1e18 corresponds to 1.0, or a 100% fee\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10%\\n\\n    uint256 private immutable _totalTokens;\\n\\n    uint256 private _swapFeePercentage;\\n\\n    IERC20 internal immutable _token0;\\n    IERC20 internal immutable _token1;\\n    IERC20 internal immutable _token2;\\n    IERC20 internal immutable _token3;\\n\\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\\n\\n    uint256 internal immutable _scalingFactor0;\\n    uint256 internal immutable _scalingFactor1;\\n    uint256 internal immutable _scalingFactor2;\\n    uint256 internal immutable _scalingFactor3;\\n\\n    // For gas optimization, store start/end weights and timestamps in one bytes32\\n    // Start weights need to be high precision, since restarting the update resets them to \\\"spot\\\"\\n    // values. Target end weights do not need as much precision.\\n    // [     32 bits   |     32 bits     |      64 bits     |      124 bits      |  2 bits  |  1 bit   |     1 bit    ]\\n    // [ end timestamp | start timestamp | 4x16 end weights | 4x31 start weights | not used | recovery | swap enabled ]\\n    // |MSB                                                                                                        LSB|\\n\\n    bytes32 private _poolState;\\n\\n    // Offsets for data elements in _poolState\\n    uint256 private constant _SWAP_ENABLED_OFFSET = 0;\\n    uint256 private constant _RECOVERY_MODE_BIT_OFFSET = 1;\\n    uint256 private constant _START_WEIGHT_OFFSET = _RECOVERY_MODE_BIT_OFFSET + 3;\\n    uint256 private constant _END_WEIGHT_OFFSET = _START_WEIGHT_OFFSET + _MAX_LBP_TOKENS * _START_WEIGHT_BIT_LENGTH;\\n    uint256 private constant _START_TIME_OFFSET = _END_WEIGHT_OFFSET + _MAX_LBP_TOKENS * _END_WEIGHT_BIT_LENGTH;\\n    uint256 private constant _END_TIME_OFFSET = _START_TIME_OFFSET + _TIMESTAMP_BIT_LENGTH;\\n\\n    uint256 private constant _START_WEIGHT_BIT_LENGTH = 31;\\n    uint256 private constant _END_WEIGHT_BIT_LENGTH = 16;\\n    uint256 private constant _TIMESTAMP_BIT_LENGTH = 32;\\n\\n    // Event declarations\\n\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n    event SwapEnabledSet(bool swapEnabled);\\n    event GradualWeightUpdateScheduled(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] startWeights,\\n        uint256[] endWeights\\n    );\\n\\n    constructor(\\n        IVault vault,\\n        bytes32 poolId,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory normalizedWeights,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner,\\n        bool swapEnabledOnStart\\n    ) NewBasePool(vault, poolId, name, symbol, pauseWindowDuration, bufferPeriodDuration, owner) {\\n        uint256 totalTokens = tokens.length;\\n        InputHelpers.ensureInputLengthMatch(totalTokens, normalizedWeights.length);\\n        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\\n        _require(tokens.length <= _MAX_LBP_TOKENS, Errors.MAX_TOKENS);\\n\\n        _totalTokens = totalTokens;\\n\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\n        _token0 = tokens[0];\\n        _token1 = tokens[1];\\n        _token2 = totalTokens > 2 ? tokens[2] : IERC20(0);\\n        _token3 = totalTokens > 3 ? tokens[3] : IERC20(0);\\n\\n        _scalingFactor0 = _computeScalingFactor(tokens[0]);\\n        _scalingFactor1 = _computeScalingFactor(tokens[1]);\\n        _scalingFactor2 = totalTokens > 2 ? _computeScalingFactor(tokens[2]) : 0;\\n        _scalingFactor3 = totalTokens > 3 ? _computeScalingFactor(tokens[3]) : 0;\\n\\n        uint256 currentTime = block.timestamp;\\n\\n        _startGradualWeightChange(currentTime, currentTime, normalizedWeights, normalizedWeights);\\n\\n        _setSwapFeePercentage(swapFeePercentage);\\n\\n        // If false, the pool will start in the disabled state (prevents front-running the enable swaps transaction)\\n        _setSwapEnabled(swapEnabledOnStart);\\n    }\\n\\n    function _getPoolState() internal view returns (bytes32) {\\n        return _poolState;\\n    }\\n\\n    function _getTotalTokens() internal view returns (uint256) {\\n        return _totalTokens;\\n    }\\n\\n    function _getTokenIndex(IERC20 token) internal view returns (uint256) {\\n        if (token == _token0) return 0;\\n        else if (token == _token1) return 1;\\n        else if (token == _token2) return 2;\\n        else if (token == _token3) return 3;\\n        else _revert(Errors.INVALID_TOKEN);\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Return whether swaps are enabled or not for the given pool.\\n     */\\n    function getSwapEnabled() external view returns (bool) {\\n        return LiquidityBootstrappingPoolStorageLib.getSwapEnabled(_poolState);\\n    }\\n\\n    /**\\n     * @notice Return the current value of the swap fee percentage.\\n     * @dev This is stored separately, as there is no more room in `_poolState`.\\n     */\\n    function getSwapFeePercentage() public view virtual override returns (uint256) {\\n        return _swapFeePercentage;\\n    }\\n\\n    /**\\n     * @notice Return the current token weights.\\n     */\\n    function getNormalizedWeights() external view returns (uint256[] memory) {\\n        return _getNormalizedWeights();\\n    }\\n\\n    /**\\n     * @dev Return start time, end time, and endWeights as an array.\\n     * Current weights should be retrieved via `getNormalizedWeights()`.\\n     */\\n    function getGradualWeightUpdateParams()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256[] memory endWeights\\n        )\\n    {\\n        (startTime, endTime, , endWeights) = LiquidityBootstrappingPoolStorageLib.getGradualWeightUpdateParams(\\n            _poolState,\\n            _getTotalTokens()\\n        );\\n    }\\n\\n    /**\\n     * @notice Pause/unpause trading.\\n     */\\n    function setSwapEnabled(bool swapEnabled) external authenticate whenNotPaused {\\n        _setSwapEnabled(swapEnabled);\\n    }\\n\\n    /**\\n     * @notice Schedule a gradual weight change.\\n     * @dev Weights will change from the current weights to the given endWeights, over startTime to endTime.\\n     */\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory endWeights\\n    ) external authenticate whenNotPaused {\\n        InputHelpers.ensureInputLengthMatch(_getTotalTokens(), endWeights.length);\\n\\n        startTime = GradualValueChange.resolveStartTime(startTime, endTime);\\n        _startGradualWeightChange(startTime, endTime, _getNormalizedWeights(), endWeights);\\n    }\\n\\n    // Internal functions\\n\\n    function _getNormalizedWeights() internal view returns (uint256[] memory) {\\n        uint256 totalTokens = _getTotalTokens();\\n        uint256[] memory normalizedWeights = new uint256[](totalTokens);\\n\\n        bytes32 poolState = _poolState;\\n\\n        uint256 pctProgress = LiquidityBootstrappingPoolStorageLib.getWeightChangeProgress(poolState);\\n\\n        normalizedWeights[0] = LiquidityBootstrappingPoolStorageLib.getNormalizedWeightByIndex(\\n            poolState,\\n            0,\\n            pctProgress\\n        );\\n        normalizedWeights[1] = LiquidityBootstrappingPoolStorageLib.getNormalizedWeightByIndex(\\n            poolState,\\n            1,\\n            pctProgress\\n        );\\n        if (totalTokens == 2) return normalizedWeights;\\n        normalizedWeights[2] = LiquidityBootstrappingPoolStorageLib.getNormalizedWeightByIndex(\\n            poolState,\\n            2,\\n            pctProgress\\n        );\\n        if (totalTokens == 3) return normalizedWeights;\\n        normalizedWeights[3] = LiquidityBootstrappingPoolStorageLib.getNormalizedWeightByIndex(\\n            poolState,\\n            3,\\n            pctProgress\\n        );\\n\\n        return normalizedWeights;\\n    }\\n\\n    // Swap Fees\\n\\n    /**\\n     * @notice Set the swap fee percentage.\\n     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the\\n     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.\\n     */\\n    function setSwapFeePercentage(uint256 swapFeePercentage) public virtual authenticate whenNotPaused {\\n        _setSwapFeePercentage(swapFeePercentage);\\n    }\\n\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) internal virtual {\\n        _require(swapFeePercentage >= _MIN_SWAP_FEE_PERCENTAGE, Errors.MIN_SWAP_FEE_PERCENTAGE);\\n        _require(swapFeePercentage <= _MAX_SWAP_FEE_PERCENTAGE, Errors.MAX_SWAP_FEE_PERCENTAGE);\\n\\n        _swapFeePercentage = swapFeePercentage;\\n\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\n    }\\n\\n    // Gradual weight change\\n\\n    /**\\n     * @dev When calling updateWeightsGradually again during an update, reset the start weights to the current weights,\\n     * if necessary.\\n     */\\n    function _startGradualWeightChange(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory startWeights,\\n        uint256[] memory endWeights\\n    ) internal virtual {\\n        uint256 normalizedSum = 0;\\n        for (uint256 i = 0; i < endWeights.length; i++) {\\n            uint256 endWeight = endWeights[i];\\n            _require(endWeight >= WeightedMath._MIN_WEIGHT, Errors.MIN_WEIGHT);\\n\\n            normalizedSum = normalizedSum.add(endWeight);\\n        }\\n        // Ensure that the normalized weights sum to ONE\\n        _require(normalizedSum == FixedPoint.ONE, Errors.NORMALIZED_WEIGHT_INVARIANT);\\n\\n        _poolState = LiquidityBootstrappingPoolStorageLib.setNormalizedWeights(\\n            _poolState,\\n            startTime,\\n            endTime,\\n            startWeights,\\n            endWeights\\n        );\\n\\n        emit GradualWeightUpdateScheduled(startTime, endTime, startWeights, endWeights);\\n    }\\n\\n    function _setSwapEnabled(bool swapEnabled) private {\\n        _poolState = LiquidityBootstrappingPoolStorageLib.setSwapEnabled(_poolState, swapEnabled);\\n        emit SwapEnabledSet(swapEnabled);\\n    }\\n\\n    // Scaling factors\\n\\n    function _scalingFactor(IERC20 token) internal view returns (uint256) {\\n        // prettier-ignore\\n        if (token == _token0) { return _scalingFactor0; }\\n        else if (token == _token1) { return _scalingFactor1; }\\n        else if (token == _token2) { return _scalingFactor2; }\\n        else if (token == _token3) { return _scalingFactor3; }\\n        else {\\n            _revert(Errors.INVALID_TOKEN);\\n        }\\n    }\\n\\n    function getScalingFactors() public view virtual override returns (uint256[] memory) {\\n        uint256 totalTokens = _getTotalTokens();\\n        uint256[] memory scalingFactors = new uint256[](totalTokens);\\n\\n        // prettier-ignore\\n        {\\n            scalingFactors[0] = _scalingFactor0;\\n            scalingFactors[1] = _scalingFactor1;\\n            if (totalTokens > 2) { scalingFactors[2] = _scalingFactor2; } else { return scalingFactors; }\\n            if (totalTokens > 3) { scalingFactors[3] = _scalingFactor3; } else { return scalingFactors; }\\n        }\\n\\n        return scalingFactors;\\n    }\\n\\n    // Recovery Mode\\n\\n    /**\\n     * @notice Returns whether the pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() public view override returns (bool) {\\n        return LiquidityBootstrappingPoolStorageLib.getRecoveryMode(_poolState);\\n    }\\n\\n    /**\\n     * @dev Sets the recoveryMode state. The RecoveryModeStateChanged event is emitted in the RecoveryMode\\n     * base contract, in `enableRecoveryMode` or `disabledRecoveryMode`, before calling this hook.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual override {\\n        _poolState = LiquidityBootstrappingPoolStorageLib.setRecoveryMode(_poolState, enabled);\\n    }\\n\\n    // Misc\\n\\n    /**\\n     * @dev Extend ownerOnly functions to include the LBP control functions\\n     */\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view override returns (bool) {\\n        return\\n            (actionId == getActionId(this.setSwapFeePercentage.selector)) ||\\n            (actionId == getActionId(LiquidityBootstrappingPoolSettings.setSwapEnabled.selector)) ||\\n            (actionId == getActionId(LiquidityBootstrappingPoolSettings.updateWeightsGradually.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xfb99c39c5260ebf8a78bf1f20f677dc77f934c034aaabf2ce4bd4a63089231b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lbp/LiquidityBootstrappingPoolStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\n\\nimport \\\"../lib/GradualValueChange.sol\\\";\\nimport \\\"../lib/ValueCompression.sol\\\";\\n\\nlibrary LiquidityBootstrappingPoolStorageLib {\\n    using WordCodec for bytes32;\\n    using ValueCompression for uint256;\\n\\n    // LBPs often involve only two tokens - we support up to four since we're able to pack the entire config in a single\\n    // storage slot.\\n    uint256 internal constant _MAX_LBP_TOKENS = 4;\\n\\n    // For gas optimization, store start/end weights and timestamps in one bytes32\\n    // Start weights need to be high precision, since restarting the update resets them to \\\"spot\\\"\\n    // values. Target end weights do not need as much precision.\\n    // [      64 bits     |      124 bits      |     32 bits   |     32 bits     |  2 bits  |  1 bit   |     1 bit    ]\\n    // [ 4x16 end weights | 4x31 start weights | end timestamp | start timestamp | not used | recovery | swap enabled ]\\n    // |MSB                                                                                                        LSB|\\n\\n    // Offsets for data elements in bitmap\\n    uint256 private constant _SWAP_ENABLED_OFFSET = 0;\\n    uint256 private constant _RECOVERY_MODE_BIT_OFFSET = 1;\\n    uint256 private constant _START_TIME_OFFSET = _RECOVERY_MODE_BIT_OFFSET + 1 + _UNUSED_BITS;\\n    uint256 private constant _END_TIME_OFFSET = _START_TIME_OFFSET + _TIMESTAMP_BIT_LENGTH;\\n    uint256 private constant _START_WEIGHT_OFFSET = _END_TIME_OFFSET + _TIMESTAMP_BIT_LENGTH;\\n    uint256 private constant _END_WEIGHT_OFFSET = _START_WEIGHT_OFFSET + _MAX_LBP_TOKENS * _START_WEIGHT_BIT_LENGTH;\\n\\n    uint256 private constant _START_WEIGHT_BIT_LENGTH = 31;\\n    uint256 private constant _END_WEIGHT_BIT_LENGTH = 16;\\n    uint256 private constant _TIMESTAMP_BIT_LENGTH = 32;\\n    uint256 private constant _UNUSED_BITS = 2;\\n\\n    // Getters\\n\\n    /**\\n     * @notice Return whether swaps are enabled or not for the given pool.\\n     */\\n    function getSwapEnabled(bytes32 poolState) internal pure returns (bool) {\\n        return poolState.decodeBool(_SWAP_ENABLED_OFFSET);\\n    }\\n\\n    /**\\n     * @notice Returns whether the pool is in Recovery Mode.\\n     */\\n    function getRecoveryMode(bytes32 poolState) internal pure returns (bool) {\\n        return poolState.decodeBool(_RECOVERY_MODE_BIT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Return start time, end time, and endWeights as an array.\\n     * Current weights should be retrieved via `getNormalizedWeights()`.\\n     */\\n    function getGradualWeightUpdateParams(bytes32 poolState, uint256 totalTokens)\\n        internal\\n        pure\\n        returns (\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256[] memory startWeights,\\n            uint256[] memory endWeights\\n        )\\n    {\\n        startTime = poolState.decodeUint(_START_TIME_OFFSET, _TIMESTAMP_BIT_LENGTH);\\n        endTime = poolState.decodeUint(_END_TIME_OFFSET, _TIMESTAMP_BIT_LENGTH);\\n\\n        startWeights = new uint256[](totalTokens);\\n        endWeights = new uint256[](totalTokens);\\n\\n        for (uint256 i = 0; i < totalTokens; i++) {\\n            startWeights[i] = poolState\\n                .decodeUint(_START_WEIGHT_OFFSET + i * _START_WEIGHT_BIT_LENGTH, _START_WEIGHT_BIT_LENGTH)\\n                .decompress(_START_WEIGHT_BIT_LENGTH);\\n            endWeights[i] = poolState\\n                .decodeUint(_END_WEIGHT_OFFSET + i * _END_WEIGHT_BIT_LENGTH, _END_WEIGHT_BIT_LENGTH)\\n                .decompress(_END_WEIGHT_BIT_LENGTH);\\n        }\\n    }\\n\\n    function getWeightChangeProgress(bytes32 poolState) internal view returns (uint256) {\\n        uint256 startTime = poolState.decodeUint(_START_TIME_OFFSET, _TIMESTAMP_BIT_LENGTH);\\n        uint256 endTime = poolState.decodeUint(_END_TIME_OFFSET, _TIMESTAMP_BIT_LENGTH);\\n\\n        return GradualValueChange.calculateValueChangeProgress(startTime, endTime);\\n    }\\n\\n    function getNormalizedWeightByIndex(\\n        bytes32 poolState,\\n        uint256 index,\\n        uint256 pctProgress\\n    ) internal pure returns (uint256) {\\n        uint256 startWeight = poolState\\n            .decodeUint(_START_WEIGHT_OFFSET + index * _START_WEIGHT_BIT_LENGTH, _START_WEIGHT_BIT_LENGTH)\\n            .decompress(_START_WEIGHT_BIT_LENGTH);\\n        uint256 endWeight = poolState\\n            .decodeUint(_END_WEIGHT_OFFSET + index * _END_WEIGHT_BIT_LENGTH, _END_WEIGHT_BIT_LENGTH)\\n            .decompress(_END_WEIGHT_BIT_LENGTH);\\n\\n        return GradualValueChange.interpolateValue(startWeight, endWeight, pctProgress);\\n    }\\n\\n    // Setters\\n\\n    function setSwapEnabled(bytes32 poolState, bool swapEnabled) internal pure returns (bytes32) {\\n        return poolState.insertBool(swapEnabled, _SWAP_ENABLED_OFFSET);\\n    }\\n\\n    function setRecoveryMode(bytes32 poolState, bool enabled) internal pure returns (bytes32) {\\n        return poolState.insertBool(enabled, _RECOVERY_MODE_BIT_OFFSET);\\n    }\\n\\n    function setNormalizedWeights(\\n        bytes32 poolState,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory newStartWeights,\\n        uint256[] memory newEndWeights\\n    ) internal pure returns (bytes32) {\\n        poolState = poolState.insertUint(startTime, _START_TIME_OFFSET, _TIMESTAMP_BIT_LENGTH).insertUint(\\n            endTime,\\n            _END_TIME_OFFSET,\\n            _TIMESTAMP_BIT_LENGTH\\n        );\\n\\n        // This performs no checks on the validity of the weights, assuming these are done externally.\\n        // In particular, we assume that newStartWeights.length == newEndWeights.length, and all\\n        // newEndWeights are above the minimum.\\n        //\\n        // We do not need to check that `newStartWeights <= _MAX_LBP_TOKENS` as the `_MAX_LBP_TOKENS + 1`th token will\\n        // attempt to write past the 256th bit of `poolState`, resulting in `WordCodec` reverting.\\n        for (uint256 i = 0; i < newStartWeights.length; i++) {\\n            poolState = poolState\\n                .insertUint(\\n                newStartWeights[i].compress(_START_WEIGHT_BIT_LENGTH),\\n                _START_WEIGHT_OFFSET + i * _START_WEIGHT_BIT_LENGTH,\\n                _START_WEIGHT_BIT_LENGTH\\n            )\\n                .insertUint(\\n                newEndWeights[i].compress(_END_WEIGHT_BIT_LENGTH),\\n                _END_WEIGHT_OFFSET + i * _END_WEIGHT_BIT_LENGTH,\\n                _END_WEIGHT_BIT_LENGTH\\n            );\\n        }\\n        return poolState;\\n    }\\n}\\n\",\"keccak256\":\"0x50bd17ff52c9d30286fcc52747162897b03e83070c41a199a537e743610db3c8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/GradualValueChange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable not-rely-on-time\\n\\nlibrary GradualValueChange {\\n    using FixedPoint for uint256;\\n\\n    function getInterpolatedValue(\\n        uint256 startValue,\\n        uint256 endValue,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) internal view returns (uint256) {\\n        uint256 pctProgress = calculateValueChangeProgress(startTime, endTime);\\n\\n        return interpolateValue(startValue, endValue, pctProgress);\\n    }\\n\\n    function resolveStartTime(uint256 startTime, uint256 endTime) internal view returns (uint256 resolvedStartTime) {\\n        // If the start time is in the past, \\\"fast forward\\\" to start now\\n        // This avoids discontinuities in the value curve. Otherwise, if you set the start/end times with\\n        // only 10% of the period in the future, the value would immediately jump 90%\\n        resolvedStartTime = Math.max(block.timestamp, startTime);\\n\\n        _require(resolvedStartTime <= endTime, Errors.GRADUAL_UPDATE_TIME_TRAVEL);\\n    }\\n\\n    function interpolateValue(\\n        uint256 startValue,\\n        uint256 endValue,\\n        uint256 pctProgress\\n    ) internal pure returns (uint256) {\\n        if (pctProgress >= FixedPoint.ONE || startValue == endValue) return endValue;\\n        if (pctProgress == 0) return startValue;\\n\\n        if (startValue > endValue) {\\n            uint256 delta = pctProgress.mulDown(startValue - endValue);\\n            return startValue - delta;\\n        } else {\\n            uint256 delta = pctProgress.mulDown(endValue - startValue);\\n            return startValue + delta;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a fixed-point number representing how far along the current value change is, where 0 means the\\n     * change has not yet started, and FixedPoint.ONE means it has fully completed.\\n     */\\n    function calculateValueChangeProgress(uint256 startTime, uint256 endTime) internal view returns (uint256) {\\n        if (block.timestamp >= endTime) {\\n            return FixedPoint.ONE;\\n        } else if (block.timestamp <= startTime) {\\n            return 0;\\n        }\\n\\n        // No need for SafeMath as it was checked right above: endTime > block.timestamp > startTime\\n        uint256 totalSeconds = endTime - startTime;\\n        uint256 secondsElapsed = block.timestamp - startTime;\\n\\n        // We don't need to consider zero division here as this is covered above.\\n        return secondsElapsed.divDown(totalSeconds);\\n    }\\n}\\n\",\"keccak256\":\"0xe3cab302d40db60643e4622f39652febab4ced57d2b8e7220f828f791345c7be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/ValueCompression.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n/**\\n * @dev Library for compressing and decompressing numbers by using smaller types.\\n * All values are 18 decimal fixed-point numbers, so heavier compression (fewer bits)\\n * results in fewer decimals.\\n */\\nlibrary ValueCompression {\\n    /**\\n     * @notice Returns the maximum potential error when compressing and decompressing a value to a certain bit length.\\n     * @dev During compression, the range [0, maxUncompressedValue] is mapped onto the range [0, maxCompressedValue].\\n     * Each increment in compressed space then corresponds to an increment of maxUncompressedValue / maxCompressedValue\\n     * in uncompressed space. This granularity is the maximum error when decompressing a compressed value.\\n     */\\n    function maxCompressionError(uint256 bitLength, uint256 maxUncompressedValue) internal pure returns (uint256) {\\n        // It's not meaningful to compress 1-bit values (2 bits is also a bit silly, but theoretically possible).\\n        // 255 would likewise not be very helpful, but is technically valid.\\n        _require(bitLength >= 2 && bitLength <= 255, Errors.OUT_OF_BOUNDS);\\n\\n        uint256 maxCompressedValue = (1 << bitLength) - 1;\\n        return Math.divUp(maxUncompressedValue, maxCompressedValue);\\n    }\\n\\n    /**\\n     * @dev Compress a 256 bit value into `bitLength` bits.\\n     * To compress a value down to n bits, you first \\\"normalize\\\" it over the full input range.\\n     * For instance, if the maximum value were 10_000, and the `value` is 2_000, it would be\\n     * normalized to 0.2.\\n     *\\n     * Finally, \\\"scale\\\" that normalized value into the output range: adapting [0, maxUncompressedValue]\\n     * to [0, max n-bit value]. For n=8 bits, the max value is 255, so 0.2 corresponds to 51.\\n     * Likewise, for 16 bits, 0.2 would be stored as 13_107.\\n     */\\n    function compress(\\n        uint256 value,\\n        uint256 bitLength,\\n        uint256 maxUncompressedValue\\n    ) internal pure returns (uint256) {\\n        // It's not meaningful to compress 1-bit values (2 bits is also a bit silly, but theoretically possible).\\n        // 255 would likewise not be very helpful, but is technically valid.\\n        _require(bitLength >= 2 && bitLength <= 255, Errors.OUT_OF_BOUNDS);\\n        // The value cannot exceed the input range, or the compression would not \\\"fit\\\" in the output range.\\n        _require(value <= maxUncompressedValue, Errors.OUT_OF_BOUNDS);\\n\\n        // There is another way this can fail: maxUncompressedValue * value can overflow, if either or both\\n        // are too big. Essentially, the maximum bitLength will be about 256 - (# bits needed for maxUncompressedValue).\\n        // It's not worth it to test for this: the caller is responsible for many things anyway, notably ensuring\\n        // compress and decompress are called with the same arguments, and packing the resulting value properly\\n        // (the most common use is to assist in packing several variables into a 256-bit word).\\n\\n        uint256 maxCompressedValue = (1 << bitLength) - 1;\\n\\n        return Math.divDown(Math.mul(value, maxCompressedValue), maxUncompressedValue);\\n    }\\n\\n    /**\\n     * @dev Reverse a compression operation, and restore the 256 bit value from a compressed value of\\n     * length `bitLength`. The compressed value is in the range [0, 2^(bitLength) - 1], and we are mapping\\n     * it back onto the uncompressed range [0, maxUncompressedValue].\\n     *\\n     * It is very important that the bitLength and maxUncompressedValue arguments are the\\n     * same for compress and decompress, or the results will be meaningless. This must be validated\\n     * externally.\\n     */\\n    function decompress(\\n        uint256 value,\\n        uint256 bitLength,\\n        uint256 maxUncompressedValue\\n    ) internal pure returns (uint256) {\\n        // It's not meaningful to compress 1-bit values (2 bits is also a bit silly, but theoretically possible).\\n        // 255 would likewise not be very helpful, but is technically valid.\\n        _require(bitLength >= 2 && bitLength <= 255, Errors.OUT_OF_BOUNDS);\\n        uint256 maxCompressedValue = (1 << bitLength) - 1;\\n        // The value must not exceed the maximum compressed value (2**(bitLength) - 1), or it will exceed the max\\n        // uncompressed value.\\n        _require(value <= maxCompressedValue, Errors.OUT_OF_BOUNDS);\\n\\n        return Math.divDown(Math.mul(value, maxUncompressedValue), maxCompressedValue);\\n    }\\n\\n    // Special case overloads\\n\\n    /**\\n     * @dev It is very common for the maximum value to be one: Weighted Pool weights, for example.\\n     * Overload for this common case, passing FixedPoint.ONE to the general `compress` function.\\n     */\\n    function compress(uint256 value, uint256 bitLength) internal pure returns (uint256) {\\n        return compress(value, bitLength, FixedPoint.ONE);\\n    }\\n\\n    /**\\n     * @dev It is very common for the maximum value to be one: Weighted Pool weights, for example.\\n     * Overload for this common case, passing FixedPoint.ONE to the general `decompress` function.\\n     */\\n    function decompress(uint256 value, uint256 bitLength) internal pure returns (uint256) {\\n        return decompress(value, bitLength, FixedPoint.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0x7e2c6953ddfc99a8e5e2c794b952d79e718ccffd9aee46a799f9d48a13a600c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/WeightedExitsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\\\";\\n\\nimport \\\"../WeightedMath.sol\\\";\\n\\nlibrary WeightedExitsLib {\\n    using WeightedPoolUserData for bytes;\\n\\n    function exitExactBPTInForTokenOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256 totalSupply,\\n        uint256 swapFeePercentage,\\n        bytes memory userData\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);\\n\\n        uint256 amountOut = WeightedMath._calcTokenOutGivenExactBptIn(\\n            balances[tokenIndex],\\n            normalizedWeights[tokenIndex],\\n            bptAmountIn,\\n            totalSupply,\\n            swapFeePercentage\\n        );\\n\\n        // This is an exceptional situation in which the fee is charged on a token out instead of a token in.\\n        // We exit in a single token, so we initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n        // And then assign the result to the selected token\\n        amountsOut[tokenIndex] = amountOut;\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function exitExactBPTInForTokensOut(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal pure returns (uint256 bptAmountIn, uint256[] memory amountsOut) {\\n        bptAmountIn = userData.exactBptInForTokensOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        amountsOut = BasePoolMath.computeProportionalAmountsOut(balances, totalSupply, bptAmountIn);\\n    }\\n\\n    function exitBPTInForExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        uint256 totalSupply,\\n        uint256 swapFeePercentage,\\n        bytes memory userData\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);\\n        _upscaleArray(amountsOut, scalingFactors);\\n\\n        // This is an exceptional situation in which the fee is charged on a token out instead of a token in.\\n        uint256 bptAmountIn = WeightedMath._calcBptInGivenExactTokensOut(\\n            balances,\\n            normalizedWeights,\\n            amountsOut,\\n            totalSupply,\\n            swapFeePercentage\\n        );\\n        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n}\\n\",\"keccak256\":\"0xd567f1ea07398cb0a1987e81d4752fb4bf7e7684c06d65e5efdef8a38fd2c99f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/WeightedJoinsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\\\";\\n\\nimport \\\"../WeightedMath.sol\\\";\\n\\nlibrary WeightedJoinsLib {\\n    using WeightedPoolUserData for bytes;\\n\\n    function joinExactTokensInForBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory scalingFactors,\\n        uint256 totalSupply,\\n        uint256 swapFeePercentage,\\n        bytes memory userData\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\n        InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);\\n\\n        _upscaleArray(amountsIn, scalingFactors);\\n\\n        uint256 bptAmountOut = WeightedMath._calcBptOutGivenExactTokensIn(\\n            balances,\\n            normalizedWeights,\\n            amountsIn,\\n            totalSupply,\\n            swapFeePercentage\\n        );\\n\\n        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function joinTokenInForExactBPTOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256 totalSupply,\\n        uint256 swapFeePercentage,\\n        bytes memory userData\\n    ) internal pure returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.\\n\\n        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);\\n\\n        uint256 amountIn = WeightedMath._calcTokenInGivenExactBptOut(\\n            balances[tokenIndex],\\n            normalizedWeights[tokenIndex],\\n            bptAmountOut,\\n            totalSupply,\\n            swapFeePercentage\\n        );\\n\\n        // We join in a single token, so we initialize amountsIn with zeros\\n        uint256[] memory amountsIn = new uint256[](balances.length);\\n        // And then assign the result to the selected token\\n        amountsIn[tokenIndex] = amountIn;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function joinAllTokensInForExactBPTOut(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal pure returns (uint256 bptAmountOut, uint256[] memory amountsIn) {\\n        bptAmountOut = userData.allTokensInForExactBptOut();\\n        // Note that there is no maximum amountsIn parameter: this is handled by `IVault.joinPool`.\\n\\n        amountsIn = BasePoolMath.computeProportionalAmountsIn(balances, totalSupply, bptAmountOut);\\n    }\\n}\\n\",\"keccak256\":\"0x3c5359741a4cd24c4aeb73fe83ab41269d9fd0a2a82ce0045b3f0eae52539d7b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c80637ecebe0011610186578063a9059cbb116100e3578063d505accf11610097578063e01af92c11610071578063e01af92c1461057f578063ed24911d14610592578063f89f27ed1461059a576102de565b8063d505accf14610546578063d5c096c414610559578063dd62ed3e1461056c576102de565b8063b35056b8116100c8578063b35056b81461052e578063b7b814fc14610536578063d2946c2b1461053e576102de565b8063a9059cbb14610513578063aaabadc514610526576102de565b80638d928af81161013a57806395d89b411161011f57806395d89b41146104e55780639d2c110c146104ed578063a457c2d714610500576102de565b80638d928af8146104ca57806390193b7c146104d2576102de565b8063851c1bb31161016b578063851c1bb31461048f57806387ec6817146104a2578063893d20e8146104b5576102de565b80637ecebe00146104745780638456cb5914610487576102de565b806338fff2d01161023f57806354a844ba116101f357806370a08231116101cd57806370a082311461042957806374f3b0091461043c5780637beed2201461045d576102de565b806354a844ba146103f857806355c67628146104005780636028bfd414610408576102de565b80633e569205116102245780633e569205146103d55780633f4ba83a146103e857806347bc4d92146103f0576102de565b806338fff2d0146103ba57806339509351146103c2576102de565b80631dd746ea11610296578063313ce5671161027b578063313ce567146103885780633644e5151461039d57806338e9922e146103a5576102de565b80631dd746ea1461036057806323b872dd14610375576102de565b8063095ea7b3116102c7578063095ea7b31461032157806318160ddd146103415780631c0de05114610349576102de565b806301ec954a146102e357806306fdde031461030c575b600080fd5b6102f66102f13660046149d6565b6105a2565b6040516103039190614c56565b60405180910390f35b610314610602565b6040516103039190614d96565b61033461032f3660046146ca565b610699565b6040516103039190614c33565b6102f66106b0565b6103516106b6565b60405161030393929190614c3e565b6103686106df565b6040516103039190614bfb565b61033461038336600461461a565b610841565b6103906108b7565b6040516103039190614e7b565b6102f66108c0565b6103b86103b3366004614a93565b6108cf565b005b6102f66108eb565b6103346103d03660046146ca565b61090f565b6103b86103e3366004614aab565b61094a565b6103b8610990565b6103346109a4565b6103b86109b1565b6102f6610a05565b61041b610416366004614745565b610a0b565b604051610303929190614e07565b6102f66104373660046145c6565b610a29565b61044f61044a366004614745565b610a48565b604051610303929190614c0e565b610465610b0a565b60405161030393929190614e20565b6102f66104823660046145c6565b610b2f565b6103b8610b3a565b6102f661049d3660046147e8565b610b4c565b61041b6104b0366004614745565b610b9e565b6104bd610bb0565b6040516103039190614be7565b6104bd610bd4565b6102f66104e03660046145c6565b610bf8565b610314610c13565b6102f66104fb366004614a47565b610c74565b61033461050e3660046146ca565b610cad565b6103346105213660046146ca565b610ceb565b6104bd610cf8565b610334610d02565b6103b8610d0f565b6104bd610d59565b6103b861055436600461465a565b610d7d565b61044f610567366004614745565b610e08565b6102f661057a3660046145e2565b610e9f565b6103b861058d3660046146f5565b610edc565b6102f6610ef5565b610368610eff565b600084608001516105cf6105b4610bd4565b6001600160a01b0316336001600160a01b03161460cd6110e6565b6105e46105da6108eb565b82146101f46110e6565b6105ec6110f4565b6105f886868686611107565b9695505050505050565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561068e5780601f106106635761010080835404028352916020019161068e565b820191906000526020600020905b81548152906001019060200180831161067157829003601f168201915b505050505090505b90565b60006106a6338484611114565b5060015b92915050565b60025490565b60008060006106c361117c565b1592506106ce611199565b91506106d86111bd565b9050909192565b606060006106eb6111e1565b905060608167ffffffffffffffff8111801561070657600080fd5b50604051908082528060200260200182016040528015610730578160200160208202803683370190505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061076157fe5b6020026020010181815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061079b57fe5b60200260200101818152505060028211156107ef577f0000000000000000000000000000000000000000000000000000000000000000816002815181106107de57fe5b6020026020010181815250506107f8565b91506106969050565b60038211156107ef577f00000000000000000000000000000000000000000000000000000000000000008160038151811061082f57fe5b60200260200101818152505091505090565b60008061084e8533610e9f565b9050610872336001600160a01b038716148061086a5750838210155b61019e6110e6565b61087d858585611205565b336001600160a01b0386161480159061089857506000198114155b156108aa576108aa8533858403611114565b60019150505b9392505050565b60055460ff1690565b60006108ca610ef5565b905090565b6108d76112e5565b6108df6110f4565b6108e88161132b565b50565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106a69185906109459086610f88565b611114565b6109526112e5565b61095a6110f4565b61096c6109656111e1565b8251610f61565b6109768383611394565b925061098b83836109856113b1565b846114dc565b505050565b6109986112e5565b6109a2600061159a565b565b60006108ca60095461162b565b6109b96112e5565b6109c1611637565b6109cb600161164b565b7feff3d4d215b42bf0960be9c6d5e05c22cba4df6627a3a523e2acee733b5854c860016040516109fb9190614c33565b60405180910390a1565b60085490565b60006060610a1d88878561165d611690565b97509795505050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b60608088610a576105b4610bd4565b610a626105da6108eb565b6000610a6d8561181b565b15610a9557610a7a61184a565b610a8c88610a866106b0565b8761185d565b94509050610aad565b610a9d6110f4565b610aa88a898761165d565b945090505b610ab78a82611881565b835167ffffffffffffffff81118015610acf57600080fd5b50604051908082528060200260200182016040528015610af9578160200160208202803683370190505b509250505097509795505050505050565b6000806060610b22600954610b1d6111e1565b61188b565b9296919550919350915050565b60006106aa82610bf8565b610b426112e5565b6109a2600161159a565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001610b81929190614b71565b604051602081830303815290604052805190602001209050919050565b60006060610a1d8887856119b2611690565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b031660009081526006602052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561068e5780601f106106635761010080835404028352916020019161068e565b60008360800151610c866105b4610bd4565b610c916105da6108eb565b610c996110f4565b610ca4858585611a12565b95945050505050565b600080610cba3385610e9f565b9050808310610cd457610ccf33856000611114565b610ce1565b610ce13385858403611114565b5060019392505050565b60006106a6338484611205565b60006108ca611b6d565b60006108ca600954611be7565b610d176112e5565b610d1f61184a565b610d29600061164b565b7feff3d4d215b42bf0960be9c6d5e05c22cba4df6627a3a523e2acee733b5854c860006040516109fb9190614c33565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610dac8c610bf8565b89604051602001610dc296959493929190614c7e565b604051602081830303815290604052805190602001209050610df38882610dea878787611bf4565b886101f8611c33565b610dfe888888611114565b5050505050505050565b60608088610e176105b4610bd4565b610e226105da6108eb565b6000610e2c6110f4565b610e346106b0565b610e8657610e438a8a87611c8a565b94509050610e5c610e52611d26565b82101560cc6110e6565b610e6e6000610e69611d26565b611d2d565b610e8189610e7a611d26565b8303611d2d565b610ab7565b610e918a89876119b2565b94509050610ab78982611d2d565b6000610ea9610bd4565b6001600160a01b0316826001600160a01b03161415610ecb57506000196106aa565b610ed58383611d37565b90506106aa565b610ee46112e5565b610eec6110f4565b6108e881611d62565b60006108ca611da1565b60606108ca6113b1565b6000610f59848484855167ffffffffffffffff81118015610f2957600080fd5b50604051908082528060200260200182016040528015610f53578160200160208202803683370190505b50611e3e565b949350505050565b610f6e81831460676110e6565b5050565b6000610f828383111560016110e6565b50900390565b60008282016108b084821015836110e6565b6000610fb98460246020610fb18a8a60048461104f565b92919061104f565b955060005b835181101561102d57611023610ff16010858481518110610fdb57fe5b602002602001015161107290919063ffffffff16565b8551601084810260c00191610fb19061101390601f908b9089908110610fdb57fe5b8c90601f8881026044019061104f565b9650600101610fbe565b509495945050505050565b60006108b0838383611087565b80610f6e81611e55565b600061105c848484611ece565b506001901b60001901811b1992909216911b1790565b60006108b08383670de0b6b3a7640000611f15565b6001811b1992909216911b1790565b80820390821102900390565b60008282026108b08415806110bf5750838583816110bc57fe5b04145b60036110e6565b60006110d582151560046110e6565b8183816110de57fe5b049392505050565b81610f6e57610f6e81611f5b565b6109a26110ff61117c565b6101926110e6565b6000610f596103e6611f5b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061116f908590614c56565b60405180910390a3505050565b60006111866111bd565b4211806108ca57505060075460ff161590565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b61121c6001600160a01b03841615156101986110e6565b6112336001600160a01b03831615156101996110e6565b61123e83838361098b565b6001600160a01b03831660009081526020819052604090205461126490826101a0611f85565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546112939082610f88565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061116f908590614c56565b60006113146000357fffffffff0000000000000000000000000000000000000000000000000000000016610b4c565b90506108e86113238233611f9b565b6101916110e6565b61133e64e8d4a5100082101560cb6110e6565b61135467016345785d8a000082111560ca6110e6565b60088190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc90611389908390614c56565b60405180910390a150565b60006113a04284612084565b90506106aa828211156101466110e6565b606060006113bd6111e1565b905060608167ffffffffffffffff811180156113d857600080fd5b50604051908082528060200260200182016040528015611402578160200160208202803683370190505b50600954909150600061141482612090565b9050611422826000836120bd565b8360008151811061142f57fe5b602002602001018181525050611447826001836120bd565b8360018151811061145457fe5b60200260200101818152505083600214156114755782945050505050610696565b611481826002836120bd565b8360028151811061148e57fe5b60200260200101818152505083600314156114af5782945050505050610696565b6114bb826003836120bd565b836003815181106114c857fe5b602090810291909101015250909250505090565b6000805b825181101561152c5760008382815181106114f757fe5b60200260200101519050611517662386f26fc1000082101561012e6110e6565b6115218382610f88565b9250506001016114e0565b50611543670de0b6b3a764000082146101346110e6565b61155260095486868686610f9a565b6009556040517f0f3631f9dab08169d1db21c6dc5f32536fb2b0a6b9bb5330d71c52132f968be09061158b908790879087908790614e3f565b60405180910390a15050505050565b80156115ba576115b56115ab611199565b42106101936110e6565b6115cf565b6115cf6115c56111bd565b42106101a96110e6565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517f9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be6490611389908390614c33565b60006106aa82826120fb565b6109a2611642610d02565b156101b56110e6565b61165760095482612102565b60095550565b60006060611684858561166e6113b1565b6116766106df565b61167e6106b0565b88612110565b91509150935093915050565b33301461177f576000306001600160a01b03166000366040516116b4929190614ba1565b6000604051808303816000865af19150503d80600081146116f1576040519150601f19603f3d011682016040523d82523d6000602084013e6116f6565b606091505b50509050806000811461170557fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb000000000000000000000000000000000000000000000000000000008114611761573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b600060606117928686868663ffffffff16565b80517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc083015291935091506020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b50505050565b60008082511180156106aa575060ff8016828060200190518101906118409190614af9565b60ff161492915050565b6109a2611855610d02565b6101b66110e6565b6000606061186a836121b3565b91506118778585846121c9565b9050935093915050565b610f6e8282612278565b60008060608061189e8660046020612344565b93506118ad8660246020612344565b92508467ffffffffffffffff811180156118c657600080fd5b506040519080825280602002602001820160405280156118f0578160200160208202803683370190505b5091508467ffffffffffffffff8111801561190a57600080fd5b50604051908082528060200260200182016040528015611934578160200160208202803683370190505b50905060005b858110156119a85761195d601f6119578960448584020183612344565b90612353565b83828151811061196957fe5b602090810291909101015261198960106119578960c08584020183612344565b82828151811061199557fe5b602090810291909101015260010161193a565b5092959194509250565b600060606119dd6119c1610bb0565b6001600160a01b0316866001600160a01b0316146101486110e6565b60006060611a0487876119ee6113b1565b6119f66106df565b6119fe6106b0565b8a612368565b909890975095505050505050565b600080600080611a206123f4565b9050611a36611a2e8261162b565b6101476110e6565b6000611a4182612090565b9050611a5a82611a548a602001516123fa565b836120bd565b9350611a6d82611a548a604001516123fa565b925050506000611a80876020015161250f565b90506000611a91886040015161250f565b9050611a9d8783612695565b9650611aa98682612695565b9550600088516001811115611aba57fe5b1415611b1b57611ad6611acb610a05565b60608a01519061269d565b60608901819052611ae79083612695565b8860600181815250506000611b03888689878d606001516126cb565b9050611b0f8183612746565b955050505050506108b0565b611b29886060015182612695565b8860600181815250506000611b45888689878d60600151612752565b9050611b5181846127c8565b9050611b0f611b66611b61610a05565b6127d4565b82906127e6565b6000611b77610bd4565b6001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190614828565b60006106aa8260016120fb565b60408051604180825260808201909252606091829190602082018180368337019050509050836020820152826040820152846060820153949350505050565b6000611c3e8561283d565b9050611c54611c4e878387612859565b836110e6565b611c63428410156101b86110e6565b5050506001600160a01b039092166000908152600660205260409020805460010190555050565b60006060611c996119c1610bb0565b6000611ca484612926565b9050611cbf6000826003811115611cb757fe5b1460ce6110e6565b6060611cca8561293c565b90506060611cd66106df565b9050611ce482518251610f61565b611cee8282612952565b6060611cf86113b1565b90506000611d0682856129bb565b90506000611d158286516110a2565b9b949a509398505050505050505050565b620f424090565b610f6e8282612a2d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b611d6e60095482611038565b6009556040517f5a9e84f78f7957cb4ed7478eb0fcad35ee4ecbe2e0f298420b28a3955392573f90611389908390614c33565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e0e612ac0565b30604051602001611e23959493929190614d38565b60405160208183030381529060405280519060200120905090565b6000611e4983611045565b610ca485858585612ac4565b600281511015611e64576108e8565b600081600081518110611e7357fe5b602002602001015190506000600190505b825181101561098b576000838281518110611e9b57fe5b60200260200101519050611ec4816001600160a01b0316846001600160a01b03161060656110e6565b9150600101611e84565b611edd610100831060646110e6565b611f0660018210158015611eff5750611efb60ff8461010003611096565b8211155b60646110e6565b61098b83821c156101b46110e6565b6000611f3260028410158015611eff575060ff84111560646110e6565b611f408285111560646110e6565b6000196001841b01610ca4611f5586836110a2565b846110c6565b6108e8817f42414c0000000000000000000000000000000000000000000000000000000000612bcd565b6000611f9484841115836110e6565b5050900390565b600073ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b611fba610bb0565b6001600160a01b031614158015611fd55750611fd583612c48565b15611ffd57611fe2610bb0565b6001600160a01b0316336001600160a01b03161490506106aa565b612005611b6d565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b815260040161203493929190614c5f565b60206040518083038186803b15801561204c57600080fd5b505afa158015612060573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190614711565b80820390821002900390565b6000806120a08360046020612344565b905060006120b18460246020612344565b9050610f598282612cde565b6000806120d5601f6119578760448884020183612344565b905060006120ee60106119578860c08984020183612344565b90506105f8828286612d16565b1c60011690565b60006108b083836001611087565b60006060600061211f84612d80565b9050600081600281111561212f57fe5b141561215357612149888887612143610a05565b88612d96565b92509250506121a8565b600181600281111561216157fe5b141561217257612149888686612e5f565b600281600281111561218057fe5b141561219b5761214988888888612195610a05565b89612e6c565b6121a6610150611f5b565b505b965096945050505050565b6000818060200190518101906108b09190614b15565b606060006121d78385612ec5565b9050845167ffffffffffffffff811180156121f157600080fd5b5060405190808252806020026020018201604052801561221b578160200160208202803683370190505b50915060005b855181101561226f576122508287838151811061223a57fe5b602002602001015161269d90919063ffffffff16565b83828151811061225c57fe5b6020908102919091010152600101612221565b50509392505050565b61228f6001600160a01b038316151561019b6110e6565b61229b8260008361098b565b6001600160a01b0382166000908152602081905260409020546122c190826101b2611f85565b6001600160a01b0383166000908152602081905260409020556122f46122ef826122e96106b0565b90612f05565b612f13565b60006001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516123389190614c56565b60405180910390a35050565b6001901b6000190191901c1690565b60006108b08383670de0b6b3a7640000612f18565b60006060600061237784612926565b9050600181600381111561238757fe5b14156123a2576121498888888861239c610a05565b89612f5e565b60028160038111156123b057fe5b14156123ca576121498888876123c4610a05565b88612fa7565b60038160038111156123d857fe5b14156123e957612149888686612ffe565b6121a6610136611f5b565b60095490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561243e57506000610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561248057506001610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156124c257506002610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561250457506003610a43565b610a43610135611f5b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561257257507f0000000000000000000000000000000000000000000000000000000000000000610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156125d357507f0000000000000000000000000000000000000000000000000000000000000000610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561263457507f0000000000000000000000000000000000000000000000000000000000000000610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561250457507f0000000000000000000000000000000000000000000000000000000000000000610a43565b60006108b083835b60008282026126b78415806110bf5750838583816110bc57fe5b670de0b6b3a7640000815b04949350505050565b60006126ed6126e287670429d069189e000061269d565b8311156101306110e6565b60006126f98784610f88565b9050600061270788836127e6565b905060006127158887612ec5565b905060006127238383613018565b9050612738612731826127d4565b899061269d565b9a9950505050505050505050565b60006108b08383612ec5565b600061277461276985670429d069189e000061269d565b8311156101316110e6565b600061278a6127838685610f72565b86906127e6565b9050600061279885886127e6565b905060006127a68383613018565b905060006127bc82670de0b6b3a7640000610f72565b90506127388a826130b6565b60006108b083836127e6565b670de0b6b3a764000081810391100290565b60006127f582151560046110e6565b670de0b6b3a764000083026128278415806128205750670de0b6b3a764000085838161281d57fe5b04145b60056110e6565b6001836001830304018115150291505092915050565b6000612847611da1565b82604051602001610b81929190614bb1565b600061286b82516041146101b96110e6565b60208281015160408085015160608601518251600080825295019283905292939092811a916001906128a4908990859088908890614d64565b6020604051602081039080840390855afa1580156128c6573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381161580159061291a5750876001600160a01b0316816001600160a01b0316145b98975050505050505050565b6000818060200190518101906106aa9190614916565b6060818060200190518101906108b09190614931565b81518151612961908290610f61565b60005b818110156118155761299c84828151811061297b57fe5b602002602001015184838151811061298f57fe5b602002602001015161269d565b8482815181106129a857fe5b6020908102919091010152600101612964565b670de0b6b3a764000060005b8351811015612a1d57612a13612a0c8583815181106129e257fe5b60200260200101518584815181106129f657fe5b60200260200101516130ee90919063ffffffff16565b839061269d565b91506001016129c7565b506106aa600082116101376110e6565b612a396000838361098b565b612a4e6122ef82612a486106b0565b90610f88565b6001600160a01b038216600090815260208190526040902054612a719082610f88565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612338908590614c56565b4690565b600080856001600160a01b03166309b2760f866040518263ffffffff1660e01b8152600401612af39190614d82565b602060405180830381600087803b158015612b0d57600080fd5b505af1158015612b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b45919061472d565b6040517f66a9c7d20000000000000000000000000000000000000000000000000000000081529091506001600160a01b038716906366a9c7d290612b9190849088908890600401614cb2565b600060405180830381600087803b158015612bab57600080fd5b505af1158015612bbf573d6000803e3d6000fd5b509298975050505050505050565b7f08c379a000000000000000000000000000000000000000000000000000000000600090815260206004526007602452600a808404818106603090810160081b958390069590950190829004918206850160101b01602363ffffff0060e086901c160160181b0190930160c81b60445260e882901c90606490fd5b6000612c737f38e9922e00000000000000000000000000000000000000000000000000000000610b4c565b821480612ca75750612ca47fe01af92c00000000000000000000000000000000000000000000000000000000610b4c565b82145b806106aa5750612cd67f3e56920500000000000000000000000000000000000000000000000000000000610b4c565b909114919050565b6000814210612cf65750670de0b6b3a76400006106aa565b824211612d05575060006106aa565b82820342849003610ca48183612ec5565b6000670de0b6b3a764000082101580612d2e57508284145b15612d3a5750816108b0565b81612d465750826108b0565b82841115612d67576000612d5c8385870361269d565b850391506108b09050565b6000612d758386860361269d565b850191506108b09050565b6000818060200190518101906106aa9190614844565b60006060600080612da685613187565b91509150612db88951821060646110e6565b6000612ded8a8381518110612dc957fe5b60200260200101518a8481518110612ddd57fe5b6020026020010151858b8b6131a9565b905060608a5167ffffffffffffffff81118015612e0957600080fd5b50604051908082528060200260200182016040528015612e33578160200160208202803683370190505b50905081818481518110612e4357fe5b6020908102919091010152929a92995091975050505050505050565b6000606061186a83613266565b60006060806000612e7c8561327c565b91509150612e8c82518b51610f61565b612e968289612952565b6000612ea58b8b858b8b613294565b9050612eb58282111560cf6110e6565b9a91995090975050505050505050565b6000612ed482151560046110e6565b670de0b6b3a76400008302612efc8415806128205750670de0b6b3a764000085838161281d57fe5b8281816126c257fe5b60006108b083836001611f85565b600255565b6000612f3560028410158015611eff575060ff84111560646110e6565b6000196001841b01612f4b8186111560646110e6565b610ca4612f5886856110a2565b826110c6565b60006060806000612f6e856133d2565b91509150612f7e8a518351610f61565b612f888289612952565b6000612f978b8b858b8b6133ea565b9050612eb58282101560d06110e6565b60006060600080612fb785613535565b91509150612fc98951821060646110e6565b6000612ded8a8381518110612fda57fe5b60200260200101518a8481518110612fee57fe5b6020026020010151858b8b61354c565b6000606061300b836135e2565b91506118778585846135f8565b6000670de0b6b3a76400008214156130315750816106aa565b671bc16d674ec8000082141561304b57610ed583846130b6565b673782dace9d90000082141561307b57600061306784856130b6565b905061307381826130b6565b9150506106aa565b60006130878484613688565b905060006130a161309a836127106130b6565b6001610f88565b90506130ad8282610f88565b925050506106aa565b60008282026130d08415806110bf5750838583816110bc57fe5b6001670de0b6b3a76400006001830304018115150291505092915050565b6000670de0b6b3a76400008214156131075750816106aa565b671bc16d674ec8000082141561312157610ed5838461269d565b673782dace9d90000082141561314957600061313d848561269d565b9050613073818261269d565b60006131558484613688565b9050600061316861309a836127106130b6565b90508082101561317d576000925050506106aa565b6130ad8282610f72565b6000808280602001905181019061319e91906148e1565b909590945092505050565b6000806131c0846131ba8188610f72565b906127e6565b90506131d96709b6e64a8ec600008210156101326110e6565b60006131f76131f0670de0b6b3a764000089612ec5565b8390613018565b9050600061320e613207836127d4565b8a9061269d565b9050600061322561321e8a6127d4565b83906130b6565b905060006132338383610f72565b9050600061324a613243896127d4565b84906130b6565b90506132568282610f88565b9c9b505050505050505050505050565b6000818060200190518101906108b091906148b5565b606060008280602001905181019061319e919061485f565b60006060845167ffffffffffffffff811180156132b057600080fd5b506040519080825280602002602001820160405280156132da578160200160208202803683370190505b5090506000805b885181101561339f5761333a8982815181106132f957fe5b60200260200101516131ba89848151811061331057fe5b60200260200101518c858151811061332457fe5b6020026020010151610f7290919063ffffffff16565b83828151811061334657fe5b60200260200101818152505061339561338e89838151811061336457fe5b602002602001015185848151811061337857fe5b60200260200101516130b690919063ffffffff16565b8390610f88565b91506001016132e1565b5060006133b089898986868a61379e565b90506133c56133be826127d4565b87906130b6565b9998505050505050505050565b606060008280602001905181019061319e919061497e565b60006060845167ffffffffffffffff8111801561340657600080fd5b50604051908082528060200260200182016040528015613430578160200160208202803683370190505b5090506000805b88518110156134de5761349689828151811061344f57fe5b602002602001015161349089848151811061346657fe5b60200260200101518c858151811061347a57fe5b6020026020010151610f8890919063ffffffff16565b90612ec5565b8382815181106134a257fe5b6020026020010181815250506134d461338e8983815181106134c057fe5b602002602001015185848151811061223a57fe5b9150600101613437565b5060006134ef89898986868a6138c3565b90506000670de0b6b3a76400008211613509576000612738565b612738877ffffffffffffffffffffffffffffffffffffffffffffffffff21f494c589c0000840161269d565b6000808280602001905181019061319e91906149b8565b60008061355d846131ba8188610f88565b90506135766729a2241af62c00008211156101336110e6565b600061358d6131f0670de0b6b3a7640000896127e6565b905060006135ad6135a683670de0b6b3a7640000610f72565b8a906130b6565b905060006135bd61321e8a6127d4565b905060006135cb8383610f72565b9050600061324a6135db896127d4565b84906127e6565b6000818060200190518101906108b0919061499c565b6060600061360683856127e6565b9050845167ffffffffffffffff8111801561362057600080fd5b5060405190808252806020026020018201604052801561364a578160200160208202803683370190505b50915060005b855181101561226f576136698287838151811061337857fe5b83828151811061367557fe5b6020908102919091010152600101613650565b60008161369e5750670de0b6b3a76400006106aa565b826136ab575060006106aa565b6136bb60ff84901c1560066110e6565b826136e1770bce5086492111aea88f4bb1ca6bcf584181ea8059f76532841060076110e6565b826000670c7d713b49da0000831380156137025750670f43fc2c04ee000083125b15613739576000613712846139cf565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050613747565b8161374384613b06565b0290505b670de0b6b3a764000090056137957ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc0000821280159061378e575068070c1cc73b00c800008213155b60086110e6565b6105f881613ea6565b670de0b6b3a764000060005b87518110156138b85760008582815181106137c157fe5b602002602001015185111561382b5760006137ea6137de876127d4565b8b858151811061223a57fe5b905060006137fe828a868151811061332457fe5b9050600061381561380e886127d4565b83906127e6565b90506138218382610f88565b9350505050613850565b86828151811061383757fe5b60200260200101519050806000141561385057506138b0565b60006138798a848151811061386157fe5b6020026020010151613490848d878151811061332457fe5b90506138ab6138a48a858151811061388d57fe5b6020026020010151836130ee90919063ffffffff16565b859061269d565b935050505b6001016137aa565b509695505050505050565b670de0b6b3a764000060005b87518110156138b8576000848683815181106138e757fe5b60200260200101511115613960576000670de0b6b3a7640000861161390d576000613927565b613927670de0b6b3a764000087038b858151811061223a57fe5b905060006139458661393f848c888151811061332457fe5b906130b6565b9050613957818a868151811061332457fe5b92505050613985565b86828151811061396c57fe5b60200260200101519050806000141561398557506139c7565b60006139ae8a848151811061399657fe5b6020026020010151613490848d878151811061347a57fe5b90506139c26138a48a858151811061388d57fe5b935050505b6001016138cf565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401907fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f00000000085010281613a1b57fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a7640000821215613b4357613b39826ec097ce7bc90715b34b9f100000000081613b3357fe5b05613b06565b6000039050610a43565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c00000000000008312613b9457770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e0000008312613bcc576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312613c14576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312613c4f576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf8508312613c8657693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e28312613cbd57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d038312613cf25768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb417461211108312613d1d57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312613d52576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312613d87576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312613dbb576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac8312613def576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d631000008086030281613e1257fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b6000613eeb7ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc00008312158015613ee4575068070c1cc73b00c800008313155b60096110e6565b6000821215613f1f57613f0082600003613ea6565b6ec097ce7bc90715b34b9f100000000081613f1757fe5b059050610a43565b60006806f05b59d3b20000008312613f7557507ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e00000090910190770195e54c5dd42177f53a27172fa9ec630262827000000000613fc1565b6803782dace9d90000008312613fbd57507ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000909101906b1425982cf597cd205cef7380613fc1565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412614027577fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e0000009093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412614079577fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf0000009093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b1880000084126140c9577fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e78000009093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412614119577fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c000009093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412614168577ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000009093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d6310000084126141b7577ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000009093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412614206577ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800009093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412614255577ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00009093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b80356106aa81614edc565b600082601f830112614391578081fd5b81356143a461439f82614eb0565b614e89565b8181529150602080830190848101818402860182018710156143c557600080fd5b60005b848110156143e4578135845292820192908201906001016143c8565b505050505092915050565b600082601f8301126143ff578081fd5b815161440d61439f82614eb0565b81815291506020808301908481018184028601820187101561442e57600080fd5b60005b848110156143e457815184529282019290820190600101614431565b600082601f83011261445d578081fd5b813567ffffffffffffffff811115614473578182fd5b6144a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614e89565b91508082528360208285010111156144bb57600080fd5b8060208401602084013760009082016020015292915050565b8051600381106106aa57600080fd5b8051600481106106aa57600080fd5b8035600281106106aa57600080fd5b6000610120808385031215614514578182fd5b61451d81614e89565b91505061452a83836144f2565b81526145398360208401614376565b602082015261454b8360408401614376565b6040820152606082013560608201526080820135608082015260a082013560a082015261457b8360c08401614376565b60c082015261458d8360e08401614376565b60e08201526101008083013567ffffffffffffffff8111156145ae57600080fd5b6145ba8582860161444d565b82840152505092915050565b6000602082840312156145d7578081fd5b81356108b081614edc565b600080604083850312156145f4578081fd5b82356145ff81614edc565b9150602083013561460f81614edc565b809150509250929050565b60008060006060848603121561462e578081fd5b833561463981614edc565b9250602084013561464981614edc565b929592945050506040919091013590565b600080600080600080600060e0888a031215614674578283fd5b873561467f81614edc565b9650602088013561468f81614edc565b9550604088013594506060880135935060808801356146ad81614eff565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156146dc578182fd5b82356146e781614edc565b946020939093013593505050565b600060208284031215614706578081fd5b81356108b081614ef1565b600060208284031215614722578081fd5b81516108b081614ef1565b60006020828403121561473e578081fd5b5051919050565b600080600080600080600060e0888a03121561475f578081fd5b87359650602088013561477181614edc565b9550604088013561478181614edc565b9450606088013567ffffffffffffffff8082111561479d578283fd5b6147a98b838c01614381565b955060808a0135945060a08a0135935060c08a01359150808211156147cc578283fd5b506147d98a828b0161444d565b91505092959891949750929550565b6000602082840312156147f9578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108b0578182fd5b600060208284031215614839578081fd5b81516108b081614edc565b600060208284031215614855578081fd5b6108b083836144d4565b600080600060608486031215614873578081fd5b61487d85856144d4565b9250602084015167ffffffffffffffff811115614898578182fd5b6148a4868287016143ef565b925050604084015190509250925092565b600080604083850312156148c7578182fd5b6148d184846144d4565b9150602083015190509250929050565b6000806000606084860312156148f5578081fd5b6148ff85856144d4565b925060208401519150604084015190509250925092565b600060208284031215614927578081fd5b6108b083836144e3565b60008060408385031215614943578182fd5b61494d84846144e3565b9150602083015167ffffffffffffffff811115614968578182fd5b614974858286016143ef565b9150509250929050565b600080600060608486031215614992578081fd5b61487d85856144e3565b600080604083850312156149ae578182fd5b6148d184846144e3565b6000806000606084860312156149cc578081fd5b6148ff85856144e3565b600080600080608085870312156149eb578182fd5b843567ffffffffffffffff80821115614a02578384fd5b614a0e88838901614501565b95506020870135915080821115614a23578384fd5b50614a3087828801614381565b949794965050505060408301359260600135919050565b600080600060608486031215614a5b578081fd5b833567ffffffffffffffff811115614a71578182fd5b614a7d86828701614501565b9660208601359650604090950135949350505050565b600060208284031215614aa4578081fd5b5035919050565b600080600060608486031215614abf578081fd5b8335925060208401359150604084013567ffffffffffffffff811115614ae3578182fd5b614aef86828701614381565b9150509250925092565b600060208284031215614b0a578081fd5b81516108b081614eff565b60008060408385031215614b27578182fd5b8251614b3281614eff565b6020939093015192949293505050565b6000815180845260208085019450808401835b8381101561102d57815187529582019590820190600101614b55565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b6000828483379101908152919050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6000602082526108b06020830184614b42565b600060408252614c216040830185614b42565b8281036020840152610ca48185614b42565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60006060820185835260206060818501528186518084526080860191508288019350845b81811015614cfa57614ce88551614ed0565b83529383019391830191600101614cd6565b505084810360408601528551808252908201925081860190845b81811015612bbf57614d268351614ed0565b85529383019391830191600101614d14565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6020810160038310614d9057fe5b91905290565b6000602080835283518082850152825b81811015614dc257858101830151858201604001528201614da6565b81811115614dd35783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600083825260406020830152610f596040830184614b42565b600084825283602083015260606040830152610ca46060830184614b42565b600085825284602083015260806040830152614e5e6080830185614b42565b8281036060840152614e708185614b42565b979650505050505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614ea857600080fd5b604052919050565b600067ffffffffffffffff821115614ec6578081fd5b5060209081020190565b6001600160a01b031690565b6001600160a01b03811681146108e857600080fd5b80151581146108e857600080fd5b60ff811681146108e857600080fdfea2646970667358221220c2d7f35fc038c67b54dad1329bf7abff8824c1e2a910397657eefdf60f958db364736f6c63430007010033",
  "devdoc": {
    "details": "Weighted Pool with mutable weights, designed to support V2 Liquidity Bootstrapping.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval. This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this contract inherits."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Override to allow decreasing allowance by more than the current amount (setting it to zero)"
      },
      "disableRecoveryMode()": {
        "details": "Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly necessary."
      },
      "enableRecoveryMode()": {
        "details": "Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may perform certain operations in a \"safer\" manner that is less likely to fail, in an attempt to keep the pool running, even in a pathological state. Unlike the Pause operation, which is only available during a short window after factory deployment, Recovery Mode can always be enabled."
      },
      "getActionId(bytes4)": {
        "details": "Returns the action identifier associated with the external function described by `selector`."
      },
      "getDomainSeparator()": {
        "details": "Returns the EIP712 domain separator."
      },
      "getGradualWeightUpdateParams()": {
        "details": "Return start time, end time, and endWeights as an array. Current weights should be retrieved via `getNormalizedWeights()`."
      },
      "getPausedState()": {
        "details": "Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period."
      },
      "getProtocolFeesCollector()": {
        "details": "This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)"
      },
      "getScalingFactors()": {
        "details": "Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically not relevant for outside parties, but which might be useful for some types of Pools."
      },
      "getSwapFeePercentage()": {
        "details": "This is stored separately, as there is no more room in `_poolState`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "details": "This function can only be called from the Vault, from `exitPool`."
      },
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "details": "This function can only be called from the Vault, from `joinPool`."
      },
      "pause()": {
        "details": "This is a permissioned function that will only work during the Pause Window set during pool factory deployment (see `TemporarilyPausable`)."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "details": "Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the Vault with the same arguments, along with the number of tokens `recipient` would receive. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
      },
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "details": "Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the Vault with the same arguments, along with the number of tokens `sender` would have to supply. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
      },
      "setSwapFeePercentage(uint256)": {
        "details": "This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}. The total supply should only be read using this function Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other storage values)."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance"
      },
      "unpause()": {
        "details": "This is a permissioned function that will only work on a paused pool within the Buffer Period set during pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause after the Buffer Period expires."
      },
      "updateWeightsGradually(uint256,uint256,uint256[])": {
        "details": "Weights will change from the current weights to the given endWeights, over startTime to endTime."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "disableRecoveryMode()": {
        "notice": "Disable recovery mode, which disables the special safe exit path for LPs."
      },
      "enableRecoveryMode()": {
        "notice": "Enable recovery mode, which enables a special safe exit path for LPs."
      },
      "getNormalizedWeights()": {
        "notice": "Return the current token weights."
      },
      "getPoolId()": {
        "notice": "Return the pool id."
      },
      "getProtocolFeesCollector()": {
        "notice": "Return the ProtocolFeesCollector contract."
      },
      "getSwapEnabled()": {
        "notice": "Return whether swaps are enabled or not for the given pool."
      },
      "getSwapFeePercentage()": {
        "notice": "Return the current value of the swap fee percentage."
      },
      "inRecoveryMode()": {
        "notice": "Returns whether the pool is in Recovery Mode."
      },
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "notice": "Vault hook for removing liquidity from a pool."
      },
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "notice": "Vault hook for adding liquidity to a pool (including the first time, \"initializing\" the pool)."
      },
      "pause()": {
        "notice": "Pause the pool: an emergency action which disables all pool functions."
      },
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "notice": "\"Dry run\" `onExitPool`."
      },
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
        "notice": "\"Dry run\" `onJoinPool`."
      },
      "setSwapEnabled(bool)": {
        "notice": "Pause/unpause trading."
      },
      "setSwapFeePercentage(uint256)": {
        "notice": "Set the swap fee percentage."
      },
      "unpause()": {
        "notice": "Reverse a `pause` operation, and restore a pool to normal functionality."
      },
      "updateWeightsGradually(uint256,uint256,uint256[])": {
        "notice": "Schedule a gradual weight change."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9756,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9762,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9764,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9766,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 9768,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9770,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 6143,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_nextNonce",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6925,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 24711,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_swapFeePercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 24729,
        "contract": "contracts/lbp/LiquidityBootstrappingPool.sol:LiquidityBootstrappingPool",
        "label": "_poolState",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}