{
  "language": "Solidity",
  "sources": {
    "contracts/BalancerPoolToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './openzeppelin/ERC20.sol';\r\nimport './openzeppelin/ERC20Permit.sol';\r\n\r\n/**\r\n * @title Highly opinionated token implementation\r\n * @author Balancer Labs\r\n * @dev\r\n * - Includes functions to increase and decrease allowance as a workaround\r\n *   for the well-known issue with `approve`:\r\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\r\n *   decreased by calls to transferFrom\r\n * - Lets a token holder use `transferFrom` to send their own tokens,\r\n *   without first setting allowance\r\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\r\n */\r\ncontract BalancerPoolToken is ERC20, ERC20Permit {\r\n    constructor(string memory tokenName, string memory tokenSymbol)\r\n        ERC20(tokenName, tokenSymbol)\r\n        ERC20Permit(tokenName)\r\n    {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    // Overrides\r\n\r\n    /**\r\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint256 currentAllowance = allowance(sender, msg.sender);\r\n        _require(\r\n            msg.sender == sender || currentAllowance >= amount,\r\n            Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE\r\n        );\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\r\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\r\n     */\r\n    function decreaseAllowance(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = allowance(msg.sender, spender);\r\n\r\n        if (amount >= currentAllowance) {\r\n            _approve(msg.sender, spender, 0);\r\n        } else {\r\n            // No risk of underflow due to if condition\r\n            _approve(msg.sender, spender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\r\n        _mint(recipient, amount);\r\n    }\r\n\r\n    function _burnPoolTokens(address sender, uint256 amount) internal {\r\n        _burn(sender, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/BaseMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './BasePool.sol';\r\nimport './interfaces/IMinimalSwapInfoPool.sol';\r\n\r\n/**\r\n * @dev Extension of `BasePool`, adding a handler for `IMinimalSwapInfoPool.onSwap`.\r\n *\r\n * Derived contracts must call `BasePool`'s constructor, and implement `_onSwapGivenIn` and `_onSwapGivenOut` along with\r\n * `BasePool`'s virtual functions. Inheriting from this contract lets derived contracts choose the Two Token or Minimal\r\n * Swap Info specialization settings.\r\n */\r\nabstract contract BaseMinimalSwapInfoPool is IMinimalSwapInfoPool, BasePool {\r\n    // Swap Hooks\r\n\r\n    function onSwap(\r\n        SwapRequest memory request,\r\n        uint256 balanceTokenIn,\r\n        uint256 balanceTokenOut\r\n    ) public virtual override returns (uint256) {\r\n        uint256 scalingFactorTokenIn = _scalingFactor(request.tokenIn);\r\n        uint256 scalingFactorTokenOut = _scalingFactor(request.tokenOut);\r\n\r\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\r\n            // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\r\n            request.amount = _subtractSwapFeeAmount(request.amount);\r\n\r\n            // All token amounts are upscaled.\r\n            balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\r\n            balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\r\n            request.amount = _upscale(request.amount, scalingFactorTokenIn);\r\n\r\n            uint256 amountOut = _onSwapGivenIn(\r\n                request,\r\n                balanceTokenIn,\r\n                balanceTokenOut\r\n            );\r\n\r\n            // amountOut tokens are exiting the Pool, so we round down.\r\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\r\n        } else {\r\n            // All token amounts are upscaled.\r\n            balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\r\n            balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\r\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\r\n\r\n            uint256 amountIn = _onSwapGivenOut(\r\n                request,\r\n                balanceTokenIn,\r\n                balanceTokenOut\r\n            );\r\n\r\n            // amountIn tokens are entering the Pool, so we round up.\r\n            amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\r\n\r\n            // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\r\n            return _addSwapFeeAmount(amountIn);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens entering the Pool is known.\r\n     *\r\n     * Returns the amount of tokens that will be taken from the Pool in return.\r\n     *\r\n     * All amounts inside `swapRequest`, `balanceTokenIn` and `balanceTokenOut` are upscaled. The swap fee has already\r\n     * been deducted from `swapRequest.amount`.\r\n     *\r\n     * The return value is also considered upscaled, and will be downscaled (rounding down) before returning it to the\r\n     * Vault.\r\n     */\r\n    function _onSwapGivenIn(\r\n        SwapRequest memory swapRequest,\r\n        uint256 balanceTokenIn,\r\n        uint256 balanceTokenOut\r\n    ) internal virtual returns (uint256);\r\n\r\n    /*\r\n     * @dev Called when a swap with the Pool occurs, where the amount of tokens exiting the Pool is known.\r\n     *\r\n     * Returns the amount of tokens that will be granted to the Pool in return.\r\n     *\r\n     * All amounts inside `swapRequest`, `balanceTokenIn` and `balanceTokenOut` are upscaled.\r\n     *\r\n     * The return value is also considered upscaled, and will be downscaled (rounding up) before applying the swap fee\r\n     * and returning it to the Vault.\r\n     */\r\n    function _onSwapGivenOut(\r\n        SwapRequest memory swapRequest,\r\n        uint256 balanceTokenIn,\r\n        uint256 balanceTokenOut\r\n    ) internal virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/BasePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './helpers/Math.sol';\r\nimport './helpers/FixedPoint.sol';\r\nimport './helpers/InputHelpers.sol';\r\nimport './helpers/TemporarilyPausable.sol';\r\nimport './helpers/WordCodec.sol';\r\nimport './openzeppelin/ERC20.sol';\r\n\r\nimport './interfaces/IVault.sol';\r\nimport './interfaces/IBasePool.sol';\r\n\r\nimport './interfaces/IAssetManager.sol';\r\n\r\nimport './BalancerPoolToken.sol';\r\nimport './BasePoolAuthorization.sol';\r\n\r\n// solhint-disable max-states-count\r\n\r\n/**\r\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional\r\n * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\r\n *\r\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\r\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\r\n * `whenNotPaused` modifier.\r\n *\r\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\r\n *\r\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\r\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\r\n * and implement the swap callbacks themselves.\r\n */\r\nabstract contract BasePool is\r\n    IBasePool,\r\n    BasePoolAuthorization,\r\n    BalancerPoolToken,\r\n    TemporarilyPausable\r\n{\r\n    using WordCodec for bytes32;\r\n    using FixedPoint for uint256;\r\n\r\n    uint256 private constant _MIN_TOKENS = 2;\r\n\r\n    // 1e18 corresponds to 1.0, or a 100% fee\r\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\r\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10%\r\n\r\n    uint256 private constant _MINIMUM_BPT = 1e6;\r\n\r\n    // Storage slot that can be used to store unrelated pieces of information. In particular, by default is used\r\n    // to store only the swap fee percentage of a pool. But it can be extended to store some more pieces of information.\r\n    // The swap fee percentage is stored in the most-significant 64 bits, therefore the remaining 192 bits can be\r\n    // used to store any other piece of information.\r\n    bytes32 private _miscData;\r\n    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 192;\r\n\r\n    IVault private immutable _vault;\r\n    bytes32 private immutable _poolId;\r\n\r\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\r\n\r\n    constructor(\r\n        IVault vault,\r\n        IVault.PoolSpecialization specialization,\r\n        string memory name,\r\n        string memory symbol,\r\n        IERC20[] memory tokens,\r\n        address[] memory assetManagers,\r\n        uint256 swapFeePercentage,\r\n        uint256 pauseWindowDuration,\r\n        uint256 bufferPeriodDuration,\r\n        address owner\r\n    )\r\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\r\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\r\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\r\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\r\n        // if the selectors match, preventing accidental errors.\r\n        Authentication(bytes32(uint256(msg.sender)))\r\n        BalancerPoolToken(name, symbol)\r\n        BasePoolAuthorization(owner)\r\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\r\n    {\r\n        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\r\n        _require(tokens.length <= _getMaxTokens(), Errors.MAX_TOKENS);\r\n\r\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\r\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\r\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\r\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\r\n        // order of token-specific parameters (such as token weights) will not change.\r\n        InputHelpers.ensureArrayIsSorted(tokens);\r\n\r\n        _setSwapFeePercentage(swapFeePercentage);\r\n\r\n        bytes32 poolId = vault.registerPool(specialization);\r\n\r\n        vault.registerTokens(poolId, tokens, assetManagers);\r\n\r\n        // Set immutable state variables - these cannot be read from during construction\r\n        _vault = vault;\r\n        _poolId = poolId;\r\n    }\r\n\r\n    // Getters / Setters\r\n\r\n    function getVault() public view returns (IVault) {\r\n        return _vault;\r\n    }\r\n\r\n    function getPoolId() public view override returns (bytes32) {\r\n        return _poolId;\r\n    }\r\n\r\n    function _getTotalTokens() internal view virtual returns (uint256);\r\n\r\n    function _getMaxTokens() internal pure virtual returns (uint256);\r\n\r\n    function getSwapFeePercentage() public view returns (uint256) {\r\n        return _miscData.decodeUint64(_SWAP_FEE_PERCENTAGE_OFFSET);\r\n    }\r\n\r\n    function setSwapFeePercentage(uint256 swapFeePercentage)\r\n        external\r\n        virtual\r\n        authenticate\r\n        whenNotPaused\r\n    {\r\n        _setSwapFeePercentage(swapFeePercentage);\r\n    }\r\n\r\n    function _setSwapFeePercentage(uint256 swapFeePercentage) private {\r\n        _require(\r\n            swapFeePercentage >= _MIN_SWAP_FEE_PERCENTAGE,\r\n            Errors.MIN_SWAP_FEE_PERCENTAGE\r\n        );\r\n        _require(\r\n            swapFeePercentage <= _MAX_SWAP_FEE_PERCENTAGE,\r\n            Errors.MAX_SWAP_FEE_PERCENTAGE\r\n        );\r\n\r\n        _miscData = _miscData.insertUint64(\r\n            swapFeePercentage,\r\n            _SWAP_FEE_PERCENTAGE_OFFSET\r\n        );\r\n        emit SwapFeePercentageChanged(swapFeePercentage);\r\n    }\r\n\r\n    function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig)\r\n        public\r\n        virtual\r\n        authenticate\r\n        whenNotPaused\r\n    {\r\n        _setAssetManagerPoolConfig(token, poolConfig);\r\n    }\r\n\r\n    function _setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig)\r\n        private\r\n    {\r\n        bytes32 poolId = getPoolId();\r\n        (, , , address assetManager) = getVault().getPoolTokenInfo(\r\n            poolId,\r\n            token\r\n        );\r\n\r\n        IAssetManager(assetManager).setConfig(poolId, poolConfig);\r\n    }\r\n\r\n    function setPaused(bool paused) external authenticate {\r\n        _setPaused(paused);\r\n    }\r\n\r\n    function _isOwnerOnlyAction(bytes32 actionId)\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            (actionId == getActionId(this.setSwapFeePercentage.selector)) ||\r\n            (actionId == getActionId(this.setAssetManagerPoolConfig.selector));\r\n    }\r\n\r\n    function _getMiscData() internal view returns (bytes32) {\r\n        return _miscData;\r\n    }\r\n\r\n    /**\r\n     * Inserts data into the least-significant 192 bits of the misc data storage slot.\r\n     * Note that the remaining 64 bits are used for the swap fee percentage and cannot be overloaded.\r\n     */\r\n    function _setMiscData(bytes32 newData) internal {\r\n        _miscData = _miscData.insertBits192(newData, 0);\r\n    }\r\n\r\n    // Join / Exit Hooks\r\n\r\n    modifier onlyVault(bytes32 poolId) {\r\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\r\n        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\r\n        _;\r\n    }\r\n\r\n    function onJoinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        onlyVault(poolId)\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory scalingFactors = _scalingFactors();\r\n\r\n        if (totalSupply() == 0) {\r\n            (\r\n                uint256 bptAmountOut,\r\n                uint256[] memory amountsIn\r\n            ) = _onInitializePool(\r\n                    poolId,\r\n                    sender,\r\n                    recipient,\r\n                    scalingFactors,\r\n                    userData\r\n                );\r\n\r\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\r\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\r\n            // ever being fully drained.\r\n            _require(bptAmountOut >= _MINIMUM_BPT, Errors.MINIMUM_BPT);\r\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\r\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\r\n\r\n            // amountsIn are amounts entering the Pool, so we round up.\r\n            _downscaleUpArray(amountsIn, scalingFactors);\r\n\r\n            return (amountsIn, new uint256[](_getTotalTokens()));\r\n        } else {\r\n            _upscaleArray(balances, scalingFactors);\r\n            (\r\n                uint256 bptAmountOut,\r\n                uint256[] memory amountsIn,\r\n                uint256[] memory dueProtocolFeeAmounts\r\n            ) = _onJoinPool(\r\n                    poolId,\r\n                    sender,\r\n                    recipient,\r\n                    balances,\r\n                    lastChangeBlock,\r\n                    protocolSwapFeePercentage,\r\n                    scalingFactors,\r\n                    userData\r\n                );\r\n\r\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\r\n\r\n            _mintPoolTokens(recipient, bptAmountOut);\r\n\r\n            // amountsIn are amounts entering the Pool, so we round up.\r\n            _downscaleUpArray(amountsIn, scalingFactors);\r\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\r\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\r\n\r\n            return (amountsIn, dueProtocolFeeAmounts);\r\n        }\r\n    }\r\n\r\n    function onExitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        onlyVault(poolId)\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory scalingFactors = _scalingFactors();\r\n        _upscaleArray(balances, scalingFactors);\r\n\r\n        (\r\n            uint256 bptAmountIn,\r\n            uint256[] memory amountsOut,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        ) = _onExitPool(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                balances,\r\n                lastChangeBlock,\r\n                protocolSwapFeePercentage,\r\n                scalingFactors,\r\n                userData\r\n            );\r\n\r\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\r\n\r\n        _burnPoolTokens(sender, bptAmountIn);\r\n\r\n        // Both amountsOut and dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\r\n        _downscaleDownArray(amountsOut, scalingFactors);\r\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\r\n\r\n        return (amountsOut, dueProtocolFeeAmounts);\r\n    }\r\n\r\n    // Query functions\r\n\r\n    /**\r\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\r\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\r\n     *\r\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\r\n     * data, such as the protocol swap fee percentage and Pool balances.\r\n     *\r\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\r\n     * explicitly use eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryJoin(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\r\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\r\n\r\n        _queryAction(\r\n            poolId,\r\n            sender,\r\n            recipient,\r\n            balances,\r\n            lastChangeBlock,\r\n            protocolSwapFeePercentage,\r\n            userData,\r\n            _onJoinPool,\r\n            _downscaleUpArray\r\n        );\r\n\r\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\r\n        // and we don't need to return anything here - it just silences compiler warnings.\r\n        return (bptOut, amountsIn);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\r\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\r\n     *\r\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\r\n     * data, such as the protocol swap fee percentage and Pool balances.\r\n     *\r\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\r\n     * explicitly use eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryExit(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\r\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\r\n\r\n        _queryAction(\r\n            poolId,\r\n            sender,\r\n            recipient,\r\n            balances,\r\n            lastChangeBlock,\r\n            protocolSwapFeePercentage,\r\n            userData,\r\n            _onExitPool,\r\n            _downscaleDownArray\r\n        );\r\n\r\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\r\n        // and we don't need to return anything here - it just silences compiler warnings.\r\n        return (bptIn, amountsOut);\r\n    }\r\n\r\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\r\n    // upscaled.\r\n\r\n    /**\r\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\r\n     *\r\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\r\n     *\r\n     * Minted BPT will be sent to `recipient`, except for _MINIMUM_BPT, which will be deducted from this amount and sent\r\n     * to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP from\r\n     * ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire Pool's\r\n     * lifetime.\r\n     *\r\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\r\n     * be downscaled (rounding up) before being returned to the Vault.\r\n     */\r\n    function _onInitializePool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory scalingFactors,\r\n        bytes memory userData\r\n    )\r\n        internal\r\n        virtual\r\n        returns (uint256 bptAmountOut, uint256[] memory amountsIn);\r\n\r\n    /**\r\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\r\n     *\r\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\r\n     * tokens to pay in protocol swap fees.\r\n     *\r\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\r\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\r\n     *\r\n     * Minted BPT will be sent to `recipient`.\r\n     *\r\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\r\n     * be downscaled (rounding up) before being returned to the Vault.\r\n     *\r\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\r\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\r\n     */\r\n    function _onJoinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        uint256[] memory scalingFactors,\r\n        bytes memory userData\r\n    )\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 bptAmountOut,\r\n            uint256[] memory amountsIn,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        );\r\n\r\n    /**\r\n     * @dev Called whenever the Pool is exited.\r\n     *\r\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\r\n     * the number of tokens to pay in protocol swap fees.\r\n     *\r\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\r\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\r\n     *\r\n     * BPT will be burnt from `sender`.\r\n     *\r\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\r\n     * (rounding down) before being returned to the Vault.\r\n     *\r\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\r\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\r\n     */\r\n    function _onExitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        uint256[] memory scalingFactors,\r\n        bytes memory userData\r\n    )\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 bptAmountIn,\r\n            uint256[] memory amountsOut,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        );\r\n\r\n    // Internal functions\r\n\r\n    /**\r\n     * @dev Adds swap fee amount to `amount`, returning a higher value.\r\n     */\r\n    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {\r\n        // This returns amount + fee amount, so we round up (favoring a higher fee amount).\r\n        return amount.divUp(FixedPoint.ONE.sub(getSwapFeePercentage()));\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts swap fee amount from `amount`, returning a lower value.\r\n     */\r\n    function _subtractSwapFeeAmount(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // This returns amount - fee amount, so we round up (favoring a higher fee amount).\r\n        uint256 feeAmount = amount.mulUp(getSwapFeePercentage());\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    // Scaling\r\n\r\n    /**\r\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\r\n     * it had 18 decimals.\r\n     */\r\n    function _computeScalingFactor(IERC20 token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Tokens that don't implement the `decimals` method are not supported.\r\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\r\n\r\n        // Tokens with more than 18 decimals are not supported.\r\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\r\n        return FixedPoint.ONE * 10**decimalsDifference;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\r\n     * Pool.\r\n     *\r\n     * All scaling factors are fixed-point values with 18 decimals, to allow for this function to be overridden by\r\n     * derived contracts that need to apply further scaling, making these factors potentially non-integer.\r\n     *\r\n     * The largest 'base' scaling factor (i.e. in tokens with less than 18 decimals) is 10**18, which in fixed-point is\r\n     * 10**36. This value can be multiplied with a 112 bit Vault balance with no overflow by a factor of ~1e7, making\r\n     * even relatively 'large' factors safe to use.\r\n     *\r\n     * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).\r\n     */\r\n    function _scalingFactor(IERC20 token)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault\r\n     * will always pass balances in this order when calling any of the Pool hooks.\r\n     */\r\n    function _scalingFactors() internal view virtual returns (uint256[] memory);\r\n\r\n    function getScalingFactors() external view returns (uint256[] memory) {\r\n        return _scalingFactors();\r\n    }\r\n\r\n    /**\r\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\r\n     * scaling or not.\r\n     */\r\n    function _upscale(uint256 amount, uint256 scalingFactor)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\r\n        // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\r\n        // the same direction for all amounts, as the impact of this rounding is expected to be minimal (and there's no\r\n        // rounding error unless `_scalingFactor()` is overriden).\r\n        return FixedPoint.mulDown(amount, scalingFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\r\n     * the `amounts` array.\r\n     */\r\n    function _upscaleArray(\r\n        uint256[] memory amounts,\r\n        uint256[] memory scalingFactors\r\n    ) internal view {\r\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\r\n            amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\r\n     * whether it needed scaling or not. The result is rounded down.\r\n     */\r\n    function _downscaleDown(uint256 amount, uint256 scalingFactor)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return FixedPoint.divDown(amount, scalingFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\r\n     * *mutates* the `amounts` array.\r\n     */\r\n    function _downscaleDownArray(\r\n        uint256[] memory amounts,\r\n        uint256[] memory scalingFactors\r\n    ) internal view {\r\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\r\n            amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\r\n     * whether it needed scaling or not. The result is rounded up.\r\n     */\r\n    function _downscaleUp(uint256 amount, uint256 scalingFactor)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return FixedPoint.divUp(amount, scalingFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\r\n     * *mutates* the `amounts` array.\r\n     */\r\n    function _downscaleUpArray(\r\n        uint256[] memory amounts,\r\n        uint256[] memory scalingFactors\r\n    ) internal view {\r\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\r\n            amounts[i] = FixedPoint.divUp(amounts[i], scalingFactors[i]);\r\n        }\r\n    }\r\n\r\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\r\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\r\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\r\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\r\n        // Governance control.\r\n        return getVault().getAuthorizer();\r\n    }\r\n\r\n    function _queryAction(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData,\r\n        function(\r\n            bytes32,\r\n            address,\r\n            address,\r\n            uint256[] memory,\r\n            uint256,\r\n            uint256,\r\n            uint256[] memory,\r\n            bytes memory\r\n        )\r\n            internal\r\n            returns (uint256, uint256[] memory, uint256[] memory) _action,\r\n        function(uint256[] memory, uint256[] memory)\r\n            internal\r\n            view _downscaleArray\r\n    ) private {\r\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\r\n        // explanation.\r\n\r\n        if (msg.sender != address(this)) {\r\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\r\n            // the preceding if statement will be executed instead.\r\n\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, ) = address(this).call(msg.data);\r\n\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                // This call should always revert to decode the bpt and token amounts from the revert reason\r\n                switch success\r\n                case 0 {\r\n                    // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\r\n                    // stored there as we take full control of the execution and then immediately return.\r\n\r\n                    // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\r\n                    // there was another revert reason and we should forward it.\r\n                    returndatacopy(0, 0, 0x04)\r\n                    let error := and(\r\n                        mload(0),\r\n                        0xffffffff00000000000000000000000000000000000000000000000000000000\r\n                    )\r\n\r\n                    // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\r\n                    if eq(\r\n                        eq(\r\n                            error,\r\n                            0x43adbafb00000000000000000000000000000000000000000000000000000000\r\n                        ),\r\n                        0\r\n                    ) {\r\n                        returndatacopy(0, 0, returndatasize())\r\n                        revert(0, returndatasize())\r\n                    }\r\n\r\n                    // The returndata contains the signature, followed by the raw memory representation of the\r\n                    // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\r\n                    // representation of these.\r\n                    // An ABI-encoded response will include one additional field to indicate the starting offset of\r\n                    // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\r\n                    // returndata.\r\n                    //\r\n                    // In returndata:\r\n                    // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\r\n                    // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\r\n                    //\r\n                    // We now need to return (ABI-encoded values):\r\n                    // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\r\n                    // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\r\n\r\n                    // We copy 32 bytes for the `bptAmount` from returndata into memory.\r\n                    // Note that we skip the first 4 bytes for the error signature\r\n                    returndatacopy(0, 0x04, 32)\r\n\r\n                    // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\r\n                    // the initial 64 bytes.\r\n                    mstore(0x20, 64)\r\n\r\n                    // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\r\n                    // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\r\n                    // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\r\n                    returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\r\n\r\n                    // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\r\n                    // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\r\n                    // error signature.\r\n                    return(0, add(returndatasize(), 28))\r\n                }\r\n                default {\r\n                    // This call should always revert, but we fail nonetheless if that didn't happen\r\n                    invalid()\r\n                }\r\n            }\r\n        } else {\r\n            uint256[] memory scalingFactors = _scalingFactors();\r\n            _upscaleArray(balances, scalingFactors);\r\n\r\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                balances,\r\n                lastChangeBlock,\r\n                protocolSwapFeePercentage,\r\n                scalingFactors,\r\n                userData\r\n            );\r\n\r\n            _downscaleArray(tokenAmounts, scalingFactors);\r\n\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\r\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\r\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\r\n                let size := mul(mload(tokenAmounts), 32)\r\n\r\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\r\n                // will be at least one available slot due to how the memory scratch space works.\r\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\r\n                let start := sub(tokenAmounts, 0x20)\r\n                mstore(start, bptAmount)\r\n\r\n                // We send one extra value for the error signature \"QueryError(uint256,uint256[])\" which is 0x43adbafb\r\n                // We use the previous slot to `bptAmount`.\r\n                mstore(\r\n                    sub(start, 0x20),\r\n                    0x0000000000000000000000000000000000000000000000000000000043adbafb\r\n                )\r\n                start := sub(start, 0x04)\r\n\r\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\r\n                // the `bptAmount`, the array 's length, and the error signature.\r\n                revert(start, add(size, 68))\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/BasePoolAuthorization.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './helpers/Authentication.sol';\r\nimport './interfaces/IAuthorizer.sol';\r\n\r\nimport './BasePool.sol';\r\n\r\n/**\r\n * @dev Base authorization layer implementation for Pools.\r\n *\r\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\r\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\r\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\r\n *\r\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\r\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\r\n */\r\nabstract contract BasePoolAuthorization is Authentication {\r\n    address private immutable _owner;\r\n\r\n    address private constant _DELEGATE_OWNER =\r\n        0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\r\n\r\n    constructor(address owner) {\r\n        _owner = owner;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function getAuthorizer() external view returns (IAuthorizer) {\r\n        return _getAuthorizer();\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address account)\r\n        internal\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\r\n            // Only the owner can perform \"owner only\" actions, unless the owner is delegated.\r\n            return msg.sender == getOwner();\r\n        } else {\r\n            // Non-owner actions are always processed via the Authorizer, as \"owner only\" ones are when delegated.\r\n            return\r\n                _getAuthorizer().canPerform(actionId, account, address(this));\r\n        }\r\n    }\r\n\r\n    function _isOwnerOnlyAction(bytes32 actionId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool);\r\n\r\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\r\n}\r\n"
    },
    "contracts/BaseWeightedPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport './BaseMinimalSwapInfoPool.sol';\nimport './helpers/FixedPoint.sol';\nimport './helpers/InputHelpers.sol';\nimport './WeightedMath.sol';\nimport './WeightedPoolUserDataHelpers.sol';\n\n/**\n * @dev Base class for WeightedPools containing swap, join and exit logic, but leaving storage and management of\n * the weights to subclasses. Derived contracts can choose to make weights immutable, mutable, or even dynamic\n *  based on local or external logic.\n */\nabstract contract BaseWeightedPool is BaseMinimalSwapInfoPool, WeightedMath {\n    using FixedPoint for uint256;\n    using WeightedPoolUserDataHelpers for bytes;\n\n    uint256 private _lastInvariant;\n\n    enum JoinKind {\n        INIT,\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\n        TOKEN_IN_FOR_EXACT_BPT_OUT\n    }\n    enum ExitKind {\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\n        BPT_IN_FOR_EXACT_TOKENS_OUT\n    }\n\n    constructor(\n        IVault vault,\n        string memory name,\n        string memory symbol,\n        IERC20[] memory tokens,\n        address[] memory assetManagers,\n        uint256 swapFeePercentage,\n        uint256 pauseWindowDuration,\n        uint256 bufferPeriodDuration,\n        address owner\n    )\n        BasePool(\n            vault,\n            // Given BaseMinimalSwapInfoPool supports both of these specializations, and this Pool never registers or\n            // deregisters any tokens after construction, picking Two Token when the Pool only has two tokens is free\n            // gas savings.\n            tokens.length == 2\n                ? IVault.PoolSpecialization.TWO_TOKEN\n                : IVault.PoolSpecialization.MINIMAL_SWAP_INFO,\n            name,\n            symbol,\n            tokens,\n            assetManagers,\n            swapFeePercentage,\n            pauseWindowDuration,\n            bufferPeriodDuration,\n            owner\n        )\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    // Virtual functions\n\n    /**\n     * @dev Returns the normalized weight of `token`. Weights are fixed point numbers that sum to FixedPoint.ONE.\n     */\n    function _getNormalizedWeight(IERC20 token)\n        internal\n        view\n        virtual\n        returns (uint256);\n\n    /**\n     * @dev Returns all normalized weights, in the same order as the Pool's tokens.\n     */\n    function _getNormalizedWeights()\n        internal\n        view\n        virtual\n        returns (uint256[] memory);\n\n    /**\n     * @dev Returns all normalized weights, in the same order as the Pool's tokens, along with the index of the token\n     * with the highest weight.\n     */\n    function _getNormalizedWeightsAndMaxWeightIndex()\n        internal\n        view\n        virtual\n        returns (uint256[] memory, uint256);\n\n    function getLastInvariant() external view returns (uint256) {\n        return _lastInvariant;\n    }\n\n    /**\n     * @dev Returns the current value of the invariant.\n     */\n    function getInvariant() public view returns (uint256) {\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\n\n        // Since the Pool hooks always work with upscaled balances, we manually\n        // upscale here for consistency\n        _upscaleArray(balances, _scalingFactors());\n\n        (\n            uint256[] memory normalizedWeights,\n\n        ) = _getNormalizedWeightsAndMaxWeightIndex();\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\n    }\n\n    function getNormalizedWeights() external view returns (uint256[] memory) {\n        return _getNormalizedWeights();\n    }\n\n    // Base Pool handlers\n\n    // Swap\n\n    function _onSwapGivenIn(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) internal view virtual override whenNotPaused returns (uint256) {\n        // Swaps are disabled while the contract is paused.\n\n        return\n            WeightedMath._calcOutGivenIn(\n                currentBalanceTokenIn,\n                _getNormalizedWeight(swapRequest.tokenIn),\n                currentBalanceTokenOut,\n                _getNormalizedWeight(swapRequest.tokenOut),\n                swapRequest.amount\n            );\n    }\n\n    function _onSwapGivenOut(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) internal view virtual override whenNotPaused returns (uint256) {\n        // Swaps are disabled while the contract is paused.\n\n        return\n            WeightedMath._calcInGivenOut(\n                currentBalanceTokenIn,\n                _getNormalizedWeight(swapRequest.tokenIn),\n                currentBalanceTokenOut,\n                _getNormalizedWeight(swapRequest.tokenOut),\n                swapRequest.amount\n            );\n    }\n\n    // Initialize\n\n    function _onInitializePool(\n        bytes32,\n        address,\n        address,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    )\n        internal\n        virtual\n        override\n        whenNotPaused\n        returns (uint256, uint256[] memory)\n    {\n        // It would be strange for the Pool to be paused before it is initialized, but for consistency we prevent\n        // initialization in this case.\n\n        JoinKind kind = userData.joinKind();\n        _require(kind == JoinKind.INIT, Errors.UNINITIALIZED);\n\n        uint256[] memory amountsIn = userData.initialAmountsIn();\n        InputHelpers.ensureInputLengthMatch(\n            _getTotalTokens(),\n            amountsIn.length\n        );\n        _upscaleArray(amountsIn, scalingFactors);\n\n        (\n            uint256[] memory normalizedWeights,\n\n        ) = _getNormalizedWeightsAndMaxWeightIndex();\n\n        uint256 invariantAfterJoin = WeightedMath._calculateInvariant(\n            normalizedWeights,\n            amountsIn\n        );\n\n        // Set the initial BPT to the value of the invariant times the number of tokens. This makes BPT supply more\n        // consistent in Pools with similar compositions but different number of tokens.\n        uint256 bptAmountOut = Math.mul(invariantAfterJoin, _getTotalTokens());\n\n        _lastInvariant = invariantAfterJoin;\n\n        return (bptAmountOut, amountsIn);\n    }\n\n    // Join\n\n    function _onJoinPool(\n        bytes32,\n        address,\n        address,\n        uint256[] memory balances,\n        uint256,\n        uint256 protocolSwapFeePercentage,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    )\n        internal\n        virtual\n        override\n        whenNotPaused\n        returns (\n            uint256,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        // All joins are disabled while the contract is paused.\n\n        (\n            uint256[] memory normalizedWeights,\n            uint256 maxWeightTokenIndex\n        ) = _getNormalizedWeightsAndMaxWeightIndex();\n\n        // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous join\n        // or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids spending gas\n        // computing them on each individual swap\n        uint256 invariantBeforeJoin = WeightedMath._calculateInvariant(\n            normalizedWeights,\n            balances\n        );\n\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\n            balances,\n            normalizedWeights,\n            maxWeightTokenIndex,\n            _lastInvariant,\n            invariantBeforeJoin,\n            protocolSwapFeePercentage\n        );\n\n        // Update current balances by subtracting the protocol fee amounts\n        _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(\n            balances,\n            normalizedWeights,\n            scalingFactors,\n            userData\n        );\n\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the\n        // protocol swap fee amounts due in future joins and exits.\n        _lastInvariant = _invariantAfterJoin(\n            balances,\n            amountsIn,\n            normalizedWeights\n        );\n\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\n    }\n\n    function _doJoin(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    ) private view returns (uint256, uint256[] memory) {\n        JoinKind kind = userData.joinKind();\n\n        if (kind == JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\n            return\n                _joinExactTokensInForBPTOut(\n                    balances,\n                    normalizedWeights,\n                    scalingFactors,\n                    userData\n                );\n        } else if (kind == JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\n            return\n                _joinTokenInForExactBPTOut(\n                    balances,\n                    normalizedWeights,\n                    userData\n                );\n        } else {\n            _revert(Errors.UNHANDLED_JOIN_KIND);\n        }\n    }\n\n    function _joinExactTokensInForBPTOut(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    ) private view returns (uint256, uint256[] memory) {\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData\n            .exactTokensInForBptOut();\n        InputHelpers.ensureInputLengthMatch(\n            _getTotalTokens(),\n            amountsIn.length\n        );\n\n        _upscaleArray(amountsIn, scalingFactors);\n\n        uint256 bptAmountOut = WeightedMath._calcBptOutGivenExactTokensIn(\n            balances,\n            normalizedWeights,\n            amountsIn,\n            totalSupply(),\n            getSwapFeePercentage()\n        );\n\n        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);\n\n        return (bptAmountOut, amountsIn);\n    }\n\n    function _joinTokenInForExactBPTOut(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        bytes memory userData\n    ) private view returns (uint256, uint256[] memory) {\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData\n            .tokenInForExactBptOut();\n        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.\n\n        _require(tokenIndex < _getTotalTokens(), Errors.OUT_OF_BOUNDS);\n\n        uint256[] memory amountsIn = new uint256[](_getTotalTokens());\n        amountsIn[tokenIndex] = WeightedMath._calcTokenInGivenExactBptOut(\n            balances[tokenIndex],\n            normalizedWeights[tokenIndex],\n            bptAmountOut,\n            totalSupply(),\n            getSwapFeePercentage()\n        );\n\n        return (bptAmountOut, amountsIn);\n    }\n\n    // Exit\n\n    function _onExitPool(\n        bytes32,\n        address,\n        address,\n        uint256[] memory balances,\n        uint256,\n        uint256 protocolSwapFeePercentage,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    )\n        internal\n        virtual\n        override\n        returns (\n            uint256 bptAmountIn,\n            uint256[] memory amountsOut,\n            uint256[] memory dueProtocolFeeAmounts\n        )\n    {\n        (\n            uint256[] memory normalizedWeights,\n            uint256 maxWeightTokenIndex\n        ) = _getNormalizedWeightsAndMaxWeightIndex();\n\n        // Exits are not completely disabled while the contract is paused: proportional exits (exact BPT in for tokens\n        // out) remain functional.\n\n        if (_isNotPaused()) {\n            // Due protocol swap fee amounts are computed by measuring the growth of the invariant between the previous\n            // join or exit event and now - the invariant's growth is due exclusively to swap fees. This avoids\n            // spending gas calculating the fees on each individual swap.\n            uint256 invariantBeforeExit = WeightedMath._calculateInvariant(\n                normalizedWeights,\n                balances\n            );\n            dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\n                balances,\n                normalizedWeights,\n                maxWeightTokenIndex,\n                _lastInvariant,\n                invariantBeforeExit,\n                protocolSwapFeePercentage\n            );\n\n            // Update current balances by subtracting the protocol fee amounts\n            _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);\n        } else {\n            // If the contract is paused, swap protocol fee amounts are not charged to avoid extra calculations and\n            // reduce the potential for errors.\n            dueProtocolFeeAmounts = new uint256[](_getTotalTokens());\n        }\n\n        (bptAmountIn, amountsOut) = _doExit(\n            balances,\n            normalizedWeights,\n            scalingFactors,\n            userData\n        );\n\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the\n        // protocol swap fees due in future joins and exits.\n        _lastInvariant = _invariantAfterExit(\n            balances,\n            amountsOut,\n            normalizedWeights\n        );\n\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\n    }\n\n    function _doExit(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    ) private view returns (uint256, uint256[] memory) {\n        ExitKind kind = userData.exitKind();\n\n        if (kind == ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\n            return\n                _exitExactBPTInForTokenOut(\n                    balances,\n                    normalizedWeights,\n                    userData\n                );\n        } else if (kind == ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\n            return _exitExactBPTInForTokensOut(balances, userData);\n        } else {\n            // ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT\n            return\n                _exitBPTInForExactTokensOut(\n                    balances,\n                    normalizedWeights,\n                    scalingFactors,\n                    userData\n                );\n        }\n    }\n\n    function _exitExactBPTInForTokenOut(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        bytes memory userData\n    ) private view whenNotPaused returns (uint256, uint256[] memory) {\n        // This exit function is disabled if the contract is paused.\n\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData\n            .exactBptInForTokenOut();\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\n\n        _require(tokenIndex < _getTotalTokens(), Errors.OUT_OF_BOUNDS);\n\n        // We exit in a single token, so we initialize amountsOut with zeros\n        uint256[] memory amountsOut = new uint256[](_getTotalTokens());\n\n        // And then assign the result to the selected token\n        amountsOut[tokenIndex] = WeightedMath._calcTokenOutGivenExactBptIn(\n            balances[tokenIndex],\n            normalizedWeights[tokenIndex],\n            bptAmountIn,\n            totalSupply(),\n            getSwapFeePercentage()\n        );\n\n        return (bptAmountIn, amountsOut);\n    }\n\n    function _exitExactBPTInForTokensOut(\n        uint256[] memory balances,\n        bytes memory userData\n    ) private view returns (uint256, uint256[] memory) {\n        // This exit function is the only one that is not disabled if the contract is paused: it remains unrestricted\n        // in an attempt to provide users with a mechanism to retrieve their tokens in case of an emergency.\n        // This particular exit function is the only one that remains available because it is the simplest one, and\n        // therefore the one with the lowest likelihood of errors.\n\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\n\n        uint256[] memory amountsOut = WeightedMath\n            ._calcTokensOutGivenExactBptIn(\n                balances,\n                bptAmountIn,\n                totalSupply()\n            );\n        return (bptAmountIn, amountsOut);\n    }\n\n    function _exitBPTInForExactTokensOut(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    ) private view whenNotPaused returns (uint256, uint256[] memory) {\n        // This exit function is disabled if the contract is paused.\n\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData\n            .bptInForExactTokensOut();\n        InputHelpers.ensureInputLengthMatch(\n            amountsOut.length,\n            _getTotalTokens()\n        );\n        _upscaleArray(amountsOut, scalingFactors);\n\n        uint256 bptAmountIn = WeightedMath._calcBptInGivenExactTokensOut(\n            balances,\n            normalizedWeights,\n            amountsOut,\n            totalSupply(),\n            getSwapFeePercentage()\n        );\n        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);\n\n        return (bptAmountIn, amountsOut);\n    }\n\n    // Helpers\n\n    function _getDueProtocolFeeAmounts(\n        uint256[] memory balances,\n        uint256[] memory normalizedWeights,\n        uint256 maxWeightTokenIndex,\n        uint256 previousInvariant,\n        uint256 currentInvariant,\n        uint256 protocolSwapFeePercentage\n    ) private view returns (uint256[] memory) {\n        // Initialize with zeros\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](\n            _getTotalTokens()\n        );\n\n        // Early return if the protocol swap fee percentage is zero, saving gas.\n        if (protocolSwapFeePercentage == 0) {\n            return dueProtocolFeeAmounts;\n        }\n\n        // The protocol swap fees are always paid using the token with the largest weight in the Pool. As this is the\n        // token that is expected to have the largest balance, using it to pay fees should not unbalance the Pool.\n        dueProtocolFeeAmounts[maxWeightTokenIndex] = WeightedMath\n            ._calcDueTokenProtocolSwapFeeAmount(\n                balances[maxWeightTokenIndex],\n                normalizedWeights[maxWeightTokenIndex],\n                previousInvariant,\n                currentInvariant,\n                protocolSwapFeePercentage\n            );\n\n        return dueProtocolFeeAmounts;\n    }\n\n    /**\n     * @dev Returns the value of the invariant given `balances`, assuming they are increased by `amountsIn`. All\n     * amounts are expected to be upscaled.\n     */\n    function _invariantAfterJoin(\n        uint256[] memory balances,\n        uint256[] memory amountsIn,\n        uint256[] memory normalizedWeights\n    ) private view returns (uint256) {\n        _mutateAmounts(balances, amountsIn, FixedPoint.add);\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\n    }\n\n    function _invariantAfterExit(\n        uint256[] memory balances,\n        uint256[] memory amountsOut,\n        uint256[] memory normalizedWeights\n    ) private view returns (uint256) {\n        _mutateAmounts(balances, amountsOut, FixedPoint.sub);\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\n    }\n\n    /**\n     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.\n     *\n     * Equivalent to `amounts = amounts.map(mutation)`.\n     */\n    function _mutateAmounts(\n        uint256[] memory toMutate,\n        uint256[] memory arguments,\n        function(uint256, uint256) pure returns (uint256) mutation\n    ) private view {\n        for (uint256 i = 0; i < _getTotalTokens(); ++i) {\n            toMutate[i] = mutation(toMutate[i], arguments[i]);\n        }\n    }\n\n    /**\n     * @dev This function returns the appreciation of one BPT relative to the\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\n     */\n    function getRate() public view returns (uint256) {\n        // The initial BPT supply is equal to the invariant times the number of tokens.\n        return\n            Math.mul(getInvariant(), _getTotalTokens()).divDown(totalSupply());\n    }\n}\n"
    },
    "contracts/helpers/Authentication.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./BalancerErrors.sol\";\r\nimport \"../interfaces/IAuthentication.sol\";\r\n\r\n/**\r\n * @dev Building block for performing access control on external functions.\r\n *\r\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\r\n * to external functions to only make them callable by authorized accounts.\r\n *\r\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\r\n */\r\nabstract contract Authentication is IAuthentication {\r\n    bytes32 private immutable _actionIdDisambiguator;\r\n\r\n    /**\r\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\r\n     * multi contract systems.\r\n     *\r\n     * There are two main uses for it:\r\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\r\n     *    unique. The contract's own address is a good option.\r\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\r\n     *    shared by the entire family (and no other contract) should be used instead.\r\n     */\r\n    constructor(bytes32 actionIdDisambiguator) {\r\n        _actionIdDisambiguator = actionIdDisambiguator;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\r\n     */\r\n    modifier authenticate() {\r\n        _authenticateCaller();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call the entry point function.\r\n     */\r\n    function _authenticateCaller() internal view {\r\n        bytes32 actionId = getActionId(msg.sig);\r\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\r\n    }\r\n\r\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\r\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\r\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\r\n        // multiple contracts.\r\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\r\n}"
    },
    "contracts/helpers/BalancerErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// solhint-disable\r\n\r\n/**\r\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\r\n * supported.\r\n */\r\nfunction _require(bool condition, uint256 errorCode) pure {\r\n    if (!condition) _revert(errorCode);\r\n}\r\n\r\n/**\r\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\r\n */\r\nfunction _revert(uint256 errorCode) pure {\r\n    // We're going to dynamically create a revert string based on the error code, with the following format:\r\n    // 'BAL#{errorCode}'\r\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\r\n    //\r\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\r\n    // number (8 to 16 bits) than the individual string characters.\r\n    //\r\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\r\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\r\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\r\n    assembly {\r\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\r\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\r\n        // the '0' character.\r\n\r\n        let units := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let tenths := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let hundreds := add(mod(errorCode, 10), 0x30)\r\n\r\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\r\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\r\n        // characters to it, each shifted by a multiple of 8.\r\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\r\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\r\n        // array).\r\n\r\n        let revertReason := shl(\r\n            200,\r\n            add(\r\n                0x42414c23000000,\r\n                add(add(units, shl(8, tenths)), shl(16, hundreds))\r\n            )\r\n        )\r\n\r\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\r\n        // message will have the following layout:\r\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\r\n\r\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\r\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\r\n        mstore(\r\n            0x0,\r\n            0x08c379a000000000000000000000000000000000000000000000000000000000\r\n        )\r\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\r\n        mstore(\r\n            0x04,\r\n            0x0000000000000000000000000000000000000000000000000000000000000020\r\n        )\r\n        // The string length is fixed: 7 characters.\r\n        mstore(0x24, 7)\r\n        // Finally, the string itself is stored.\r\n        mstore(0x44, revertReason)\r\n\r\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\r\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\r\n        revert(0, 100)\r\n    }\r\n}\r\n\r\nlibrary Errors {\r\n    // Math\r\n    uint256 internal constant ADD_OVERFLOW = 0;\r\n    uint256 internal constant SUB_OVERFLOW = 1;\r\n    uint256 internal constant SUB_UNDERFLOW = 2;\r\n    uint256 internal constant MUL_OVERFLOW = 3;\r\n    uint256 internal constant ZERO_DIVISION = 4;\r\n    uint256 internal constant DIV_INTERNAL = 5;\r\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\r\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\r\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\r\n    uint256 internal constant INVALID_EXPONENT = 9;\r\n\r\n    // Input\r\n    uint256 internal constant OUT_OF_BOUNDS = 100;\r\n    uint256 internal constant UNSORTED_ARRAY = 101;\r\n    uint256 internal constant UNSORTED_TOKENS = 102;\r\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\r\n    uint256 internal constant ZERO_TOKEN = 104;\r\n\r\n    // Shared pools\r\n    uint256 internal constant MIN_TOKENS = 200;\r\n    uint256 internal constant MAX_TOKENS = 201;\r\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\r\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\r\n    uint256 internal constant MINIMUM_BPT = 204;\r\n    uint256 internal constant CALLER_NOT_VAULT = 205;\r\n    uint256 internal constant UNINITIALIZED = 206;\r\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\r\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\r\n    uint256 internal constant EXPIRED_PERMIT = 209;\r\n    uint256 internal constant NOT_TWO_TOKENS = 210;\r\n    uint256 internal constant DISABLED = 211;\r\n\r\n    // Pools\r\n    uint256 internal constant MIN_AMP = 300;\r\n    uint256 internal constant MAX_AMP = 301;\r\n    uint256 internal constant MIN_WEIGHT = 302;\r\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\r\n    uint256 internal constant MAX_IN_RATIO = 304;\r\n    uint256 internal constant MAX_OUT_RATIO = 305;\r\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\r\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\r\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\r\n    uint256 internal constant INVALID_TOKEN = 309;\r\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\r\n    uint256 internal constant ZERO_INVARIANT = 311;\r\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\r\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\r\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\r\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\r\n    uint256 internal constant ORACLE_BAD_SECS = 316;\r\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\r\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\r\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\r\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\r\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\r\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\r\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\r\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\r\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\r\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\r\n    uint256 internal constant SWAPS_DISABLED = 327;\r\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\r\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\r\n\r\n    // Lib\r\n    uint256 internal constant REENTRANCY = 400;\r\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\r\n    uint256 internal constant PAUSED = 402;\r\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\r\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\r\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\r\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\r\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\r\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\r\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\r\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\r\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\r\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\r\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\r\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\r\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\r\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\r\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\r\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\r\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\r\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\r\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\r\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\r\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\r\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\r\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\r\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\r\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\r\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\r\n\r\n    // Vault\r\n    uint256 internal constant INVALID_POOL_ID = 500;\r\n    uint256 internal constant CALLER_NOT_POOL = 501;\r\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\r\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\r\n    uint256 internal constant INVALID_SIGNATURE = 504;\r\n    uint256 internal constant EXIT_BELOW_MIN = 505;\r\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\r\n    uint256 internal constant SWAP_LIMIT = 507;\r\n    uint256 internal constant SWAP_DEADLINE = 508;\r\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\r\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\r\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\r\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\r\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\r\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\r\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\r\n    uint256 internal constant INSUFFICIENT_ETH = 516;\r\n    uint256 internal constant UNALLOCATED_ETH = 517;\r\n    uint256 internal constant ETH_TRANSFER = 518;\r\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\r\n    uint256 internal constant TOKENS_MISMATCH = 520;\r\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\r\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\r\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\r\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\r\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\r\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\r\n    uint256 internal constant POOL_NO_TOKENS = 527;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\r\n\r\n    // Fees\r\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\r\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\r\n}\r\n"
    },
    "contracts/helpers/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './LogExpMath.sol';\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n/* solhint-disable private-vars-leading-underscore */\r\n\r\nlibrary FixedPoint {\r\n    uint256 internal constant ONE = 1e18; // 18 decimal places\r\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\r\n\r\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\r\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Fixed Point addition is the same as regular checked addition\r\n\r\n        uint256 c = a + b;\r\n        _require(c >= a, Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Fixed Point addition is the same as regular checked addition\r\n\r\n        _require(b <= a, Errors.SUB_OVERFLOW);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 product = a * b;\r\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\r\n\r\n        return product / ONE;\r\n    }\r\n\r\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 product = a * b;\r\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\r\n\r\n        if (product == 0) {\r\n            return 0;\r\n        } else {\r\n            // The traditional divUp formula is:\r\n            // divUp(x, y) := (x + y - 1) / y\r\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\r\n            // divUp(x, y) := (x - 1) / y + 1\r\n            // Note that this requires x != 0, which we already tested for.\r\n\r\n            return ((product - 1) / ONE) + 1;\r\n        }\r\n    }\r\n\r\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 aInflated = a * ONE;\r\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\r\n\r\n            return aInflated / b;\r\n        }\r\n    }\r\n\r\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 aInflated = a * ONE;\r\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\r\n\r\n            // The traditional divUp formula is:\r\n            // divUp(x, y) := (x + y - 1) / y\r\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\r\n            // divUp(x, y) := (x - 1) / y + 1\r\n            // Note that this requires x != 0, which we already tested for.\r\n\r\n            return ((aInflated - 1) / b) + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\r\n     * the true value (that is, the error function expected - actual is always positive).\r\n     */\r\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 raw = LogExpMath.pow(x, y);\r\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\r\n\r\n        if (raw < maxError) {\r\n            return 0;\r\n        } else {\r\n            return sub(raw, maxError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\r\n     * the true value (that is, the error function expected - actual is always negative).\r\n     */\r\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 raw = LogExpMath.pow(x, y);\r\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\r\n\r\n        return add(raw, maxError);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\r\n     *\r\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\r\n     * prevents intermediate negative values.\r\n     */\r\n    function complement(uint256 x) internal pure returns (uint256) {\r\n        return (x < ONE) ? (ONE - x) : 0;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/InputHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\n\r\nimport './BalancerErrors.sol';\r\n\r\nlibrary InputHelpers {\r\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\r\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureInputLengthMatch(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 c\r\n    ) internal pure {\r\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\r\n        address[] memory addressArray;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addressArray := array\r\n        }\r\n        ensureArrayIsSorted(addressArray);\r\n    }\r\n\r\n    function ensureArrayIsSorted(address[] memory array) internal pure {\r\n        if (array.length < 2) {\r\n            return;\r\n        }\r\n\r\n        address previous = array[0];\r\n        for (uint256 i = 1; i < array.length; ++i) {\r\n            address current = array[i];\r\n            _require(previous < current, Errors.UNSORTED_ARRAY);\r\n            previous = current;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/LogExpMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n// documentation files (the “Software”), to deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\n// Software.\r\n\r\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n/* solhint-disable */\r\n\r\n/**\r\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\r\n *\r\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\r\n * exponentiation and logarithm (where the base is Euler's number).\r\n *\r\n * @author Fernando Martinelli - @fernandomartinelli\r\n * @author Sergio Yuhjtman - @sergioyuhjtman\r\n * @author Daniel Fernandez - @dmf7z\r\n */\r\nlibrary LogExpMath {\r\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\r\n    // two numbers, and multiply by ONE when dividing them.\r\n\r\n    // All arguments and return values are 18 decimal fixed point numbers.\r\n    int256 constant ONE_18 = 1e18;\r\n\r\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\r\n    // case of ln36, 36 decimals.\r\n    int256 constant ONE_20 = 1e20;\r\n    int256 constant ONE_36 = 1e36;\r\n\r\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\r\n    //\r\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\r\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\r\n    // The smallest possible result is 10^(-18), which makes largest negative argument\r\n    // ln(10^(-18)) = -41.446531673892822312.\r\n    // We use 130.0 and -41.0 to have some safety margin.\r\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\r\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\r\n\r\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\r\n    // 256 bit integer.\r\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\r\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\r\n\r\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\r\n\r\n    // 18 decimal constants\r\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\r\n    int256 constant a0 =\r\n        38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\r\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\r\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\r\n\r\n    // 20 decimal constants\r\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\r\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\r\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\r\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\r\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\r\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\r\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\r\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\r\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\r\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\r\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\r\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\r\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\r\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\r\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\r\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\r\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\r\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\r\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\r\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\r\n\r\n    /**\r\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\r\n     *\r\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\r\n     */\r\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (y == 0) {\r\n            // We solve the 0^0 indetermination by making it equal one.\r\n            return uint256(ONE_18);\r\n        }\r\n\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\r\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\r\n        // x^y = exp(y * ln(x)).\r\n\r\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\r\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\r\n        int256 x_int256 = int256(x);\r\n\r\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\r\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\r\n\r\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\r\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\r\n        int256 y_int256 = int256(y);\r\n\r\n        int256 logx_times_y;\r\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\r\n            int256 ln_36_x = _ln_36(x_int256);\r\n\r\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\r\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\r\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\r\n            // (downscaled) last 18 decimals.\r\n            logx_times_y = ((ln_36_x / ONE_18) *\r\n                y_int256 +\r\n                ((ln_36_x % ONE_18) * y_int256) /\r\n                ONE_18);\r\n        } else {\r\n            logx_times_y = _ln(x_int256) * y_int256;\r\n        }\r\n        logx_times_y /= ONE_18;\r\n\r\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\r\n        _require(\r\n            MIN_NATURAL_EXPONENT <= logx_times_y &&\r\n                logx_times_y <= MAX_NATURAL_EXPONENT,\r\n            Errors.PRODUCT_OUT_OF_BOUNDS\r\n        );\r\n\r\n        return uint256(exp(logx_times_y));\r\n    }\r\n\r\n    /**\r\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\r\n     *\r\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\r\n     */\r\n    function exp(int256 x) internal pure returns (int256) {\r\n        _require(\r\n            x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT,\r\n            Errors.INVALID_EXPONENT\r\n        );\r\n\r\n        if (x < 0) {\r\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\r\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\r\n            // Fixed point division requires multiplying by ONE_18.\r\n            return ((ONE_18 * ONE_18) / exp(-x));\r\n        }\r\n\r\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\r\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\r\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\r\n        // decomposition.\r\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\r\n        // decomposition, which will be lower than the smallest x_n.\r\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\r\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\r\n\r\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\r\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\r\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\r\n        // decomposition.\r\n\r\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\r\n        // it and compute the accumulated product.\r\n\r\n        int256 firstAN;\r\n        if (x >= x0) {\r\n            x -= x0;\r\n            firstAN = a0;\r\n        } else if (x >= x1) {\r\n            x -= x1;\r\n            firstAN = a1;\r\n        } else {\r\n            firstAN = 1; // One with no decimal places\r\n        }\r\n\r\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\r\n        // smaller terms.\r\n        x *= 100;\r\n\r\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\r\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\r\n        int256 product = ONE_20;\r\n\r\n        if (x >= x2) {\r\n            x -= x2;\r\n            product = (product * a2) / ONE_20;\r\n        }\r\n        if (x >= x3) {\r\n            x -= x3;\r\n            product = (product * a3) / ONE_20;\r\n        }\r\n        if (x >= x4) {\r\n            x -= x4;\r\n            product = (product * a4) / ONE_20;\r\n        }\r\n        if (x >= x5) {\r\n            x -= x5;\r\n            product = (product * a5) / ONE_20;\r\n        }\r\n        if (x >= x6) {\r\n            x -= x6;\r\n            product = (product * a6) / ONE_20;\r\n        }\r\n        if (x >= x7) {\r\n            x -= x7;\r\n            product = (product * a7) / ONE_20;\r\n        }\r\n        if (x >= x8) {\r\n            x -= x8;\r\n            product = (product * a8) / ONE_20;\r\n        }\r\n        if (x >= x9) {\r\n            x -= x9;\r\n            product = (product * a9) / ONE_20;\r\n        }\r\n\r\n        // x10 and x11 are unnecessary here since we have high enough precision already.\r\n\r\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\r\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\r\n\r\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\r\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\r\n\r\n        // The first term is simply x.\r\n        term = x;\r\n        seriesSum += term;\r\n\r\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\r\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\r\n\r\n        term = ((term * x) / ONE_20) / 2;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 3;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 4;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 5;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 6;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 7;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 8;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 9;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 10;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 11;\r\n        seriesSum += term;\r\n\r\n        term = ((term * x) / ONE_20) / 12;\r\n        seriesSum += term;\r\n\r\n        // 12 Taylor terms are sufficient for 18 decimal precision.\r\n\r\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\r\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\r\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\r\n        // and then drop two digits to return an 18 decimal value.\r\n\r\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\r\n     */\r\n    function log(int256 arg, int256 base) internal pure returns (int256) {\r\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\r\n\r\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\r\n        // upscaling.\r\n\r\n        int256 logBase;\r\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\r\n            logBase = _ln_36(base);\r\n        } else {\r\n            logBase = _ln(base) * ONE_18;\r\n        }\r\n\r\n        int256 logArg;\r\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\r\n            logArg = _ln_36(arg);\r\n        } else {\r\n            logArg = _ln(arg) * ONE_18;\r\n        }\r\n\r\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\r\n        return (logArg * ONE_18) / logBase;\r\n    }\r\n\r\n    /**\r\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\r\n     */\r\n    function ln(int256 a) internal pure returns (int256) {\r\n        // The real natural logarithm is not defined for negative numbers or zero.\r\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\r\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\r\n            return _ln_36(a) / ONE_18;\r\n        } else {\r\n            return _ln(a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\r\n     */\r\n    function _ln(int256 a) private pure returns (int256) {\r\n        if (a < ONE_18) {\r\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\r\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\r\n            // Fixed point division requires multiplying by ONE_18.\r\n            return (-_ln((ONE_18 * ONE_18) / a));\r\n        }\r\n\r\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\r\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\r\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\r\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\r\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\r\n        // decomposition, which will be lower than the smallest a_n.\r\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\r\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\r\n\r\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\r\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\r\n        // ONE_18 to convert them to fixed point.\r\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\r\n        // by it and compute the accumulated sum.\r\n\r\n        int256 sum = 0;\r\n        if (a >= a0 * ONE_18) {\r\n            a /= a0; // Integer, not fixed point division\r\n            sum += x0;\r\n        }\r\n\r\n        if (a >= a1 * ONE_18) {\r\n            a /= a1; // Integer, not fixed point division\r\n            sum += x1;\r\n        }\r\n\r\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\r\n        sum *= 100;\r\n        a *= 100;\r\n\r\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\r\n\r\n        if (a >= a2) {\r\n            a = (a * ONE_20) / a2;\r\n            sum += x2;\r\n        }\r\n\r\n        if (a >= a3) {\r\n            a = (a * ONE_20) / a3;\r\n            sum += x3;\r\n        }\r\n\r\n        if (a >= a4) {\r\n            a = (a * ONE_20) / a4;\r\n            sum += x4;\r\n        }\r\n\r\n        if (a >= a5) {\r\n            a = (a * ONE_20) / a5;\r\n            sum += x5;\r\n        }\r\n\r\n        if (a >= a6) {\r\n            a = (a * ONE_20) / a6;\r\n            sum += x6;\r\n        }\r\n\r\n        if (a >= a7) {\r\n            a = (a * ONE_20) / a7;\r\n            sum += x7;\r\n        }\r\n\r\n        if (a >= a8) {\r\n            a = (a * ONE_20) / a8;\r\n            sum += x8;\r\n        }\r\n\r\n        if (a >= a9) {\r\n            a = (a * ONE_20) / a9;\r\n            sum += x9;\r\n        }\r\n\r\n        if (a >= a10) {\r\n            a = (a * ONE_20) / a10;\r\n            sum += x10;\r\n        }\r\n\r\n        if (a >= a11) {\r\n            a = (a * ONE_20) / a11;\r\n            sum += x11;\r\n        }\r\n\r\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\r\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\r\n        // Let z = (a - 1) / (a + 1).\r\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\r\n\r\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\r\n        // division by ONE_20.\r\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\r\n        int256 z_squared = (z * z) / ONE_20;\r\n\r\n        // num is the numerator of the series: the z^(2 * n + 1) term\r\n        int256 num = z;\r\n\r\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\r\n        int256 seriesSum = num;\r\n\r\n        // In each step, the numerator is multiplied by z^2\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 3;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 5;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 7;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 9;\r\n\r\n        num = (num * z_squared) / ONE_20;\r\n        seriesSum += num / 11;\r\n\r\n        // 6 Taylor terms are sufficient for 36 decimal precision.\r\n\r\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\r\n        seriesSum *= 2;\r\n\r\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\r\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\r\n        // value.\r\n\r\n        return (sum + seriesSum) / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\r\n     * for x close to one.\r\n     *\r\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\r\n     */\r\n    function _ln_36(int256 x) private pure returns (int256) {\r\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\r\n        // worthwhile.\r\n\r\n        // First, we transform x to a 36 digit fixed point value.\r\n        x *= ONE_18;\r\n\r\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\r\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\r\n\r\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\r\n        // division by ONE_36.\r\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\r\n        int256 z_squared = (z * z) / ONE_36;\r\n\r\n        // num is the numerator of the series: the z^(2 * n + 1) term\r\n        int256 num = z;\r\n\r\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\r\n        int256 seriesSum = num;\r\n\r\n        // In each step, the numerator is multiplied by z^2\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 3;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 5;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 7;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 9;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 11;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 13;\r\n\r\n        num = (num * z_squared) / ONE_36;\r\n        seriesSum += num / 15;\r\n\r\n        // 8 Taylor terms are sufficient for 36 decimal precision.\r\n\r\n        // All that remains is multiplying by 2 (non fixed point).\r\n        return seriesSum * 2;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n * Adapted from OpenZeppelin's SafeMath library\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        _require(c >= a, Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b <= a, Errors.SUB_OVERFLOW);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers of 256 bits.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers of 256 bits.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\r\n        return c;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        bool roundUp\r\n    ) internal pure returns (uint256) {\r\n        return roundUp ? divUp(a, b) : divDown(a, b);\r\n    }\r\n\r\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n        return a / b;\r\n    }\r\n\r\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        _require(b != 0, Errors.ZERO_DIVISION);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            return 1 + (a - 1) / b;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/TemporarilyPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './BalancerErrors.sol';\r\nimport '../interfaces/ITemporarilyPausable.sol';\r\n\r\n/**\r\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\r\n * used as an emergency switch in case a security vulnerability or threat is identified.\r\n *\r\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\r\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\r\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\r\n * analysis later determines there was a false alarm.\r\n *\r\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\r\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\r\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\r\n *\r\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\r\n * irreversible.\r\n */\r\nabstract contract TemporarilyPausable is ITemporarilyPausable {\r\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\r\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\r\n\r\n    uint256 private immutable _pauseWindowEndTime;\r\n    uint256 private immutable _bufferPeriodEndTime;\r\n\r\n    bool private _paused;\r\n\r\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\r\n        _require(\r\n            pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION,\r\n            Errors.MAX_PAUSE_WINDOW_DURATION\r\n        );\r\n        _require(\r\n            bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION,\r\n            Errors.MAX_BUFFER_PERIOD_DURATION\r\n        );\r\n\r\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\r\n\r\n        _pauseWindowEndTime = pauseWindowEndTime;\r\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _ensureNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\r\n     * Period.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        )\r\n    {\r\n        paused = !_isNotPaused();\r\n        pauseWindowEndTime = _getPauseWindowEndTime();\r\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\r\n     * unpaused until the end of the Buffer Period.\r\n     *\r\n     * Once the Buffer Period expires, this function reverts unconditionally.\r\n     */\r\n    function _setPaused(bool paused) internal {\r\n        if (paused) {\r\n            _require(\r\n                block.timestamp < _getPauseWindowEndTime(),\r\n                Errors.PAUSE_WINDOW_EXPIRED\r\n            );\r\n        } else {\r\n            _require(\r\n                block.timestamp < _getBufferPeriodEndTime(),\r\n                Errors.BUFFER_PERIOD_EXPIRED\r\n            );\r\n        }\r\n\r\n        _paused = paused;\r\n        emit PausedStateChanged(paused);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the contract is paused.\r\n     */\r\n    function _ensureNotPaused() internal view {\r\n        _require(_isNotPaused(), Errors.PAUSED);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is unpaused.\r\n     *\r\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\r\n     * longer accessed.\r\n     */\r\n    function _isNotPaused() internal view returns (bool) {\r\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\r\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\r\n    }\r\n\r\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\r\n\r\n    function _getPauseWindowEndTime() private view returns (uint256) {\r\n        return _pauseWindowEndTime;\r\n    }\r\n\r\n    function _getBufferPeriodEndTime() private view returns (uint256) {\r\n        return _bufferPeriodEndTime;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/WeightCompression.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './FixedPoint.sol';\r\n\r\n/**\r\n * @dev Library for compressing and uncompresing numbers by using smaller types.\r\n * All values are 18 decimal fixed-point numbers in the [0.0, 1.0] range,\r\n * so heavier compression (fewer bits) results in fewer decimals.\r\n */\r\nlibrary WeightCompression {\r\n    uint256 private constant _UINT31_MAX = 2**(31) - 1;\r\n\r\n    using FixedPoint for uint256;\r\n\r\n    /**\r\n     * @dev Convert a 16-bit value to full FixedPoint\r\n     */\r\n    function uncompress16(uint256 value) internal pure returns (uint256) {\r\n        return value.mulUp(FixedPoint.ONE).divUp(type(uint16).max);\r\n    }\r\n\r\n    /**\r\n     * @dev Compress a FixedPoint value to 16 bits\r\n     */\r\n    function compress16(uint256 value) internal pure returns (uint256) {\r\n        return value.mulUp(type(uint16).max).divUp(FixedPoint.ONE);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a 31-bit value to full FixedPoint\r\n     */\r\n    function uncompress31(uint256 value) internal pure returns (uint256) {\r\n        return value.mulUp(FixedPoint.ONE).divUp(_UINT31_MAX);\r\n    }\r\n\r\n    /**\r\n     * @dev Compress a FixedPoint value to 31 bits\r\n     */\r\n    function compress31(uint256 value) internal pure returns (uint256) {\r\n        return value.mulUp(_UINT31_MAX).divUp(FixedPoint.ONE);\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/WordCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\r\n * a single storage slot, saving gas by performing less storage accesses.\r\n *\r\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\r\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\r\n */\r\nlibrary WordCodec {\r\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\r\n    // or to insert a new one replacing the old.\r\n    uint256 private constant _MASK_1 = 2**(1) - 1;\r\n    uint256 private constant _MASK_10 = 2**(10) - 1;\r\n    uint256 private constant _MASK_16 = 2**(16) - 1;\r\n    uint256 private constant _MASK_22 = 2**(22) - 1;\r\n    uint256 private constant _MASK_31 = 2**(31) - 1;\r\n    uint256 private constant _MASK_32 = 2**(32) - 1;\r\n    uint256 private constant _MASK_53 = 2**(53) - 1;\r\n    uint256 private constant _MASK_64 = 2**(64) - 1;\r\n    uint256 private constant _MASK_128 = 2**(128) - 1;\r\n    uint256 private constant _MASK_192 = 2**(192) - 1;\r\n\r\n    // Largest positive values that can be represented as N bits signed integers.\r\n    int256 private constant _MAX_INT_22 = 2**(21) - 1;\r\n    int256 private constant _MAX_INT_53 = 2**(52) - 1;\r\n\r\n    // In-place insertion\r\n\r\n    /**\r\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\r\n     * word.\r\n     */\r\n    function insertBool(\r\n        bytes32 word,\r\n        bool value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_1 << offset));\r\n        return clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\r\n    }\r\n\r\n    // Unsigned\r\n\r\n    /**\r\n     * @dev Inserts a 10 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\r\n     * the new word.\r\n     *\r\n     * Assumes `value` only uses its least significant 10 bits, otherwise it may overwrite sibling bytes.\r\n     */\r\n    function insertUint10(\r\n        bytes32 word,\r\n        uint256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_10 << offset));\r\n        return clearedWord | bytes32(value << offset);\r\n    }\r\n\r\n    /**\r\n     * @dev Inserts a 16 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value.\r\n     * Returns the new word.\r\n     *\r\n     * Assumes `value` only uses its least significant 16 bits, otherwise it may overwrite sibling bytes.\r\n     */\r\n    function insertUint16(\r\n        bytes32 word,\r\n        uint256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_16 << offset));\r\n        return clearedWord | bytes32(value << offset);\r\n    }\r\n\r\n    /**\r\n     * @dev Inserts a 31 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\r\n     * the new word.\r\n     *\r\n     * Assumes `value` can be represented using 31 bits.\r\n     */\r\n    function insertUint31(\r\n        bytes32 word,\r\n        uint256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_31 << offset));\r\n        return clearedWord | bytes32(value << offset);\r\n    }\r\n\r\n    /**\r\n     * @dev Inserts a 32 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\r\n     * the new word.\r\n     *\r\n     * Assumes `value` only uses its least significant 32 bits, otherwise it may overwrite sibling bytes.\r\n     */\r\n    function insertUint32(\r\n        bytes32 word,\r\n        uint256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_32 << offset));\r\n        return clearedWord | bytes32(value << offset);\r\n    }\r\n\r\n    /**\r\n     * @dev Inserts a 64 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\r\n     * the new word.\r\n     *\r\n     * Assumes `value` only uses its least significant 64 bits, otherwise it may overwrite sibling bytes.\r\n     */\r\n    function insertUint64(\r\n        bytes32 word,\r\n        uint256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_64 << offset));\r\n        return clearedWord | bytes32(value << offset);\r\n    }\r\n\r\n    // Signed\r\n\r\n    /**\r\n     * @dev Inserts a 22 bits signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\r\n     * the new word.\r\n     *\r\n     * Assumes `value` can be represented using 22 bits.\r\n     */\r\n    function insertInt22(\r\n        bytes32 word,\r\n        int256 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_22 << offset));\r\n        // Integer values need masking to remove the upper bits of negative values.\r\n        return clearedWord | bytes32((uint256(value) & _MASK_22) << offset);\r\n    }\r\n\r\n    // Bytes\r\n\r\n    /**\r\n     * @dev Inserts 192 bit shifted by an offset into a 256 bit word, replacing the old value. Returns the new word.\r\n     *\r\n     * Assumes `value` can be represented using 192 bits.\r\n     */\r\n    function insertBits192(\r\n        bytes32 word,\r\n        bytes32 value,\r\n        uint256 offset\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\r\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\r\n    }\r\n\r\n    // Encoding\r\n\r\n    // Unsigned\r\n\r\n    /**\r\n     * @dev Encodes an unsigned integer shifted by an offset. This performs no size checks: it is up to the caller to\r\n     * ensure that the values are bounded.\r\n     *\r\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\r\n     */\r\n    function encodeUint(uint256 value, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return bytes32(value << offset);\r\n    }\r\n\r\n    // Signed\r\n\r\n    /**\r\n     * @dev Encodes a 22 bits signed integer shifted by an offset.\r\n     *\r\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\r\n     */\r\n    function encodeInt22(int256 value, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        // Integer values need masking to remove the upper bits of negative values.\r\n        return bytes32((uint256(value) & _MASK_22) << offset);\r\n    }\r\n\r\n    /**\r\n     * @dev Encodes a 53 bits signed integer shifted by an offset.\r\n     *\r\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\r\n     */\r\n    function encodeInt53(int256 value, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        // Integer values need masking to remove the upper bits of negative values.\r\n        return bytes32((uint256(value) & _MASK_53) << offset);\r\n    }\r\n\r\n    // Decoding\r\n\r\n    /**\r\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeBool(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (uint256(word >> offset) & _MASK_1) == 1;\r\n    }\r\n\r\n    // Unsigned\r\n\r\n    /**\r\n     * @dev Decodes and returns a 10 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint10(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_10;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 16 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint16(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_16;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 31 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint31(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_31;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 32 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint32(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_32;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 64 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint64(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_64;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 128 bit unsigned integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeUint128(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(word >> offset) & _MASK_128;\r\n    }\r\n\r\n    // Signed\r\n\r\n    /**\r\n     * @dev Decodes and returns a 22 bits signed integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeInt22(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 value = int256(uint256(word >> offset) & _MASK_22);\r\n        // In case the decoded value is greater than the max positive integer that can be represented with 22 bits,\r\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\r\n        // representation.\r\n        return value > _MAX_INT_22 ? (value | int256(~_MASK_22)) : value;\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes and returns a 53 bits signed integer shifted by an offset from a 256 bit word.\r\n     */\r\n    function decodeInt53(bytes32 word, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 value = int256(uint256(word >> offset) & _MASK_53);\r\n        // In case the decoded value is greater than the max positive integer that can be represented with 53 bits,\r\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\r\n        // representation.\r\n\r\n        return value > _MAX_INT_53 ? (value | int256(~_MASK_53)) : value;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IAsset.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\r\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\r\n * types.\r\n *\r\n * This concept is unrelated to a Pool's Asset Managers.\r\n */\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n"
    },
    "contracts/interfaces/IAssetManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\n\r\ninterface IAssetManager {\r\n    /**\r\n     * @notice Emitted when asset manager is rebalanced\r\n     */\r\n    event Rebalance(bytes32 poolId);\r\n\r\n    /**\r\n     * @notice Sets the config\r\n     */\r\n    function setConfig(bytes32 poolId, bytes calldata config) external;\r\n\r\n    /**\r\n     * Note: No function to read the asset manager config is included in IAssetManager\r\n     * as the signature is expected to vary between asset manager implementations\r\n     */\r\n\r\n    /**\r\n     * @notice Returns the asset manager's token\r\n     */\r\n    function getToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @return the current assets under management of this asset manager\r\n     */\r\n    function getAUM(bytes32 poolId) external view returns (uint256);\r\n\r\n    /**\r\n     * @return poolCash - The up-to-date cash balance of the pool\r\n     * @return poolManaged - The up-to-date managed balance of the pool\r\n     */\r\n    function getPoolBalances(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (uint256 poolCash, uint256 poolManaged);\r\n\r\n    /**\r\n     * @return The difference in tokens between the target investment\r\n     * and the currently invested amount (i.e. the amount that can be invested)\r\n     */\r\n    function maxInvestableBalance(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (int256);\r\n\r\n    /**\r\n     * @notice Updates the Vault on the value of the pool's investment returns\r\n     */\r\n    function updateBalanceOfPool(bytes32 poolId) external;\r\n\r\n    /**\r\n     * @notice Determines whether the pool should rebalance given the provided balances\r\n     */\r\n    function shouldRebalance(uint256 cash, uint256 managed)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Rebalances funds between the pool and the asset manager to maintain target investment percentage.\r\n     * @param poolId - the poolId of the pool to be rebalanced\r\n     * @param force - a boolean representing whether a rebalance should be forced even when the pool is near balance\r\n     */\r\n    function rebalance(bytes32 poolId, bool force) external;\r\n\r\n    /**\r\n     * @notice allows an authorized rebalancer to remove capital to facilitate large withdrawals\r\n     * @param poolId - the poolId of the pool to withdraw funds back to\r\n     * @param amount - the amount of tokens to withdraw back to the pool\r\n     */\r\n    function capitalOut(bytes32 poolId, uint256 amount) external;\r\n}\r\n"
    },
    "contracts/interfaces/IAuthentication.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthentication {\r\n    /**\r\n     * @dev Returns the action identifier associated with the external function described by `selector`.\r\n     */\r\n    function getActionId(bytes4 selector) external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/interfaces/IAuthorizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthorizer {\r\n    /**\r\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\r\n     */\r\n    function canPerform(\r\n        bytes32 actionId,\r\n        address account,\r\n        address where\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IBasePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './IVault.sol';\r\nimport './IPoolSwapStructs.sol';\r\n\r\n/**\r\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\r\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\r\n * either IGeneralPool or IMinimalSwapInfoPool\r\n */\r\ninterface IBasePool is IPoolSwapStructs {\r\n    /**\r\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\r\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\r\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\r\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\r\n     *\r\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\r\n     *\r\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\r\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\r\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\r\n     *\r\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\r\n     * balance.\r\n     *\r\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\r\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\r\n     *\r\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\r\n     * state-changing operations, such as minting pool shares.\r\n     */\r\n    function onJoinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    )\r\n        external\r\n        returns (\r\n            uint256[] memory amountsIn,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        );\r\n\r\n    /**\r\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\r\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\r\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\r\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\r\n     * `protocolSwapFeePercentage`.\r\n     *\r\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\r\n     *\r\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\r\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\r\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\r\n     *\r\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\r\n     * balance.\r\n     *\r\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\r\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\r\n     *\r\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\r\n     * state-changing operations, such as burning pool shares.\r\n     */\r\n    function onExitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256 protocolSwapFeePercentage,\r\n        bytes memory userData\r\n    )\r\n        external\r\n        returns (\r\n            uint256[] memory amountsOut,\r\n            uint256[] memory dueProtocolFeeAmounts\r\n        );\r\n\r\n    function getPoolId() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/interfaces/IFlashLoanRecipient.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Inspired by Aave Protocol's IFlashLoanReceiver.\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\n\r\ninterface IFlashLoanRecipient {\r\n    /**\r\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n     *\r\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n     * Vault, or else the entire flash loan will revert.\r\n     *\r\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n     */\r\n    function receiveFlashLoan(\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        uint256[] memory feeAmounts,\r\n        bytes memory userData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './IBasePool.sol';\r\n\r\n/**\r\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\r\n *\r\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\r\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\r\n * to the pool in a 'given out' swap.\r\n *\r\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\r\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\r\n * indeed the Vault.\r\n */\r\ninterface IMinimalSwapInfoPool is IBasePool {\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256 currentBalanceTokenIn,\r\n        uint256 currentBalanceTokenOut\r\n    ) external returns (uint256 amount);\r\n}\r\n"
    },
    "contracts/interfaces/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\n\r\nimport './IVault.sol';\r\n\r\ninterface IPoolSwapStructs {\r\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\r\n    // IMinimalSwapInfoPool.\r\n    //\r\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\r\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\r\n    //\r\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\r\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\r\n    //\r\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\r\n    // some Pools.\r\n    //\r\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\r\n    // one Pool.\r\n    //\r\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\r\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\r\n    //    balance.\r\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\r\n    //\r\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\r\n    // where the Pool sends the outgoing tokens.\r\n    //\r\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\r\n    struct SwapRequest {\r\n        IVault.SwapKind kind;\r\n        IERC20 tokenIn;\r\n        IERC20 tokenOut;\r\n        uint256 amount;\r\n        // Misc data\r\n        bytes32 poolId;\r\n        uint256 lastChangeBlock;\r\n        address from;\r\n        address to;\r\n        bytes userData;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IProtocolFeesCollector.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\n\r\nimport './IVault.sol';\r\nimport './IAuthorizer.sol';\r\n\r\ninterface IProtocolFeesCollector {\r\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\r\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\r\n\r\n    function withdrawCollectedFees(\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        address recipient\r\n    ) external;\r\n\r\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\r\n\r\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage)\r\n        external;\r\n\r\n    function getSwapFeePercentage() external view returns (uint256);\r\n\r\n    function getFlashLoanFeePercentage() external view returns (uint256);\r\n\r\n    function getCollectedFeeAmounts(IERC20[] memory tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory feeAmounts);\r\n\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    function vault() external view returns (IVault);\r\n}\r\n"
    },
    "contracts/interfaces/ISignaturesValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\r\n */\r\ninterface ISignaturesValidator {\r\n    /**\r\n     * @dev Returns the EIP712 domain separator.\r\n     */\r\n    function getDomainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns the next nonce used by an address to sign messages.\r\n     */\r\n    function getNextNonce(address user) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ITemporarilyPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the TemporarilyPausable helper.\r\n */\r\ninterface ITemporarilyPausable {\r\n    /**\r\n     * @dev Emitted every time the pause state changes by `_setPaused`.\r\n     */\r\n    event PausedStateChanged(bool paused);\r\n\r\n    /**\r\n     * @dev Returns the current paused state.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        );\r\n}\r\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport '../openzeppelin/IERC20.sol';\r\nimport './ISignaturesValidator.sol';\r\nimport './ITemporarilyPausable.sol';\r\nimport './IWETH.sol';\r\n\r\nimport './IAsset.sol';\r\nimport './IAuthorizer.sol';\r\nimport './IFlashLoanRecipient.sol';\r\nimport './IProtocolFeesCollector.sol';\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\r\n * don't override one of these declarations.\r\n */\r\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\r\n    // Generalities about the Vault:\r\n    //\r\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n    //\r\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n    //\r\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n    // Authorizer\r\n    //\r\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n    // can perform a given action.\r\n\r\n    /**\r\n     * @dev Returns the Vault's Authorizer.\r\n     */\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    /**\r\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n     *\r\n     * Emits an `AuthorizerChanged` event.\r\n     */\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n    /**\r\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n     */\r\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n    // Relayers\r\n    //\r\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n    // this power, two things must occur:\r\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n    //    functions.\r\n    //  - Each user must approve the relayer to act on their behalf.\r\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n    /**\r\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n     */\r\n    function hasApprovedRelayer(address user, address relayer)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n     *\r\n     * Emits a `RelayerApprovalChanged` event.\r\n     */\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n     */\r\n    event RelayerApprovalChanged(\r\n        address indexed relayer,\r\n        address indexed sender,\r\n        bool approved\r\n    );\r\n\r\n    // Internal Balance\r\n    //\r\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n    //\r\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n    // operations of different kinds, with different senders and recipients, at once.\r\n\r\n    /**\r\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n    function getInternalBalance(address user, IERC20[] memory tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n    /**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n    struct UserBalanceOp {\r\n        UserBalanceOpKind kind;\r\n        IAsset asset;\r\n        uint256 amount;\r\n        address sender;\r\n        address payable recipient;\r\n    }\r\n\r\n    // There are four possible operations in `manageUserBalance`:\r\n    //\r\n    // - DEPOSIT_INTERNAL\r\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n    // relevant for relayers).\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - WITHDRAW_INTERNAL\r\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n    // it to the recipient as ETH.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_INTERNAL\r\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_EXTERNAL\r\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n    // relayers, as it lets them reuse a user's Vault allowance.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `ExternalBalanceTransfer` event.\r\n\r\n    enum UserBalanceOpKind {\r\n        DEPOSIT_INTERNAL,\r\n        WITHDRAW_INTERNAL,\r\n        TRANSFER_INTERNAL,\r\n        TRANSFER_EXTERNAL\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n    event InternalBalanceChanged(\r\n        address indexed user,\r\n        IERC20 indexed token,\r\n        int256 delta\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n    event ExternalBalanceTransfer(\r\n        IERC20 indexed token,\r\n        address indexed sender,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    // Pools\r\n    //\r\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n    // functionality:\r\n    //\r\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n    // which increase with the number of registered tokens.\r\n    //\r\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n    // independent of the number of registered tokens.\r\n    //\r\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n    enum PoolSpecialization {\r\n        GENERAL,\r\n        MINIMAL_SWAP_INFO,\r\n        TWO_TOKEN\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n    function registerPool(PoolSpecialization specialization)\r\n        external\r\n        returns (bytes32);\r\n\r\n    /**\r\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n    event PoolRegistered(\r\n        bytes32 indexed poolId,\r\n        address indexed poolAddress,\r\n        PoolSpecialization specialization\r\n    );\r\n\r\n    /**\r\n     * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n    function getPool(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (address, PoolSpecialization);\r\n\r\n    /**\r\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n    event TokensRegistered(\r\n        bytes32 indexed poolId,\r\n        IERC20[] tokens,\r\n        address[] assetManagers\r\n    );\r\n\r\n    /**\r\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\r\n\r\n    /**\r\n     * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        );\r\n\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n\r\n    struct ExitPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n    event PoolBalanceChanged(\r\n        bytes32 indexed poolId,\r\n        address indexed liquidityProvider,\r\n        IERC20[] tokens,\r\n        int256[] deltas,\r\n        uint256[] protocolFeeAmounts\r\n    );\r\n\r\n    enum PoolBalanceChangeKind {\r\n        JOIN,\r\n        EXIT\r\n    }\r\n\r\n    // Swaps\r\n    //\r\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n    //\r\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n    // individual swaps.\r\n    //\r\n    // There are two swap kinds:\r\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n    //\r\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n    // the final intended token.\r\n    //\r\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n    // much less gas than they would otherwise.\r\n    //\r\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n    // updating the Pool's internal accounting).\r\n    //\r\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n    //\r\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n    //\r\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n    //\r\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n    enum SwapKind {\r\n        GIVEN_IN,\r\n        GIVEN_OUT\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n    event Swap(\r\n        bytes32 indexed poolId,\r\n        IERC20 indexed tokenIn,\r\n        IERC20 indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n\r\n    // Flash Loans\r\n\r\n    /**\r\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\r\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\r\n     *\r\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\r\n     * for each token contract. `tokens` must be sorted in ascending order.\r\n     *\r\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\r\n     * `receiveFlashLoan` call.\r\n     *\r\n     * Emits `FlashLoan` events.\r\n     */\r\n    function flashLoan(\r\n        IFlashLoanRecipient recipient,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        bytes memory userData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\r\n     */\r\n    event FlashLoan(\r\n        IFlashLoanRecipient indexed recipient,\r\n        IERC20 indexed token,\r\n        uint256 amount,\r\n        uint256 feeAmount\r\n    );\r\n\r\n    // Asset Management\r\n    //\r\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n    //\r\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n    //\r\n    // This concept is unrelated to the IAsset interface.\r\n\r\n    /**\r\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n     *\r\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n     * operations of different kinds, with different Pools and tokens, at once.\r\n     *\r\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n     */\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n    struct PoolBalanceOp {\r\n        PoolBalanceOpKind kind;\r\n        bytes32 poolId;\r\n        IERC20 token;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n     */\r\n    enum PoolBalanceOpKind {\r\n        WITHDRAW,\r\n        DEPOSIT,\r\n        UPDATE\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n     */\r\n    event PoolBalanceManaged(\r\n        bytes32 indexed poolId,\r\n        address indexed assetManager,\r\n        IERC20 indexed token,\r\n        int256 cashDelta,\r\n        int256 managedDelta\r\n    );\r\n\r\n    // Protocol Fees\r\n    //\r\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\r\n    // permissioned accounts.\r\n    //\r\n    // There are two kinds of protocol fees:\r\n    //\r\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\r\n    //\r\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\r\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\r\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\r\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\r\n    // exiting a Pool in debt without first paying their share.\r\n\r\n    /**\r\n     * @dev Returns the current protocol fee module.\r\n     */\r\n    function getProtocolFeesCollector()\r\n        external\r\n        view\r\n        returns (IProtocolFeesCollector);\r\n\r\n    /**\r\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\r\n     * error in some part of the system.\r\n     *\r\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\r\n     *\r\n     * While the contract is paused, the following features are disabled:\r\n     * - depositing and transferring internal balance\r\n     * - transferring external balance (using the Vault's allowance)\r\n     * - swaps\r\n     * - joining Pools\r\n     * - Asset Manager interactions\r\n     *\r\n     * Internal Balance can still be withdrawn, and Pools exited.\r\n     */\r\n    function setPaused(bool paused) external;\r\n\r\n    /**\r\n     * @dev Returns the Vault's WETH instance.\r\n     */\r\n    function WETH() external view returns (IWETH);\r\n    // solhint-disable-previous-line func-name-mixedcase\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"../openzeppelin/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for WETH9.\r\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\r\n */\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}"
    },
    "contracts/lbp/Authorizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../interfaces/IAuthorizer.sol';\r\nimport '../openzeppelin/AccessControl.sol';\r\nimport '../helpers/InputHelpers.sol';\r\n\r\n/**\r\n * @dev Basic Authorizer implementation, based on OpenZeppelin's Access Control.\r\n *\r\n * Users are allowed to perform actions if they have the role with the same identifier. In this sense, roles are not\r\n * being truly used as such, since they each map to a single action identifier.\r\n *\r\n * This temporary implementation is expected to be replaced soon after launch by a more sophisticated one, able to\r\n * manage permissions across multiple contracts and to natively handle timelocks.\r\n */\r\ncontract Authorizer is AccessControl, IAuthorizer {\r\n    constructor(address admin) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n    }\r\n\r\n    function canPerform(\r\n        bytes32 actionId,\r\n        address account,\r\n        address\r\n    ) public view override returns (bool) {\r\n        // This Authorizer ignores the 'where' field completely.\r\n        return AccessControl.hasRole(actionId, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants multiple roles to a single account.\r\n     */\r\n    function grantRoles(bytes32[] memory roles, address account) external {\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            grantRole(roles[i], account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Grants roles to a list of accounts.\r\n     */\r\n    function grantRolesToMany(bytes32[] memory roles, address[] memory accounts)\r\n        external\r\n    {\r\n        InputHelpers.ensureInputLengthMatch(roles.length, accounts.length);\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            grantRole(roles[i], accounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes multiple roles from a single account.\r\n     */\r\n    function revokeRoles(bytes32[] memory roles, address account) external {\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            revokeRole(roles[i], account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes roles from a list of accounts.\r\n     */\r\n    function revokeRolesFromMany(\r\n        bytes32[] memory roles,\r\n        address[] memory accounts\r\n    ) external {\r\n        InputHelpers.ensureInputLengthMatch(roles.length, accounts.length);\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            revokeRole(roles[i], accounts[i]);\r\n        }\r\n    }\r\n}"
    },
    "contracts/lbp/LiquidityBootstrappingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport '../openzeppelin/ReentrancyGuard.sol';\nimport '../helpers/WordCodec.sol';\nimport '../helpers/Math.sol';\nimport '../helpers/WeightCompression.sol';\n\nimport '../BaseWeightedPool.sol';\n\n/**\n * @dev Weighted Pool with mutable weights, designed to support V2 Liquidity Bootstrapping\n */\ncontract LiquidityBootstrappingPool is BaseWeightedPool, ReentrancyGuard {\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\n    // solhint-disable not-rely-on-time\n\n    using FixedPoint for uint256;\n    using WordCodec for bytes32;\n    using WeightCompression for uint256;\n\n    // LBPs often involve only two tokens - we support up to four since we're able to pack the entire config in a single\n    // storage slot.\n    uint256 private constant _MAX_LBP_TOKENS = 4;\n\n    // State variables\n\n    uint256 private immutable _totalTokens;\n\n    IERC20 internal immutable _token0;\n    IERC20 internal immutable _token1;\n    IERC20 internal immutable _token2;\n    IERC20 internal immutable _token3;\n\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\n\n    uint256 internal immutable _scalingFactor0;\n    uint256 internal immutable _scalingFactor1;\n    uint256 internal immutable _scalingFactor2;\n    uint256 internal immutable _scalingFactor3;\n\n    // For gas optimization, store start/end weights and timestamps in one bytes32\n    // Start weights need to be high precision, since restarting the update resets them to \"spot\"\n    // values. Target end weights do not need as much precision.\n    // [     32 bits   |     32 bits     |      64 bits     |      124 bits      |    3 bits    |     1 bit    ]\n    // [ end timestamp | start timestamp | 4x16 end weights | 4x31 start weights |   not used   | swap enabled ]\n    // |MSB                                                                                                 LSB|\n\n    bytes32 private _poolState;\n\n    // Offsets for data elements in _poolState\n    uint256 private constant _SWAP_ENABLED_OFFSET = 0;\n    uint256 private constant _START_WEIGHT_OFFSET = 4;\n    uint256 private constant _END_WEIGHT_OFFSET = 128;\n    uint256 private constant _START_TIME_OFFSET = 192;\n    uint256 private constant _END_TIME_OFFSET = 224;\n\n    // Event declarations\n\n    event SwapEnabledSet(bool swapEnabled);\n    event GradualWeightUpdateScheduled(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] startWeights,\n        uint256[] endWeights\n    );\n\n    constructor(\n        IVault vault,\n        string memory name,\n        string memory symbol,\n        IERC20[] memory tokens,\n        uint256[] memory normalizedWeights,\n        uint256 swapFeePercentage,\n        uint256 pauseWindowDuration,\n        uint256 bufferPeriodDuration,\n        address owner,\n        bool swapEnabledOnStart\n    )\n        BaseWeightedPool(\n            vault,\n            name,\n            symbol,\n            tokens,\n            new address[](tokens.length), // Pass the zero address: LBPs can't have asset managers\n            swapFeePercentage,\n            pauseWindowDuration,\n            bufferPeriodDuration,\n            owner\n        )\n    {\n        uint256 totalTokens = tokens.length;\n        InputHelpers.ensureInputLengthMatch(\n            totalTokens,\n            normalizedWeights.length\n        );\n\n        _totalTokens = totalTokens;\n\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\n        _token0 = tokens[0];\n        _token1 = tokens[1];\n        _token2 = totalTokens > 2 ? tokens[2] : IERC20(0);\n        _token3 = totalTokens > 3 ? tokens[3] : IERC20(0);\n\n        _scalingFactor0 = _computeScalingFactor(tokens[0]);\n        _scalingFactor1 = _computeScalingFactor(tokens[1]);\n        _scalingFactor2 = totalTokens > 2\n            ? _computeScalingFactor(tokens[2])\n            : 0;\n        _scalingFactor3 = totalTokens > 3\n            ? _computeScalingFactor(tokens[3])\n            : 0;\n\n        uint256 currentTime = block.timestamp;\n\n        _startGradualWeightChange(\n            currentTime,\n            currentTime,\n            normalizedWeights,\n            normalizedWeights\n        );\n\n        // If false, the pool will start in the disabled state (prevents front-running the enable swaps transaction)\n        _setSwapEnabled(swapEnabledOnStart);\n    }\n\n    // External functions\n\n    /**\n     * @dev Tells whether swaps are enabled or not for the given pool.\n     */\n    function getSwapEnabled() public view returns (bool) {\n        return _poolState.decodeBool(_SWAP_ENABLED_OFFSET);\n    }\n\n    /**\n     * @dev Return start time, end time, and endWeights as an array.\n     * Current weights should be retrieved via `getNormalizedWeights()`.\n     */\n    function getGradualWeightUpdateParams()\n        external\n        view\n        returns (\n            uint256 startTime,\n            uint256 endTime,\n            uint256[] memory endWeights\n        )\n    {\n        // Load current pool state from storage\n        bytes32 poolState = _poolState;\n\n        startTime = poolState.decodeUint32(_START_TIME_OFFSET);\n        endTime = poolState.decodeUint32(_END_TIME_OFFSET);\n        uint256 totalTokens = _getTotalTokens();\n        endWeights = new uint256[](totalTokens);\n\n        for (uint256 i = 0; i < totalTokens; i++) {\n            endWeights[i] = poolState\n                .decodeUint16(_END_WEIGHT_OFFSET + i * 16)\n                .uncompress16();\n        }\n    }\n\n    /**\n     * @dev Can pause/unpause trading\n     */\n    function setSwapEnabled(bool swapEnabled)\n        external\n        authenticate\n        whenNotPaused\n        nonReentrant\n    {\n        _setSwapEnabled(swapEnabled);\n    }\n\n    /**\n     * @dev Schedule a gradual weight change, from the current weights to the given endWeights,\n     * over startTime to endTime\n     */\n    function updateWeightsGradually(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] memory endWeights\n    ) external authenticate whenNotPaused nonReentrant {\n        InputHelpers.ensureInputLengthMatch(\n            _getTotalTokens(),\n            endWeights.length\n        );\n\n        // If the start time is in the past, \"fast forward\" to start now\n        // This avoids discontinuities in the weight curve. Otherwise, if you set the start/end times with\n        // only 10% of the period in the future, the weights would immediately jump 90%\n        uint256 currentTime = block.timestamp;\n        startTime = Math.max(currentTime, startTime);\n\n        _require(startTime <= endTime, Errors.GRADUAL_UPDATE_TIME_TRAVEL);\n\n        _startGradualWeightChange(\n            startTime,\n            endTime,\n            _getNormalizedWeights(),\n            endWeights\n        );\n    }\n\n    // Internal functions\n\n    function _getNormalizedWeight(IERC20 token)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        uint256 i;\n\n        // First, convert token address to a token index\n\n        // prettier-ignore\n        if (token == _token0) { i = 0; }\n        else if (token == _token1) { i = 1; }\n        else if (token == _token2) { i = 2; }\n        else if (token == _token3) { i = 3; }\n        else {\n            _revert(Errors.INVALID_TOKEN);\n        }\n\n        return _getNormalizedWeightByIndex(i, _poolState);\n    }\n\n    function _getNormalizedWeightByIndex(uint256 i, bytes32 poolState)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 startWeight = poolState\n            .decodeUint31(_START_WEIGHT_OFFSET + i * 31)\n            .uncompress31();\n        uint256 endWeight = poolState\n            .decodeUint16(_END_WEIGHT_OFFSET + i * 16)\n            .uncompress16();\n\n        uint256 pctProgress = _calculateWeightChangeProgress(poolState);\n\n        return _interpolateWeight(startWeight, endWeight, pctProgress);\n    }\n\n    function _getNormalizedWeights()\n        internal\n        view\n        override\n        returns (uint256[] memory)\n    {\n        uint256 totalTokens = _getTotalTokens();\n        uint256[] memory normalizedWeights = new uint256[](totalTokens);\n\n        bytes32 poolState = _poolState;\n\n        // prettier-ignore\n        {\n            normalizedWeights[0] = _getNormalizedWeightByIndex(0, poolState);\n            normalizedWeights[1] = _getNormalizedWeightByIndex(1, poolState);\n            if (totalTokens == 2) return normalizedWeights;\n            normalizedWeights[2] = _getNormalizedWeightByIndex(2, poolState);\n            if (totalTokens == 3) return normalizedWeights;\n            normalizedWeights[3] = _getNormalizedWeightByIndex(3, poolState);\n        }\n\n        return normalizedWeights;\n    }\n\n    function _getNormalizedWeightsAndMaxWeightIndex()\n        internal\n        view\n        override\n        returns (\n            uint256[] memory normalizedWeights,\n            uint256 maxWeightTokenIndex\n        )\n    {\n        normalizedWeights = _getNormalizedWeights();\n\n        maxWeightTokenIndex = 0;\n        uint256 maxNormalizedWeight = normalizedWeights[0];\n\n        for (uint256 i = 1; i < normalizedWeights.length; i++) {\n            if (normalizedWeights[i] > maxNormalizedWeight) {\n                maxWeightTokenIndex = i;\n                maxNormalizedWeight = normalizedWeights[i];\n            }\n        }\n    }\n\n    // Pool callback functions\n\n    // Prevent any account other than the owner from joining the pool\n\n    function _onInitializePool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    ) internal override returns (uint256, uint256[] memory) {\n        // Only the owner can initialize the pool\n        _require(sender == getOwner(), Errors.CALLER_IS_NOT_LBP_OWNER);\n\n        return\n            super._onInitializePool(\n                poolId,\n                sender,\n                recipient,\n                scalingFactors,\n                userData\n            );\n    }\n\n    function _onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        uint256[] memory scalingFactors,\n        bytes memory userData\n    )\n        internal\n        override\n        returns (\n            uint256,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        // Only the owner can add liquidity; block public LPs\n        _require(sender == getOwner(), Errors.CALLER_IS_NOT_LBP_OWNER);\n\n        return\n            super._onJoinPool(\n                poolId,\n                sender,\n                recipient,\n                balances,\n                lastChangeBlock,\n                protocolSwapFeePercentage,\n                scalingFactors,\n                userData\n            );\n    }\n\n    // Swap overrides - revert unless swaps are enabled\n\n    function _onSwapGivenIn(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) internal view override returns (uint256) {\n        _require(getSwapEnabled(), Errors.SWAPS_DISABLED);\n\n        return\n            super._onSwapGivenIn(\n                swapRequest,\n                currentBalanceTokenIn,\n                currentBalanceTokenOut\n            );\n    }\n\n    function _onSwapGivenOut(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) internal view override returns (uint256) {\n        _require(getSwapEnabled(), Errors.SWAPS_DISABLED);\n\n        return\n            super._onSwapGivenOut(\n                swapRequest,\n                currentBalanceTokenIn,\n                currentBalanceTokenOut\n            );\n    }\n\n    /**\n     * @dev Extend ownerOnly functions to include the LBP control functions\n     */\n    function _isOwnerOnlyAction(bytes32 actionId)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        return\n            (actionId ==\n                getActionId(\n                    LiquidityBootstrappingPool.setSwapEnabled.selector\n                )) ||\n            (actionId ==\n                getActionId(\n                    LiquidityBootstrappingPool.updateWeightsGradually.selector\n                )) ||\n            super._isOwnerOnlyAction(actionId);\n    }\n\n    // Private functions\n\n    /**\n     * @dev Returns a fixed-point number representing how far along the current weight change is, where 0 means the\n     * change has not yet started, and FixedPoint.ONE means it has fully completed.\n     */\n    function _calculateWeightChangeProgress(bytes32 poolState)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 currentTime = block.timestamp;\n        uint256 startTime = poolState.decodeUint32(_START_TIME_OFFSET);\n        uint256 endTime = poolState.decodeUint32(_END_TIME_OFFSET);\n\n        if (currentTime > endTime) {\n            return FixedPoint.ONE;\n        } else if (currentTime < startTime) {\n            return 0;\n        }\n\n        // No need for SafeMath as it was checked right above: endTime >= currentTime >= startTime\n        uint256 totalSeconds = endTime - startTime;\n        uint256 secondsElapsed = currentTime - startTime;\n\n        // In the degenerate case of a zero duration change, consider it completed (and avoid division by zero)\n        return\n            totalSeconds == 0\n                ? FixedPoint.ONE\n                : secondsElapsed.divDown(totalSeconds);\n    }\n\n    /**\n     * @dev When calling updateWeightsGradually again during an update, reset the start weights to the current weights,\n     * if necessary.\n     */\n    function _startGradualWeightChange(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] memory startWeights,\n        uint256[] memory endWeights\n    ) internal virtual {\n        bytes32 newPoolState = _poolState;\n\n        uint256 normalizedSum = 0;\n        for (uint256 i = 0; i < endWeights.length; i++) {\n            uint256 endWeight = endWeights[i];\n            _require(endWeight >= _MIN_WEIGHT, Errors.MIN_WEIGHT);\n\n            newPoolState = newPoolState\n                .insertUint31(\n                    startWeights[i].compress31(),\n                    _START_WEIGHT_OFFSET + i * 31\n                )\n                .insertUint16(\n                    endWeight.compress16(),\n                    _END_WEIGHT_OFFSET + i * 16\n                );\n\n            normalizedSum = normalizedSum.add(endWeight);\n        }\n        // Ensure that the normalized weights sum to ONE\n        _require(\n            normalizedSum == FixedPoint.ONE,\n            Errors.NORMALIZED_WEIGHT_INVARIANT\n        );\n\n        _poolState = newPoolState\n            .insertUint32(startTime, _START_TIME_OFFSET)\n            .insertUint32(endTime, _END_TIME_OFFSET);\n\n        emit GradualWeightUpdateScheduled(\n            startTime,\n            endTime,\n            startWeights,\n            endWeights\n        );\n    }\n\n    function _interpolateWeight(\n        uint256 startWeight,\n        uint256 endWeight,\n        uint256 pctProgress\n    ) private pure returns (uint256) {\n        if (pctProgress == 0 || startWeight == endWeight) return startWeight;\n        if (pctProgress >= FixedPoint.ONE) return endWeight;\n\n        if (startWeight > endWeight) {\n            uint256 weightDelta = pctProgress.mulDown(startWeight - endWeight);\n            return startWeight.sub(weightDelta);\n        } else {\n            uint256 weightDelta = pctProgress.mulDown(endWeight - startWeight);\n            return startWeight.add(weightDelta);\n        }\n    }\n\n    function _setSwapEnabled(bool swapEnabled) private {\n        _poolState = _poolState.insertBool(swapEnabled, _SWAP_ENABLED_OFFSET);\n        emit SwapEnabledSet(swapEnabled);\n    }\n\n    function _getMaxTokens() internal pure override returns (uint256) {\n        return _MAX_LBP_TOKENS;\n    }\n\n    function _getTotalTokens()\n        internal\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _totalTokens;\n    }\n\n    function _scalingFactor(IERC20 token)\n        internal\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        // prettier-ignore\n        if (token == _token0) { return _scalingFactor0; }\n        else if (token == _token1) { return _scalingFactor1; }\n        else if (token == _token2) { return _scalingFactor2; }\n        else if (token == _token3) { return _scalingFactor3; }\n        else {\n            _revert(Errors.INVALID_TOKEN);\n        }\n    }\n\n    function _scalingFactors()\n        internal\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        uint256 totalTokens = _getTotalTokens();\n        uint256[] memory scalingFactors = new uint256[](totalTokens);\n\n        // prettier-ignore\n        {\n            if (totalTokens > 0) { scalingFactors[0] = _scalingFactor0; } else { return scalingFactors; }\n            if (totalTokens > 1) { scalingFactors[1] = _scalingFactor1; } else { return scalingFactors; }\n            if (totalTokens > 2) { scalingFactors[2] = _scalingFactor2; } else { return scalingFactors; }\n            if (totalTokens > 3) { scalingFactors[3] = _scalingFactor3; } else { return scalingFactors; }\n        }\n\n        return scalingFactors;\n    }\n}\n"
    },
    "contracts/lbp/NoProtocolFeeLiquidityBootstrappingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport './LiquidityBootstrappingPool.sol';\r\n\r\n/**\r\n * @dev The original Liquidity Bootstrapping Pool computes accumulated swap fees from invariant growth, which\r\n * incorrectly assumes that the token weights do not change. This version is an exact copy of that flawed contract, with\r\n * a hotfix that hard-codes the protocol fee swap percentage to 0, ignoring the value stored in the Fee Collector.\r\n */\r\ncontract NoProtocolFeeLiquidityBootstrappingPool is LiquidityBootstrappingPool {\r\n    constructor(\r\n        IVault vault,\r\n        string memory name,\r\n        string memory symbol,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory normalizedWeights,\r\n        uint256 swapFeePercentage,\r\n        uint256 pauseWindowDuration,\r\n        uint256 bufferPeriodDuration,\r\n        address owner,\r\n        bool swapEnabledOnStart\r\n    )\r\n        LiquidityBootstrappingPool(\r\n            vault,\r\n            name,\r\n            symbol,\r\n            tokens,\r\n            normalizedWeights,\r\n            swapFeePercentage,\r\n            pauseWindowDuration,\r\n            bufferPeriodDuration,\r\n            owner,\r\n            swapEnabledOnStart\r\n        )\r\n    {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function onJoinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256,\r\n        bytes memory userData\r\n    ) public virtual override returns (uint256[] memory, uint256[] memory) {\r\n        return\r\n            super.onJoinPool(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                balances,\r\n                lastChangeBlock,\r\n                0,\r\n                userData\r\n            );\r\n    }\r\n\r\n    function onExitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory balances,\r\n        uint256 lastChangeBlock,\r\n        uint256,\r\n        bytes memory userData\r\n    ) public virtual override returns (uint256[] memory, uint256[] memory) {\r\n        return\r\n            super.onExitPool(\r\n                poolId,\r\n                sender,\r\n                recipient,\r\n                balances,\r\n                lastChangeBlock,\r\n                0,\r\n                userData\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/openzeppelin/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\nimport './EnumerableSet.sol';\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        _require(\r\n            hasRole(_roles[role].adminRole, msg.sender),\r\n            Errors.GRANT_SENDER_NOT_ADMIN\r\n        );\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had already been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        _require(\r\n            hasRole(_roles[role].adminRole, msg.sender),\r\n            Errors.REVOKE_SENDER_NOT_ADMIN\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        _require(account == msg.sender, Errors.RENOUNCE_SENDER_NOT_ALLOWED);\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, msg.sender);\r\n        }\r\n    }\r\n}"
    },
    "contracts/openzeppelin/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        _HASHED_NAME = keccak256(bytes(name));\r\n        _HASHED_VERSION = keccak256(bytes(version));\r\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n\r\n    function _getChainId() private view returns (uint256 chainId) {\r\n        // Silence state mutability warning without generating bytecode.\r\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\r\n        // https://github.com/ethereum/solidity/issues/2691\r\n        this;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}"
    },
    "contracts/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n// Based on the EnumerableSet library from OpenZeppelin contracts, altered to remove the base private functions that\r\n// work on bytes32, replacing them with a native implementation for address values, to reduce bytecode size and runtime\r\n// costs.\r\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\r\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\r\n\r\n    struct AddressSet {\r\n        // Storage of set values\r\n        address[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(address => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            address lastValue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastValue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\r\n        return unchecked_at(set, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\r\n     * than {length}). O(1).\r\n     *\r\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\r\n     * within bounds.\r\n     */\r\n    function unchecked_at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return set._values[index];\r\n    }\r\n}"
    },
    "contracts/openzeppelin/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\nimport './IERC20.sol';\r\nimport './SafeMath.sol';\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\r\n        _require(\r\n            recipient != address(0),\r\n            Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS\r\n        );\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            Errors.ERC20_TRANSFER_EXCEEDS_BALANCE\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            Errors.ERC20_BURN_EXCEEDS_ALLOWANCE\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/openzeppelin/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './ERC20.sol';\r\nimport './IERC20Permit.sol';\r\nimport './EIP712.sol';\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\r\n    mapping(address => uint256) private _nonces;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 private immutable _PERMIT_TYPEHASH =\r\n        keccak256(\r\n            'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\r\n        );\r\n\r\n    /**\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n     *\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n     */\r\n    constructor(string memory name) EIP712(name, '1') {}\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-permit}.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _require(block.timestamp <= deadline, Errors.EXPIRED_PERMIT);\r\n\r\n        uint256 nonce = _nonces[owner];\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline)\r\n        );\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ecrecover(hash, v, r, s);\r\n        _require(\r\n            (signer != address(0)) && (signer == owner),\r\n            Errors.INVALID_SIGNATURE\r\n        );\r\n\r\n        _nonces[owner] = nonce + 1;\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n}\r\n"
    },
    "contracts/openzeppelin/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"
    },
    "contracts/openzeppelin/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\r\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\r\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _enterNonReentrant();\r\n        _;\r\n        _exitNonReentrant();\r\n    }\r\n\r\n    function _enterNonReentrant() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        _require(_status != _ENTERED, Errors.REENTRANCY);\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _exitNonReentrant() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"
    },
    "contracts/openzeppelin/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport '../helpers/BalancerErrors.sol';\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        _require(c >= a, Errors.ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, Errors.SUB_OVERFLOW);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 errorCode\r\n    ) internal pure returns (uint256) {\r\n        _require(b <= a, errorCode);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n"
    },
    "contracts/WeightedMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './helpers/FixedPoint.sol';\r\nimport './helpers/Math.sol';\r\nimport './helpers/InputHelpers.sol';\r\n\r\n/* solhint-disable private-vars-leading-underscore */\r\n\r\ncontract WeightedMath {\r\n    using FixedPoint for uint256;\r\n    // A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\r\n    // implementation of the power function, as these ratios are often exponents.\r\n    uint256 internal constant _MIN_WEIGHT = 0.01e18;\r\n    // Having a minimum normalized weight imposes a limit on the maximum number of tokens;\r\n    // i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\r\n    uint256 internal constant _MAX_WEIGHTED_TOKENS = 100;\r\n\r\n    // Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\r\n    // ratio).\r\n\r\n    // Swap limits: amounts swapped may not be larger than this percentage of total balance.\r\n    uint256 internal constant _MAX_IN_RATIO = 0.3e18;\r\n    uint256 internal constant _MAX_OUT_RATIO = 0.3e18;\r\n\r\n    // Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\r\n    uint256 internal constant _MAX_INVARIANT_RATIO = 3e18;\r\n    // Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\r\n    uint256 internal constant _MIN_INVARIANT_RATIO = 0.7e18;\r\n\r\n    // Invariant is used to collect protocol swap fees by comparing its value between two times.\r\n    // So we can round always to the same direction. It is also used to initiate the BPT amount\r\n    // and, because there is a minimum BPT, we round down the invariant.\r\n    function _calculateInvariant(\r\n        uint256[] memory normalizedWeights,\r\n        uint256[] memory balances\r\n    ) internal pure returns (uint256 invariant) {\r\n        /**********************************************************************************************\r\n        // invariant               _____                                                             //\r\n        // wi = weight index i      | |      wi                                                      //\r\n        // bi = balance index i     | |  bi ^   = i                                                  //\r\n        // i = invariant                                                                             //\r\n        **********************************************************************************************/\r\n\r\n        invariant = FixedPoint.ONE;\r\n        for (uint256 i = 0; i < normalizedWeights.length; i++) {\r\n            invariant = invariant.mulDown(\r\n                balances[i].powDown(normalizedWeights[i])\r\n            );\r\n        }\r\n\r\n        _require(invariant > 0, Errors.ZERO_INVARIANT);\r\n    }\r\n\r\n    // Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\r\n    // current balances and weights.\r\n    function _calcOutGivenIn(\r\n        uint256 balanceIn,\r\n        uint256 weightIn,\r\n        uint256 balanceOut,\r\n        uint256 weightOut,\r\n        uint256 amountIn\r\n    ) internal pure returns (uint256) {\r\n        /**********************************************************************************************\r\n        // outGivenIn                                                                                //\r\n        // aO = amountOut                                                                            //\r\n        // bO = balanceOut                                                                           //\r\n        // bI = balanceIn              /      /            bI             \\    (wI / wO) \\           //\r\n        // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\r\n        // wI = weightIn               \\      \\       ( bI + aI )         /              /           //\r\n        // wO = weightOut                                                                            //\r\n        **********************************************************************************************/\r\n\r\n        // Amount out, so we round down overall.\r\n\r\n        // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\r\n        // Because bI / (bI + aI) <= 1, the exponent rounds down.\r\n\r\n        // Cannot exceed maximum in ratio\r\n        _require(\r\n            amountIn <= balanceIn.mulDown(_MAX_IN_RATIO),\r\n            Errors.MAX_IN_RATIO\r\n        );\r\n\r\n        uint256 denominator = balanceIn.add(amountIn);\r\n        uint256 base = balanceIn.divUp(denominator);\r\n        uint256 exponent = weightIn.divDown(weightOut);\r\n        uint256 power = base.powUp(exponent);\r\n\r\n        return balanceOut.mulDown(power.complement());\r\n    }\r\n\r\n    // Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\r\n    // current balances and weights.\r\n    function _calcInGivenOut(\r\n        uint256 balanceIn,\r\n        uint256 weightIn,\r\n        uint256 balanceOut,\r\n        uint256 weightOut,\r\n        uint256 amountOut\r\n    ) internal pure returns (uint256) {\r\n        /**********************************************************************************************\r\n        // inGivenOut                                                                                //\r\n        // aO = amountOut                                                                            //\r\n        // bO = balanceOut                                                                           //\r\n        // bI = balanceIn              /  /            bO             \\    (wO / wI)      \\          //\r\n        // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\r\n        // wI = weightIn               \\  \\       ( bO - aO )         /                   /          //\r\n        // wO = weightOut                                                                            //\r\n        **********************************************************************************************/\r\n\r\n        // Amount in, so we round up overall.\r\n\r\n        // The multiplication rounds up, and the power rounds up (so the base rounds up too).\r\n        // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\r\n\r\n        // Cannot exceed maximum out ratio\r\n        _require(\r\n            amountOut <= balanceOut.mulDown(_MAX_OUT_RATIO),\r\n            Errors.MAX_OUT_RATIO\r\n        );\r\n\r\n        uint256 base = balanceOut.divUp(balanceOut.sub(amountOut));\r\n        uint256 exponent = weightOut.divUp(weightIn);\r\n        uint256 power = base.powUp(exponent);\r\n\r\n        // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\r\n        // the following subtraction should never revert.\r\n        uint256 ratio = power.sub(FixedPoint.ONE);\r\n\r\n        return balanceIn.mulUp(ratio);\r\n    }\r\n\r\n    function _calcBptOutGivenExactTokensIn(\r\n        uint256[] memory balances,\r\n        uint256[] memory normalizedWeights,\r\n        uint256[] memory amountsIn,\r\n        uint256 bptTotalSupply,\r\n        uint256 swapFeePercentage\r\n    ) internal pure returns (uint256) {\r\n        // BPT out, so we round down overall.\r\n\r\n        uint256[] memory balanceRatiosWithFee = new uint256[](amountsIn.length);\r\n\r\n        uint256 invariantRatioWithFees = 0;\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            balanceRatiosWithFee[i] = balances[i].add(amountsIn[i]).divDown(\r\n                balances[i]\r\n            );\r\n            invariantRatioWithFees = invariantRatioWithFees.add(\r\n                balanceRatiosWithFee[i].mulDown(normalizedWeights[i])\r\n            );\r\n        }\r\n\r\n        uint256 invariantRatio = FixedPoint.ONE;\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            uint256 amountInWithoutFee;\r\n\r\n            if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\r\n                uint256 nonTaxableAmount = balances[i].mulDown(\r\n                    invariantRatioWithFees.sub(FixedPoint.ONE)\r\n                );\r\n                uint256 taxableAmount = amountsIn[i].sub(nonTaxableAmount);\r\n                amountInWithoutFee = nonTaxableAmount.add(\r\n                    taxableAmount.mulDown(FixedPoint.ONE.sub(swapFeePercentage))\r\n                );\r\n            } else {\r\n                amountInWithoutFee = amountsIn[i];\r\n            }\r\n\r\n            uint256 balanceRatio = balances[i].add(amountInWithoutFee).divDown(\r\n                balances[i]\r\n            );\r\n\r\n            invariantRatio = invariantRatio.mulDown(\r\n                balanceRatio.powDown(normalizedWeights[i])\r\n            );\r\n        }\r\n\r\n        if (invariantRatio > FixedPoint.ONE) {\r\n            return bptTotalSupply.mulDown(invariantRatio.sub(FixedPoint.ONE));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _calcTokenInGivenExactBptOut(\r\n        uint256 balance,\r\n        uint256 normalizedWeight,\r\n        uint256 bptAmountOut,\r\n        uint256 bptTotalSupply,\r\n        uint256 swapFeePercentage\r\n    ) internal pure returns (uint256) {\r\n        /******************************************************************************************\r\n        // tokenInForExactBPTOut                                                                 //\r\n        // a = amountIn                                                                          //\r\n        // b = balance                      /  /    totalBPT + bptOut      \\    (1 / w)       \\  //\r\n        // bptOut = bptAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\r\n        // bpt = totalBPT                   \\  \\       totalBPT            /                  /  //\r\n        // w = weight                                                                            //\r\n        ******************************************************************************************/\r\n\r\n        // Token in, so we round up overall.\r\n\r\n        // Calculate the factor by which the invariant will increase after minting BPTAmountOut\r\n        uint256 invariantRatio = bptTotalSupply.add(bptAmountOut).divUp(\r\n            bptTotalSupply\r\n        );\r\n        _require(\r\n            invariantRatio <= _MAX_INVARIANT_RATIO,\r\n            Errors.MAX_OUT_BPT_FOR_TOKEN_IN\r\n        );\r\n\r\n        // Calculate by how much the token balance has to increase to match the invariantRatio\r\n        uint256 balanceRatio = invariantRatio.powUp(\r\n            FixedPoint.ONE.divUp(normalizedWeight)\r\n        );\r\n\r\n        uint256 amountInWithoutFee = balance.mulUp(\r\n            balanceRatio.sub(FixedPoint.ONE)\r\n        );\r\n\r\n        // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\r\n        // accordingly.\r\n        uint256 taxablePercentage = normalizedWeight.complement();\r\n        uint256 taxableAmount = amountInWithoutFee.mulUp(taxablePercentage);\r\n        uint256 nonTaxableAmount = amountInWithoutFee.sub(taxableAmount);\r\n\r\n        return\r\n            nonTaxableAmount.add(\r\n                taxableAmount.divUp(FixedPoint.ONE.sub(swapFeePercentage))\r\n            );\r\n    }\r\n\r\n    function _calcBptInGivenExactTokensOut(\r\n        uint256[] memory balances,\r\n        uint256[] memory normalizedWeights,\r\n        uint256[] memory amountsOut,\r\n        uint256 bptTotalSupply,\r\n        uint256 swapFeePercentage\r\n    ) internal pure returns (uint256) {\r\n        // BPT in, so we round up overall.\r\n\r\n        uint256[] memory balanceRatiosWithoutFee = new uint256[](\r\n            amountsOut.length\r\n        );\r\n        uint256 invariantRatioWithoutFees = 0;\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            balanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(\r\n                balances[i]\r\n            );\r\n            invariantRatioWithoutFees = invariantRatioWithoutFees.add(\r\n                balanceRatiosWithoutFee[i].mulUp(normalizedWeights[i])\r\n            );\r\n        }\r\n\r\n        uint256 invariantRatio = FixedPoint.ONE;\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\r\n            // 'token out'. This results in slightly larger price impact.\r\n\r\n            uint256 amountOutWithFee;\r\n            if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {\r\n                uint256 nonTaxableAmount = balances[i].mulDown(\r\n                    invariantRatioWithoutFees.complement()\r\n                );\r\n                uint256 taxableAmount = amountsOut[i].sub(nonTaxableAmount);\r\n                amountOutWithFee = nonTaxableAmount.add(\r\n                    taxableAmount.divUp(FixedPoint.ONE.sub(swapFeePercentage))\r\n                );\r\n            } else {\r\n                amountOutWithFee = amountsOut[i];\r\n            }\r\n\r\n            uint256 balanceRatio = balances[i].sub(amountOutWithFee).divDown(\r\n                balances[i]\r\n            );\r\n\r\n            invariantRatio = invariantRatio.mulDown(\r\n                balanceRatio.powDown(normalizedWeights[i])\r\n            );\r\n        }\r\n\r\n        return bptTotalSupply.mulUp(invariantRatio.complement());\r\n    }\r\n\r\n    function _calcTokenOutGivenExactBptIn(\r\n        uint256 balance,\r\n        uint256 normalizedWeight,\r\n        uint256 bptAmountIn,\r\n        uint256 bptTotalSupply,\r\n        uint256 swapFeePercentage\r\n    ) internal pure returns (uint256) {\r\n        /*****************************************************************************************\r\n        // exactBPTInForTokenOut                                                                //\r\n        // a = amountOut                                                                        //\r\n        // b = balance                     /      /    totalBPT - bptIn       \\    (1 / w)  \\   //\r\n        // bptIn = bptAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\r\n        // bpt = totalBPT                  \\      \\       totalBPT            /             /   //\r\n        // w = weight                                                                           //\r\n        *****************************************************************************************/\r\n\r\n        // Token out, so we round down overall. The multiplication rounds down, but the power rounds up (so the base\r\n        // rounds up). Because (totalBPT - bptIn) / totalBPT <= 1, the exponent rounds down.\r\n\r\n        // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\r\n        uint256 invariantRatio = bptTotalSupply.sub(bptAmountIn).divUp(\r\n            bptTotalSupply\r\n        );\r\n        _require(\r\n            invariantRatio >= _MIN_INVARIANT_RATIO,\r\n            Errors.MIN_BPT_IN_FOR_TOKEN_OUT\r\n        );\r\n\r\n        // Calculate by how much the token balance has to decrease to match invariantRatio\r\n        uint256 balanceRatio = invariantRatio.powUp(\r\n            FixedPoint.ONE.divDown(normalizedWeight)\r\n        );\r\n\r\n        // Because of rounding up, balanceRatio can be greater than one. Using complement prevents reverts.\r\n        uint256 amountOutWithoutFee = balance.mulDown(\r\n            balanceRatio.complement()\r\n        );\r\n\r\n        // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\r\n        // in swap fees.\r\n        uint256 taxablePercentage = normalizedWeight.complement();\r\n\r\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\r\n        // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\r\n        uint256 taxableAmount = amountOutWithoutFee.mulUp(taxablePercentage);\r\n        uint256 nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\r\n\r\n        return\r\n            nonTaxableAmount.add(\r\n                taxableAmount.mulDown(FixedPoint.ONE.sub(swapFeePercentage))\r\n            );\r\n    }\r\n\r\n    function _calcTokensOutGivenExactBptIn(\r\n        uint256[] memory balances,\r\n        uint256 bptAmountIn,\r\n        uint256 totalBPT\r\n    ) internal pure returns (uint256[] memory) {\r\n        /**********************************************************************************************\r\n        // exactBPTInForTokensOut                                                                    //\r\n        // (per token)                                                                               //\r\n        // aO = amountOut                  /        bptIn         \\                                  //\r\n        // b = balance           a0 = b * | ---------------------  |                                 //\r\n        // bptIn = bptAmountIn             \\       totalBPT       /                                  //\r\n        // bpt = totalBPT                                                                            //\r\n        **********************************************************************************************/\r\n\r\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\r\n        // multiplication and division.\r\n\r\n        uint256 bptRatio = bptAmountIn.divDown(totalBPT);\r\n\r\n        uint256[] memory amountsOut = new uint256[](balances.length);\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            amountsOut[i] = balances[i].mulDown(bptRatio);\r\n        }\r\n\r\n        return amountsOut;\r\n    }\r\n\r\n    function _calcDueTokenProtocolSwapFeeAmount(\r\n        uint256 balance,\r\n        uint256 normalizedWeight,\r\n        uint256 previousInvariant,\r\n        uint256 currentInvariant,\r\n        uint256 protocolSwapFeePercentage\r\n    ) internal pure returns (uint256) {\r\n        /*********************************************************************************\r\n        /*  protocolSwapFeePercentage * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\r\n        *********************************************************************************/\r\n\r\n        if (currentInvariant <= previousInvariant) {\r\n            // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\r\n            // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\r\n            return 0;\r\n        }\r\n\r\n        // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\r\n        // fees to the Vault.\r\n\r\n        // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\r\n        // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\r\n\r\n        uint256 base = previousInvariant.divUp(currentInvariant);\r\n        uint256 exponent = FixedPoint.ONE.divDown(normalizedWeight);\r\n\r\n        // Because the exponent is larger than one, the base of the power function has a lower bound. We cap to this\r\n        // value to avoid numeric issues, which means in the extreme case (where the invariant growth is larger than\r\n        // 1 / min exponent) the Pool will pay less in protocol fees than it should.\r\n        base = Math.max(base, FixedPoint.MIN_POW_BASE_FREE_EXPONENT);\r\n\r\n        uint256 power = base.powUp(exponent);\r\n\r\n        uint256 tokenAccruedFees = balance.mulDown(power.complement());\r\n        return tokenAccruedFees.mulDown(protocolSwapFeePercentage);\r\n    }\r\n}\r\n"
    },
    "contracts/WeightedPoolUserDataHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport './openzeppelin/IERC20.sol';\r\n\r\nimport './BaseWeightedPool.sol';\r\n\r\nlibrary WeightedPoolUserDataHelpers {\r\n    function joinKind(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (BaseWeightedPool.JoinKind)\r\n    {\r\n        return abi.decode(self, (BaseWeightedPool.JoinKind));\r\n    }\r\n\r\n    function exitKind(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (BaseWeightedPool.ExitKind)\r\n    {\r\n        return abi.decode(self, (BaseWeightedPool.ExitKind));\r\n    }\r\n\r\n    // Joins\r\n\r\n    function initialAmountsIn(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory amountsIn)\r\n    {\r\n        (, amountsIn) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.JoinKind, uint256[])\r\n        );\r\n    }\r\n\r\n    function exactTokensInForBptOut(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\r\n    {\r\n        (, amountsIn, minBPTAmountOut) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.JoinKind, uint256[], uint256)\r\n        );\r\n    }\r\n\r\n    function tokenInForExactBptOut(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256 bptAmountOut, uint256 tokenIndex)\r\n    {\r\n        (, bptAmountOut, tokenIndex) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.JoinKind, uint256, uint256)\r\n        );\r\n    }\r\n\r\n    // Exits\r\n\r\n    function exactBptInForTokenOut(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256 bptAmountIn, uint256 tokenIndex)\r\n    {\r\n        (, bptAmountIn, tokenIndex) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.ExitKind, uint256, uint256)\r\n        );\r\n    }\r\n\r\n    function exactBptInForTokensOut(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256 bptAmountIn)\r\n    {\r\n        (, bptAmountIn) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.ExitKind, uint256)\r\n        );\r\n    }\r\n\r\n    function bptInForExactTokensOut(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\r\n    {\r\n        (, amountsOut, maxBPTAmountIn) = abi.decode(\r\n            self,\r\n            (BaseWeightedPool.ExitKind, uint256[], uint256)\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}