/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IExternalWeightedMathInterface extends utils.Interface {
  functions: {
    "calcAllTokensInGivenExactBptOut(uint256[],uint256,uint256)": FunctionFragment;
    "calcBptInGivenExactTokenOut(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcBptInGivenExactTokensOut(uint256[],uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "calcBptOutAddToken(uint256,uint256)": FunctionFragment;
    "calcBptOutGivenExactTokenIn(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcBptOutGivenExactTokensIn(uint256[],uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcTokenInGivenExactBptOut(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcTokenOutGivenExactBptIn(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcTokensOutGivenExactBptIn(uint256[],uint256,uint256)": FunctionFragment;
    "calculateInvariant(uint256[],uint256[])": FunctionFragment;
    "exitBPTInForExactTokensOut(uint256[],uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
    "exitExactBPTInForTokenOut(uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
    "exitExactBPTInForTokensOut(uint256[],uint256,bytes)": FunctionFragment;
    "joinAllTokensInForExactBPTOut(uint256[],uint256,bytes)": FunctionFragment;
    "joinExactTokensInForBPTOut(uint256[],uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
    "joinTokenInForExactBPTOut(uint256[],uint256[],uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcAllTokensInGivenExactBptOut"
      | "calcBptInGivenExactTokenOut"
      | "calcBptInGivenExactTokensOut"
      | "calcBptOutAddToken"
      | "calcBptOutGivenExactTokenIn"
      | "calcBptOutGivenExactTokensIn"
      | "calcInGivenOut"
      | "calcOutGivenIn"
      | "calcTokenInGivenExactBptOut"
      | "calcTokenOutGivenExactBptIn"
      | "calcTokensOutGivenExactBptIn"
      | "calculateInvariant"
      | "exitBPTInForExactTokensOut"
      | "exitExactBPTInForTokenOut"
      | "exitExactBPTInForTokensOut"
      | "joinAllTokensInForExactBPTOut"
      | "joinExactTokensInForBPTOut"
      | "joinTokenInForExactBPTOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcAllTokensInGivenExactBptOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptInGivenExactTokenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptInGivenExactTokensOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptOutAddToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptOutGivenExactTokenIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptOutGivenExactTokensIn",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenInGivenExactBptOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenOutGivenExactBptIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensOutGivenExactBptIn",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInvariant",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitBPTInForExactTokensOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitExactBPTInForTokenOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitExactBPTInForTokensOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinAllTokensInForExactBPTOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinExactTokensInForBPTOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTokenInForExactBPTOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcAllTokensInGivenExactBptOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBptInGivenExactTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBptInGivenExactTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBptOutAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBptOutGivenExactTokenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBptOutGivenExactTokensIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenInGivenExactBptOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenOutGivenExactBptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensOutGivenExactBptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitBPTInForExactTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitExactBPTInForTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitExactBPTInForTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinAllTokensInForExactBPTOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinExactTokensInForBPTOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinTokenInForExactBPTOut",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExternalWeightedMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExternalWeightedMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcAllTokensInGivenExactBptOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountOut: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calcBptInGivenExactTokenOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcBptInGivenExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcBptOutAddToken(
      totalSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcBptOutGivenExactTokenIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcBptOutGivenExactTokensIn(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcInGivenOut(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOutGivenIn(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokenInGivenExactBptOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokenOutGivenExactBptIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokensOutGivenExactBptIn(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calculateInvariant(
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      balances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exitBPTInForExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    exitExactBPTInForTokenOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    exitExactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    joinAllTokensInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;

    joinExactTokensInForBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    joinTokenInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;
  };

  calcAllTokensInGivenExactBptOut(
    balances: PromiseOrValue<BigNumberish>[],
    bptAmountOut: PromiseOrValue<BigNumberish>,
    totalBPT: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calcBptInGivenExactTokenOut(
    balance: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    amountOut: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcBptInGivenExactTokensOut(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    amountsOut: PromiseOrValue<BigNumberish>[],
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcBptOutAddToken(
    totalSupply: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcBptOutGivenExactTokenIn(
    balance: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    amountIn: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcBptOutGivenExactTokensIn(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    amountsIn: PromiseOrValue<BigNumberish>[],
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcInGivenOut(
    balanceIn: PromiseOrValue<BigNumberish>,
    weightIn: PromiseOrValue<BigNumberish>,
    balanceOut: PromiseOrValue<BigNumberish>,
    weightOut: PromiseOrValue<BigNumberish>,
    amountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutGivenIn(
    balanceIn: PromiseOrValue<BigNumberish>,
    weightIn: PromiseOrValue<BigNumberish>,
    balanceOut: PromiseOrValue<BigNumberish>,
    weightOut: PromiseOrValue<BigNumberish>,
    amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokenInGivenExactBptOut(
    balance: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    bptAmountOut: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokenOutGivenExactBptIn(
    balance: PromiseOrValue<BigNumberish>,
    normalizedWeight: PromiseOrValue<BigNumberish>,
    bptAmountIn: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokensOutGivenExactBptIn(
    balances: PromiseOrValue<BigNumberish>[],
    bptAmountIn: PromiseOrValue<BigNumberish>,
    totalBPT: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calculateInvariant(
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    balances: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exitBPTInForExactTokensOut(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    scalingFactors: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  exitExactBPTInForTokenOut(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  exitExactBPTInForTokensOut(
    balances: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      bptAmountIn: BigNumber;
      amountsOut: BigNumber[];
    }
  >;

  joinAllTokensInForExactBPTOut(
    balances: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & {
      bptAmountOut: BigNumber;
      amountsIn: BigNumber[];
    }
  >;

  joinExactTokensInForBPTOut(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    scalingFactors: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  joinTokenInForExactBPTOut(
    balances: PromiseOrValue<BigNumberish>[],
    normalizedWeights: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  callStatic: {
    calcAllTokensInGivenExactBptOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountOut: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calcBptInGivenExactTokenOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptInGivenExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutAddToken(
      totalSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutGivenExactTokenIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutGivenExactTokensIn(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInGivenOut(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenInGivenExactBptOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenOutGivenExactBptIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensOutGivenExactBptIn(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calculateInvariant(
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      balances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitBPTInForExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    exitExactBPTInForTokenOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    exitExactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
      }
    >;

    joinAllTokensInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;

    joinExactTokensInForBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    joinTokenInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;
  };

  filters: {};

  estimateGas: {
    calcAllTokensInGivenExactBptOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountOut: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptInGivenExactTokenOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptInGivenExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutAddToken(
      totalSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutGivenExactTokenIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcBptOutGivenExactTokensIn(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcInGivenOut(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenInGivenExactBptOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenOutGivenExactBptIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensOutGivenExactBptIn(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInvariant(
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      balances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitBPTInForExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitExactBPTInForTokenOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitExactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinAllTokensInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinExactTokensInForBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinTokenInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcAllTokensInGivenExactBptOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountOut: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBptInGivenExactTokenOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBptInGivenExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBptOutAddToken(
      totalSupply: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBptOutGivenExactTokenIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBptOutGivenExactTokensIn(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcInGivenOut(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutGivenIn(
      balanceIn: PromiseOrValue<BigNumberish>,
      weightIn: PromiseOrValue<BigNumberish>,
      balanceOut: PromiseOrValue<BigNumberish>,
      weightOut: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenInGivenExactBptOut(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenOutGivenExactBptIn(
      balance: PromiseOrValue<BigNumberish>,
      normalizedWeight: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokensOutGivenExactBptIn(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      totalBPT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInvariant(
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      balances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitBPTInForExactTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitExactBPTInForTokenOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitExactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinAllTokensInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinExactTokensInForBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      scalingFactors: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinTokenInForExactBPTOut(
      balances: PromiseOrValue<BigNumberish>[],
      normalizedWeights: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
